{"version":3,"sources":["webpack:///firebase-database.js","webpack:///./src/utils/assert.ts","webpack:///./src/utils/crypt.ts","webpack:///./src/utils/hash.ts","webpack:///./src/utils/Sha1.ts","webpack:///./src/database/core/util/util.ts","webpack:///./src/utils/obj.ts","webpack:///./src/utils/json.ts","webpack:///./src/utils/environment.ts","webpack:///./src/utils/constants.ts","webpack:///./src/database/core/storage/DOMStorageWrapper.ts","webpack:///./src/database/core/storage/MemoryStorage.ts","webpack:///./src/database/core/storage/storage.ts","webpack:///./src/database/realtime/Constants.ts","webpack:///./src/utils/utf8.ts","webpack:///./src/database/core/stats/StatsCollection.ts","webpack:///./src/database/core/stats/StatsManager.ts","webpack:///./src/database/realtime/WebSocketConnection.ts","webpack:///./src/database/core/util/libs/parser.ts","webpack:///./src/utils/validation.ts","webpack:///./src/database/core/snap/comparators.ts","webpack:///./src/database/core/snap/nodeFromJSON.ts","webpack:///./src/database/core/snap/indexes/KeyIndex.ts","webpack:///./src/database/core/snap/snap.ts","webpack:///./src/database/core/snap/LeafNode.ts","webpack:///./src/database/core/snap/indexes/PriorityIndex.ts","webpack:///./src/database/core/snap/IndexMap.ts","webpack:///./src/database/core/snap/ChildrenNode.ts","webpack:///./src/database/core/util/Path.ts","webpack:///./src/database/core/RepoInfo.ts","webpack:///./src/database/core/util/validation.ts","webpack:///./src/database/api/onDisconnect.ts","webpack:///./src/database/api/TransactionResult.ts","webpack:///./src/database/core/util/NextPushId.ts","webpack:///./src/database/core/snap/Node.ts","webpack:///./src/database/core/snap/indexes/Index.ts","webpack:///./src/database/core/util/SortedMap.ts","webpack:///./src/database/core/snap/childSet.ts","webpack:///./src/database/core/snap/indexes/ValueIndex.ts","webpack:///./src/database/api/Query.ts","webpack:///./src/database/core/operation/Operation.ts","webpack:///./src/database/core/snap/indexes/PathIndex.ts","webpack:///./src/database/api/DataSnapshot.ts","webpack:///./src/database/core/view/Event.ts","webpack:///./src/database/core/view/EventRegistration.ts","webpack:///./src/database/core/util/CountedSet.ts","webpack:///./src/database/core/SparseSnapshotTree.ts","webpack:///./src/database/core/util/ServerValues.ts","webpack:///./src/database/core/util/ImmutableTree.ts","webpack:///./src/database/core/SyncPoint.ts","webpack:///./src/database/core/operation/AckUserWrite.ts","webpack:///./src/database/core/operation/ListenComplete.ts","webpack:///./src/database/core/operation/Overwrite.ts","webpack:///./src/database/core/operation/Merge.ts","webpack:///./src/database/core/view/CacheNode.ts","webpack:///./src/database/core/view/ViewCache.ts","webpack:///./src/database/core/view/Change.ts","webpack:///./src/database/core/view/filter/IndexedFilter.ts","webpack:///./src/database/core/view/ChildChangeAccumulator.ts","webpack:///./src/database/core/view/CompleteChildSource.ts","webpack:///./src/database/core/view/ViewProcessor.ts","webpack:///./src/database/core/view/EventGenerator.ts","webpack:///./src/database/core/view/View.ts","webpack:///./src/database/core/CompoundWrite.ts","webpack:///./src/database/core/WriteTree.ts","webpack:///./src/database/core/SyncTree.ts","webpack:///./src/database/core/SnapshotHolder.ts","webpack:///./src/database/core/AuthTokenProvider.ts","webpack:///./src/database/core/stats/StatsListener.ts","webpack:///./src/database/core/stats/StatsReporter.ts","webpack:///./src/database/core/view/EventQueue.ts","webpack:///./src/database/core/util/EventEmitter.ts","webpack:///./src/database/core/util/VisibilityMonitor.ts","webpack:///./src/database/core/util/OnlineMonitor.ts","webpack:///./src/utils/jwt.ts","webpack:///./src/database/realtime/polling/PacketReceiver.ts","webpack:///./src/database/realtime/BrowserPollConnection.ts","webpack:///./src/database/realtime/TransportManager.ts","webpack:///./src/database/realtime/Connection.ts","webpack:///./src/database/core/ServerActions.ts","webpack:///./src/database/core/PersistentConnection.ts","webpack:///./src/utils/util.ts","webpack:///./src/database/core/ReadonlyRestClient.ts","webpack:///./src/database/core/Repo.ts","webpack:///./src/database/core/view/filter/RangedFilter.ts","webpack:///./src/database/core/view/filter/LimitedFilter.ts","webpack:///./src/database/core/view/QueryParams.ts","webpack:///./src/database/api/Reference.ts","webpack:///./src/database/core/Repo_transaction.ts","webpack:///./src/database/core/util/Tree.ts","webpack:///./src/database/core/RepoManager.ts","webpack:///./src/database/api/Database.ts","webpack:///./src/database/api/internal.ts","webpack:///./src/database/api/test_access.ts","webpack:///./src/database.ts","webpack:///(webpack)/buildin/harmony-module.js"],"names":["webpackJsonpFirebase","module","__webpack_exports__","__webpack_require__","d","assert","assertionError","__WEBPACK_IMPORTED_MODULE_0__constants__","assertion","message","Error","SDK_VERSION","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__globalScope__","stringToByteArray","str","output","p","i","length","c","charCodeAt","byteArrayToString","bytes","String","fromCharCode","apply","chunk","slice","base64","_","O","S","T","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","opt_webSafe","Array","isArray","init_","byteToCharMap","byteToCharMapWebSafe_","byteToCharMap_","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charToByteMapWebSafe_","charToByteMap_","charAt","haveByte4","byte4","N","Hash","blockSize","__extends","extendStatics","setPrototypeOf","__proto__","b","hasOwnProperty","__","constructor","prototype","create","Sha1","_super","_this","call","chain_","buf_","W_","pad_","inbuf_","total_","reset","compress_","buf","opt_offset","W","t","f","k","a","e","update","opt_length","undefined","lengthMinusBlock","n","inbuf","digest","totalBits","j","LUIDGenerator","util_base64Encode","util_base64Decode","util_sha1","logger","enableLogging","log","logWrapper","error","fatal","warn","warnIfPageIsSecure","isInvalidJSONNumber","executeWhenDOMReady","MIN_NAME","MAX_NAME","nameCompare","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","each","doubleToIEEE754String","isChromeExtensionContentScript","isWindowsStoreApp","errorForServerCode","exceptionGuard","beingCrawled","setTimeoutNonBlocking","BufferImpl","__WEBPACK_IMPORTED_MODULE_0__utils_assert__","__WEBPACK_IMPORTED_MODULE_1__utils_obj__","__WEBPACK_IMPORTED_MODULE_4__utils_utf8__","__WEBPACK_IMPORTED_MODULE_5__utils_json__","__WEBPACK_IMPORTED_MODULE_6__storage_storage__","__WEBPACK_IMPORTED_MODULE_7__utils_environment__","_typeof","Symbol","iterator","obj","id","utf8Bytes","toString","sha1","sha1Bytes","buildLogMessage_","var_args","_i","arguments","firstLog_","logger_","persistent","console","bind","set","remove","get","prefix","concat","window","location","protocol","indexOf","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","fn","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","aAsInt","tryParseInt","bAsInt","key","keys","sort","segsize","len","dataSegs","substring","val","v","s","ln","bits","abs","pow","min","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","test","href","Windows","UI","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","stack","search","time","timeout","contains","safeGet","forEach","clone","isEmpty","getCount","map","findKey","findValue","getAnyKey","getValues","every","extend","objTo","objFrom","rv","opt_obj","res","opt_this","jsonEval","stringify","JSON","parse","isMobileCordova","isReactNative","isNodeSdk","getUA","navigator","NODE_CLIENT","NODE_ADMIN","CONSTANTS","__WEBPACK_IMPORTED_MODULE_0__utils_json__","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","name","__WEBPACK_IMPORTED_MODULE_0__utils_obj__","MemoryStorage","cache_","isInMemoryStorage","PersistentStorage","SessionStorage","storage_createStoragefor","domStorageName","domStorage","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","WEBSOCKET","LONG_POLLING","stringLength","__WEBPACK_IMPORTED_MODULE_0__assert__","out","high","__WEBPACK_IMPORTED_MODULE_0__utils_deep_copy__","StatsCollection","counters_","incrementCounter","amount","StatsManager_StatsManager","StatsManager","getCollection","repoInfo","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","process","WebSocketConnection","__WEBPACK_IMPORTED_MODULE_0__app__","__WEBPACK_IMPORTED_MODULE_1__utils_assert__","__WEBPACK_IMPORTED_MODULE_2__core_util_util__","__WEBPACK_IMPORTED_MODULE_3__core_stats_StatsManager__","__WEBPACK_IMPORTED_MODULE_4__Constants__","__WEBPACK_IMPORTED_MODULE_5__utils_constants__","__WEBPACK_IMPORTED_MODULE_6__core_storage_storage__","__WEBPACK_IMPORTED_MODULE_7__utils_json__","__WEBPACK_IMPORTED_MODULE_8__utils_environment__","WebSocketImpl","MozWebSocket","WebSocket","connId","transportSessionId","lastSessionId","keepaliveTimer","frames","totalFrames","bytesSent","bytesReceived","log_","stats_","connURL","connectionURL_","urlParams","connectionURL","open","onMessage","onDisconnect","everConnected_","device","options","headers","User-Agent","platform","env","proxy","origin","mySock","onClosed_","onopen","onclose","onmessage","m","handleIncomingFrame","onerror","start","forceDisallow","forceDisallow_","isAvailable","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","markConnectionHealthy","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","send","dataStr","sendString_","shutdown_","isClosed_","clearInterval","close","setInterval","responsesRequiredToBeHealthy","healthyTimeout","decodePath","pathString","pathStringDecoded","pieces","split","piece","decodeURIComponent","replace","validation_errorPrefix","fnName","argumentNumber","optional","argName","NAME_ONLY_COMPARATOR","left","right","__WEBPACK_IMPORTED_MODULE_0__util_util__","NAME_COMPARATOR","nodeFromJSON_nodeFromJSON","json","priority","ChildrenNode_ChildrenNode","EMPTY_NODE","nodeFromJSON__typeof","__WEBPACK_IMPORTED_MODULE_4__utils_assert__","LeafNode_LeafNode","USE_HINZE","node_1","jsonObj_1","__WEBPACK_IMPORTED_MODULE_3__utils_obj__","childData","childNode","isLeafNode","updateImmediateChild","updatePriority","children_1","childrenHavePriority_1","hinzeJsonObj_1","child","getPriority","NamedNode","childSet","childSet_buildChildSet","namedNode","sortedChildSet","PRIORITY_INDEX","getCompare","IndexMap_IndexMap",".priority","Default","__EMPTY_NODE","MAX_NODE","__childrenNodeConstructor","nodeFromJSON","PriorityIndex_MAX_NODE","_defaultIndexMap","__WEBPACK_IMPORTED_MODULE_0__util__","__WEBPACK_IMPORTED_MODULE_1__utils_utf8__","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","toUrlEncodedString","encodeURIComponent","begin","parent","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","leftKeys","rightKeys","cmp","equals","other","ValidationPath","errorPrefix_","parts_","byteLength_","max","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","__WEBPACK_IMPORTED_MODULE_2__storage_storage__","__WEBPACK_IMPORTED_MODULE_3__realtime_Constants__","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCacheableHost","isDemoHost","isCustomHost","updateHost","newHost","type","params","pairs","toURLString","__WEBPACK_IMPORTED_MODULE_2__util__","parser_parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","scheme","port","colonInd","slashInd","parts","validation__typeof","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","callback","validateContextObject","context","validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__","validation___WEBPACK_IMPORTED_MODULE_2__util__","util_validation__typeof","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validation_validateFirebaseDataArg","validation_validateFirebaseData","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validation_validateFirebaseMergePaths","mergePaths","curPath","prevPath","validation_validateFirebaseMergeDataArg","validation_validatePriority","validation_validateEventType","eventType","validation_validateKey","validation_validatePathString","validateRootPathString","validateWritablePath","validation_validateUrl","validation_validateBoolean","bool","__WEBPACK_IMPORTED_MODULE_3__utils_promise__","onDisconnect_OnDisconnect","OnDisconnect","repo_","cancel","onComplete","deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult_TransactionResult","TransactionResult","committed","snapshot","toJSON","NextPushId___WEBPACK_IMPORTED_MODULE_0__utils_assert__","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","node","Wrap","__WEBPACK_IMPORTED_MODULE_1__util_util__","Index_Index","Index","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__WEBPACK_IMPORTED_MODULE_2__util_util__","__WEBPACK_IMPORTED_MODULE_3__utils_assert__","KeyIndex_KeyIndex","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","snap___WEBPACK_IMPORTED_MODULE_0__utils_assert__","snap___WEBPACK_IMPORTED_MODULE_1__util_util__","__WEBPACK_IMPORTED_MODULE_2__utils_obj__","snap__typeof","priorityHashText","validatePriorityNode","priorityNode","LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__","LeafNode___WEBPACK_IMPORTED_MODULE_1__util_util__","LeafNode__typeof","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat",".value","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","PriorityIndex___WEBPACK_IMPORTED_MODULE_1__util_util__","PriorityIndex___extends","PriorityIndex_PriorityIndex","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","childList","keyFn","mapSortFn","buildBalancedTree","low","middle","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","IndexMap___WEBPACK_IMPORTED_MODULE_0__utils_assert__","IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__","ChildrenNode___WEBPACK_IMPORTED_MODULE_1__util_util__","ChildrenNode___extends","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","ChildrenNode_MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","ChildrenNode_MaxNode","MaxNode","defineProperties","MAX","__referenceConstructor","OperationType","ValueIndex___WEBPACK_IMPORTED_MODULE_2__util_util__","ValueIndex___extends","ValueIndex_ValueIndex","ValueIndex","valueNode","VALUE_INDEX","PathIndex___WEBPACK_IMPORTED_MODULE_0__utils_assert__","PathIndex___WEBPACK_IMPORTED_MODULE_1__util_util__","PathIndex___extends","PathIndex_PathIndex","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot_DataSnapshot","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__","EventRegistration___WEBPACK_IMPORTED_MODULE_3__utils_assert__","EventRegistration_ValueEventRegistration","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","EventRegistration_ChildEventRegistration","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","cb","Query___WEBPACK_IMPORTED_MODULE_0__utils_assert__","__WEBPACK_IMPORTED_MODULE_5__core_util_util__","__WEBPACK_IMPORTED_MODULE_10__utils_promise__","Query__typeof","Query_Query","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","removeEventCallbackForQuery","once","userCallback","cancelOrContext","firstCall","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","item","clear","SparseSnapshotTree_SparseSnapshotTree","SparseSnapshotTree","find","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","ServerValues___WEBPACK_IMPORTED_MODULE_0__utils_assert__","ServerValues__typeof","generateWithValues","values","Date","getTime","resolveDeferredValue","serverValues","ServerValues_resolveDeferredValueTree","resolvedTree","ServerValues_resolveDeferredValueSnapshot","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Operation___WEBPACK_IMPORTED_MODULE_0__utils_assert__","emptyChildrenSingleton","SyncPoint___referenceConstructor","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite___WEBPACK_IMPORTED_MODULE_0__utils_assert__","AckUserWrite_AckUserWrite","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","children","subtree","Empty","ImmutableTree___WEBPACK_IMPORTED_MODULE_2__util__","ImmutableTree___WEBPACK_IMPORTED_MODULE_3__utils_obj__","ImmutableTree_EmptyChildren","ImmutableTree_ImmutableTree","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete_ListenComplete","ListenComplete","LISTEN_COMPLETE","Overwrite_Overwrite","Overwrite","OVERWRITE","Merge___WEBPACK_IMPORTED_MODULE_3__utils_assert__","Merge_Merge","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache_ViewCache","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter___WEBPACK_IMPORTED_MODULE_0__utils_assert__","IndexedFilter_IndexedFilter","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator___WEBPACK_IMPORTED_MODULE_0__utils_obj__","__WEBPACK_IMPORTED_MODULE_2__utils_assert__","ChildChangeAccumulator_ChildChangeAccumulator","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","NO_COMPLETE_CHILD_SOURCE","CompleteChildSource_WriteTreeCompleteChildSource","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor_ViewProcessor","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator___WEBPACK_IMPORTED_MODULE_2__utils_assert__","EventGenerator_EventGenerator","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","__WEBPACK_IMPORTED_MODULE_6__utils_assert__","View_View","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint___WEBPACK_IMPORTED_MODULE_2__utils_assert__","SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__","SyncPoint_SyncPoint","SyncPoint","views_","optCompleteServerCache","view","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite___WEBPACK_IMPORTED_MODULE_2__utils_obj__","__WEBPACK_IMPORTED_MODULE_5__utils_assert__","CompoundWrite_CompoundWrite","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree___WEBPACK_IMPORTED_MODULE_0__utils_obj__","WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__","WriteTree_WriteTree","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","write","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__","SyncTree___WEBPACK_IMPORTED_MODULE_1__util_util__","__WEBPACK_IMPORTED_MODULE_4__utils_obj__","SyncTree_SyncTree","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder_SnapshotHolder","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider___WEBPACK_IMPORTED_MODULE_0__util_util__","AuthTokenProvider","app_","getToken","forceRefresh","then","Promise","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsListener___WEBPACK_IMPORTED_MODULE_0__utils_obj__","StatsListener","collection_","last_","newStats","delta","stat","StatsReporter___WEBPACK_IMPORTED_MODULE_0__utils_obj__","StatsReporter___WEBPACK_IMPORTED_MODULE_1__util_util__","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter_StatsReporter","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue___WEBPACK_IMPORTED_MODULE_0__util_util__","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter___WEBPACK_IMPORTED_MODULE_0__utils_assert__","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor___WEBPACK_IMPORTED_MODULE_1__utils_assert__","VisibilityMonitor___extends","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor___WEBPACK_IMPORTED_MODULE_0__utils_assert__","__WEBPACK_IMPORTED_MODULE_2__utils_environment__","OnlineMonitor___extends","OnlineMonitor","online_","currentlyOnline","__WEBPACK_IMPORTED_MODULE_0__database_core_util_util__","__WEBPACK_IMPORTED_MODULE_1__json__","jwt__typeof","decode","token","header","claims","signature","isValidFormat","decoded","isAdmin","__WEBPACK_IMPORTED_MODULE_0__core_util_util__","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","this_1","toProcess","BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__","__WEBPACK_IMPORTED_MODULE_2__core_stats_StatsManager__","__WEBPACK_IMPORTED_MODULE_6__utils_environment__","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection_BrowserPollConnection","BrowserPollConnection","urlFn","curSegmentNum","onDisconnect_","myPacketOrderer","connectTimeoutTimer_","scriptTagHolder","BrowserPollConnection_FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","uniqueCallbackIdentifier","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","createElement","myDisconnFrame","removeChild","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","FirebaseIFrameScriptHolder","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","__WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__","TransportManager___WEBPACK_IMPORTED_MODULE_2__core_util_util__","TransportManager_TransportManager","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__","__WEBPACK_IMPORTED_MODULE_1__core_storage_storage__","__WEBPACK_IMPORTED_MODULE_2__Constants__","Connection_Connection","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","PersistentConnection___WEBPACK_IMPORTED_MODULE_0__app__","PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__","__WEBPACK_IMPORTED_MODULE_2__utils_json__","PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__","__WEBPACK_IMPORTED_MODULE_4__util_util__","__WEBPACK_IMPORTED_MODULE_10__utils_constants__","__WEBPACK_IMPORTED_MODULE_11__utils_environment__","PersistentConnection__typeof","PersistentConnection___extends","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection_PersistentConnection","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","clientName","__WEBPACK_IMPORTED_MODULE_0__obj__","querystring","querystringParams","arrayVal","ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_0__utils_assert__","ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_1__util_util__","ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_2__utils_json__","ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_3__utils_obj__","ReadonlyRestClient___extends","ReadonlyRestClient_ReadonlyRestClient","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParamaters","toRestQueryStringParameters","restRequest_","status_1","queryStringParameters","authTokenData","authToken","xhr","XMLHttpRequest","responseText","__WEBPACK_IMPORTED_MODULE_6__utils_json__","__WEBPACK_IMPORTED_MODULE_7__util_util__","__WEBPACK_IMPORTED_MODULE_8__utils_obj__","__WEBPACK_IMPORTED_MODULE_10__stats_StatsManager__","Repo__typeof","Repo_Repo","Repo","forceRestClient","app","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offsetNode","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database_Database","RangedFilter_RangedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","LimitedFilter___WEBPACK_IMPORTED_MODULE_3__utils_assert__","LimitedFilter_LimitedFilter","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","oldChildSnap","compareNext","QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__","QueryParams___WEBPACK_IMPORTED_MODULE_1__util_util__","__WEBPACK_IMPORTED_MODULE_9__utils_json__","QueryParams_QueryParams","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference___WEBPACK_IMPORTED_MODULE_2__core_util_util__","Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__","Reference___extends","Reference_Reference","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","startTransaction","setPriority","thennablePushRef","pushRef","catch","TransactionStatus","Tree___WEBPACK_IMPORTED_MODULE_0__utils_assert__","Tree___WEBPACK_IMPORTED_MODULE_2__utils_obj__","TreeNode","childCount","Tree_Tree","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__","__WEBPACK_IMPORTED_MODULE_6__util_util__","__WEBPACK_IMPORTED_MODULE_9__utils_obj__","Repo_transaction__typeof","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","unwatcher","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","currentNode","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager___WEBPACK_IMPORTED_MODULE_0__utils_obj__","RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__","RepoManager_RepoManager","RepoManager","repos_","useRestClient_","databaseFromApp","dbUrl","createRepo","deleteRepo","Database___WEBPACK_IMPORTED_MODULE_0__core_util_util__","Database___WEBPACK_IMPORTED_MODULE_3__utils_promise__","Database","INTERNAL","Database_DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","DatabaseInternals","delete","internal_namespaceObject","internal_forceLongPolling","internal_forceWebSockets","setSecurityDebugCallback","internal_stats","interceptServerData","__WEBPACK_IMPORTED_MODULE_0__realtime_WebSocketConnection__","test_access_namespaceObject","DataConnection","RealTimeConnection","test_access_hijackHash","ConnectionTarget","listens","test_access_forceRestClient","simpleListen","echo","onEcho","newHash","oldPut","opt_onComplete","opt_hash","firebaseRef","_forceRestClient","registerDatabase","instance","registerService","__WEBPACK_IMPORTED_MODULE_4__database_core_util_util__","TEST_ACCESS","exports","originalModule","webpackPolyfill","l"],"mappings":"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","file":"firebase-database.js","sourcesContent":["try {\n          webpackJsonpFirebase([0],[\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return assert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return assertionError; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(7);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\nvar assert = function assert(assertion, message) {\n    if (!assertion) {\n        throw assertionError(message);\n    }\n};\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\nvar assertionError = function assertionError(message) {\n    return new Error('Firebase Database (' + __WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* CONSTANTS */].SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/utils/crypt.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globalScope__ = __webpack_require__(14);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar stringToByteArray = function stringToByteArray(str) {\n    var output = [],\n        p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        while (c > 255) {\n            output[p++] = c & 255;\n            c >>= 8;\n        }\n        output[p++] = c;\n    }\n    return output;\n};\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\nvar byteArrayToString = function byteArrayToString(bytes) {\n    var CHUNK_SIZE = 8192;\n    // Special-case the simple case for speed's sake.\n    if (bytes.length < CHUNK_SIZE) {\n        return String.fromCharCode.apply(null, bytes);\n    }\n    // The remaining logic splits conversion by chunks since\n    // Function#apply() has a maximum parameter count.\n    // See discussion: http://goo.gl/LrWmZ9\n    var str = '';\n    for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n        var chunk = bytes.slice(i, i + CHUNK_SIZE);\n        str += String.fromCharCode.apply(null, chunk);\n    }\n    return str;\n};\n// Static lookup maps, lazily populated by init_()\nvar base64 = {\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\n    byteToCharMap_: null,\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\n    charToByteMap_: null,\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\n    byteToCharMapWebSafe_: null,\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\n    charToByteMapWebSafe_: null,\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\n    get ENCODED_VALS() {\n        return this.ENCODED_VALS_BASE + '+/=';\n    },\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\n    get ENCODED_VALS_WEBSAFE() {\n        return this.ENCODED_VALS_BASE + '-_.';\n    },\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\n    HAS_NATIVE_SUPPORT: typeof __WEBPACK_IMPORTED_MODULE_0__globalScope__[\"a\" /* globalScope */].atob === 'function',\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\n    encodeByteArray: function encodeByteArray(input, opt_webSafe) {\n        if (!Array.isArray(input)) {\n            throw Error('encodeByteArray takes an array as a parameter');\n        }\n        this.init_();\n        var byteToCharMap = opt_webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n        var output = [];\n        for (var i = 0; i < input.length; i += 3) {\n            var byte1 = input[i];\n            var haveByte2 = i + 1 < input.length;\n            var byte2 = haveByte2 ? input[i + 1] : 0;\n            var haveByte3 = i + 2 < input.length;\n            var byte3 = haveByte3 ? input[i + 2] : 0;\n            var outByte1 = byte1 >> 2;\n            var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;\n            var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;\n            var outByte4 = byte3 & 0x3f;\n            if (!haveByte3) {\n                outByte4 = 64;\n                if (!haveByte2) {\n                    outByte3 = 64;\n                }\n            }\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n        }\n        return output.join('');\n    },\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\n    encodeString: function encodeString(input, opt_webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n            return btoa(input);\n        }\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\n    },\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\n    decodeString: function decodeString(input, opt_webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n            return atob(input);\n        }\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\n    },\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\n    decodeStringToByteArray: function decodeStringToByteArray(input, opt_webSafe) {\n        this.init_();\n        var charToByteMap = opt_webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n        var output = [];\n        for (var i = 0; i < input.length;) {\n            var byte1 = charToByteMap[input.charAt(i++)];\n            var haveByte2 = i < input.length;\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n            ++i;\n            var haveByte3 = i < input.length;\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            var haveByte4 = i < input.length;\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n                throw Error();\n            }\n            var outByte1 = byte1 << 2 | byte2 >> 4;\n            output.push(outByte1);\n            if (byte3 != 64) {\n                var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;\n                output.push(outByte2);\n                if (byte4 != 64) {\n                    var outByte3 = byte3 << 6 & 0xc0 | byte4;\n                    output.push(outByte3);\n                }\n            }\n        }\n        return output;\n    },\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\n    init_: function init_() {\n        if (!this.byteToCharMap_) {\n            this.byteToCharMap_ = {};\n            this.charToByteMap_ = {};\n            this.byteToCharMapWebSafe_ = {};\n            this.charToByteMapWebSafe_ = {};\n            // We want quick mappings back and forth, so we precompute two maps.\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n                // Be forgiving when decoding and correctly decode both encodings.\n                if (i >= this.ENCODED_VALS_BASE.length) {\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n                }\n            }\n        }\n    }\n};\n// CONCATENATED MODULE: ./src/utils/hash.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\nvar Hash = function () {\n  function Hash() {\n    /**\r\n     * The block size for the hasher.\r\n     * @type {number}\r\n     */\n    this.blockSize = -1;\n  }\n  return Hash;\n}();\n\n// CONCATENATED MODULE: ./src/utils/Sha1.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\nvar Sha1 = function (_super) {\n    __extends(Sha1, _super);\n    function Sha1() {\n        var _this = _super.call(this) || this;\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\n        _this.chain_ = [];\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\n        _this.buf_ = [];\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\n        _this.W_ = [];\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\n        _this.pad_ = [];\n        /**\r\n         * @private {number}\r\n         */\n        _this.inbuf_ = 0;\n        /**\r\n         * @private {number}\r\n         */\n        _this.total_ = 0;\n        _this.blockSize = 512 / 8;\n        _this.pad_[0] = 128;\n        for (var i = 1; i < _this.blockSize; ++i) {\n            _this.pad_[i] = 0;\n        }\n        _this.reset();\n        return _this;\n    }\n    Sha1.prototype.reset = function () {\n        this.chain_[0] = 0x67452301;\n        this.chain_[1] = 0xefcdab89;\n        this.chain_[2] = 0x98badcfe;\n        this.chain_[3] = 0x10325476;\n        this.chain_[4] = 0xc3d2e1f0;\n        this.inbuf_ = 0;\n        this.total_ = 0;\n    };\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\n        if (!opt_offset) {\n            opt_offset = 0;\n        }\n        var W = this.W_;\n        // get 16 big endian words\n        if (typeof buf === 'string') {\n            for (var i = 0; i < 16; i++) {\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n                // have a bug that turns the post-increment ++ operator into pre-increment\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\n                // correctness and which is affected by this bug, so I've removed all uses\n                // of post-increment ++ in which the result value is used.  We can revert\n                // this change once the Safari bug\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n                // most clients have been updated.\n                W[i] = buf.charCodeAt(opt_offset) << 24 | buf.charCodeAt(opt_offset + 1) << 16 | buf.charCodeAt(opt_offset + 2) << 8 | buf.charCodeAt(opt_offset + 3);\n                opt_offset += 4;\n            }\n        } else {\n            for (var i = 0; i < 16; i++) {\n                W[i] = buf[opt_offset] << 24 | buf[opt_offset + 1] << 16 | buf[opt_offset + 2] << 8 | buf[opt_offset + 3];\n                opt_offset += 4;\n            }\n        }\n        // expand to 80 words\n        for (var i = 16; i < 80; i++) {\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = (t << 1 | t >>> 31) & 0xffffffff;\n        }\n        var a = this.chain_[0];\n        var b = this.chain_[1];\n        var c = this.chain_[2];\n        var d = this.chain_[3];\n        var e = this.chain_[4];\n        var f, k;\n        // TODO(user): Try to unroll this loop to speed up the computation.\n        for (var i = 0; i < 80; i++) {\n            if (i < 40) {\n                if (i < 20) {\n                    f = d ^ b & (c ^ d);\n                    k = 0x5a827999;\n                } else {\n                    f = b ^ c ^ d;\n                    k = 0x6ed9eba1;\n                }\n            } else {\n                if (i < 60) {\n                    f = b & c | d & (b | c);\n                    k = 0x8f1bbcdc;\n                } else {\n                    f = b ^ c ^ d;\n                    k = 0xca62c1d6;\n                }\n            }\n            var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;\n            e = d;\n            d = c;\n            c = (b << 30 | b >>> 2) & 0xffffffff;\n            b = a;\n            a = t;\n        }\n        this.chain_[0] = this.chain_[0] + a & 0xffffffff;\n        this.chain_[1] = this.chain_[1] + b & 0xffffffff;\n        this.chain_[2] = this.chain_[2] + c & 0xffffffff;\n        this.chain_[3] = this.chain_[3] + d & 0xffffffff;\n        this.chain_[4] = this.chain_[4] + e & 0xffffffff;\n    };\n    Sha1.prototype.update = function (bytes, opt_length) {\n        // TODO(johnlenz): tighten the function signature and remove this check\n        if (bytes == null) {\n            return;\n        }\n        if (opt_length === undefined) {\n            opt_length = bytes.length;\n        }\n        var lengthMinusBlock = opt_length - this.blockSize;\n        var n = 0;\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\n        var buf = this.buf_;\n        var inbuf = this.inbuf_;\n        // The outer while loop should execute at most twice.\n        while (n < opt_length) {\n            // When we have no data in the block to top up, we can directly process the\n            // input buffer (assuming it contains sufficient data). This gives ~25%\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n            // the data is provided in large chunks (or in multiples of 64 bytes).\n            if (inbuf == 0) {\n                while (n <= lengthMinusBlock) {\n                    this.compress_(bytes, n);\n                    n += this.blockSize;\n                }\n            }\n            if (typeof bytes === 'string') {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes.charCodeAt(n);\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            } else {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes[n];\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n        }\n        this.inbuf_ = inbuf;\n        this.total_ += opt_length;\n    };\n    /** @override */\n    Sha1.prototype.digest = function () {\n        var digest = [];\n        var totalBits = this.total_ * 8;\n        // Add pad 0x80 0x00*.\n        if (this.inbuf_ < 56) {\n            this.update(this.pad_, 56 - this.inbuf_);\n        } else {\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n        }\n        // Add # bits.\n        for (var i = this.blockSize - 1; i >= 56; i--) {\n            this.buf_[i] = totalBits & 255;\n            totalBits /= 256; // Don't use bit-shifting here!\n        }\n        this.compress_(this.buf_);\n        var n = 0;\n        for (var i = 0; i < 5; i++) {\n            for (var j = 24; j >= 0; j -= 8) {\n                digest[n] = this.chain_[i] >> j & 255;\n                ++n;\n            }\n        }\n        return digest;\n    };\n    return Sha1;\n}(Hash);\n\n// CONCATENATED MODULE: ./src/database/core/util/util.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LUIDGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return util_base64Encode; });\n/* unused harmony export setBufferImpl */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return util_base64Decode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return util_sha1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return logger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return enableLogging; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return log; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return logWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return error; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return fatal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return warn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return warnIfPageIsSecure; });\n/* unused harmony export warnAboutUnsupportedMethod */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return isInvalidJSONNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return executeWhenDOMReady; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return MIN_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MAX_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return nameCompare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return stringCompare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return requireKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return ObjectToUniqueKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return splitStringBySize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return each; });\n/* unused harmony export bindCallback */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return doubleToIEEE754String; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return isChromeExtensionContentScript; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return isWindowsStoreApp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return errorForServerCode; });\n/* unused harmony export INTEGER_REGEXP_ */\n/* unused harmony export tryParseInt */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return exceptionGuard; });\n/* unused harmony export callUserCallback */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return beingCrawled; });\n/* unused harmony export exportPropGetter */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return setTimeoutNonBlocking; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utf8__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_json__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__storage_storage__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_environment__ = __webpack_require__(6);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\nvar LUIDGenerator = function () {\n    var id = 1;\n    return function () {\n        return id++;\n    };\n}();\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\nvar util_base64Encode = function base64Encode(str) {\n    var utf8Bytes = Object(__WEBPACK_IMPORTED_MODULE_4__utils_utf8__[\"b\" /* stringToByteArray */])(str);\n    return base64.encodeByteArray(utf8Bytes, /*useWebSafe=*/true);\n};\nvar BufferImpl;\nfunction setBufferImpl(impl) {\n    BufferImpl = impl;\n}\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\nvar util_base64Decode = function base64Decode(str) {\n    try {\n        if (BufferImpl) {\n            return new BufferImpl(str, 'base64').toString('utf8');\n        } else {\n            return base64.decodeString(str, /*useWebSafe=*/true);\n        }\n    } catch (e) {\n        log('base64Decode failed: ', e);\n    }\n    return null;\n};\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\nvar util_sha1 = function sha1(str) {\n    var utf8Bytes = Object(__WEBPACK_IMPORTED_MODULE_4__utils_utf8__[\"b\" /* stringToByteArray */])(str);\n    var sha1 = new Sha1();\n    sha1.update(utf8Bytes);\n    var sha1Bytes = sha1.digest();\n    return base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\nvar buildLogMessage_ = function buildLogMessage_() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var message = '';\n    for (var i = 0; i < var_args.length; i++) {\n        if (Array.isArray(var_args[i]) || var_args[i] && _typeof(var_args[i]) === 'object' && typeof var_args[i].length === 'number') {\n            message += buildLogMessage_.apply(null, var_args[i]);\n        } else if (_typeof(var_args[i]) === 'object') {\n            message += Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(var_args[i]);\n        } else {\n            message += var_args[i];\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\nvar enableLogging = function enableLogging(logger_, persistent) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        if (typeof console !== 'undefined') {\n            if (typeof console.log === 'function') {\n                logger = console.log.bind(console);\n            } else if (_typeof(console.log) === 'object') {\n                // IE does this.\n                logger = function logger(message) {\n                    console.log(message);\n                };\n            }\n        }\n        if (persistent) __WEBPACK_IMPORTED_MODULE_6__storage_storage__[\"b\" /* SessionStorage */].set('logging_enabled', true);\n    } else if (typeof logger_ === 'function') {\n        logger = logger_;\n    } else {\n        logger = null;\n        __WEBPACK_IMPORTED_MODULE_6__storage_storage__[\"b\" /* SessionStorage */].remove('logging_enabled');\n    }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\nvar log = function log() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && __WEBPACK_IMPORTED_MODULE_6__storage_storage__[\"b\" /* SessionStorage */].get('logging_enabled') === true) enableLogging(true);\n    }\n    if (logger) {\n        var message = buildLogMessage_.apply(null, var_args);\n        logger(message);\n    }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\nvar logWrapper = function logWrapper(prefix) {\n    return function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        log.apply(void 0, [prefix].concat(var_args));\n    };\n};\n/**\r\n * @param {...string} var_args\r\n */\nvar error = function error() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (typeof console !== 'undefined') {\n        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\n        if (typeof console.error !== 'undefined') {\n            console.error(message);\n        } else {\n            console.log(message);\n        }\n    }\n};\n/**\r\n * @param {...string} var_args\r\n */\nvar fatal = function fatal() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var message = buildLogMessage_.apply(void 0, var_args);\n    throw new Error('FIREBASE FATAL ERROR: ' + message);\n};\n/**\r\n * @param {...*} var_args\r\n */\nvar warn = function warn() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (typeof console !== 'undefined') {\n        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\n        if (typeof console.warn !== 'undefined') {\n            console.warn(message);\n        } else {\n            console.log(message);\n        }\n    }\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n    }\n};\n/**\r\n * @param {!String} methodName\r\n */\nvar warnAboutUnsupportedMethod = function warnAboutUnsupportedMethod(methodName) {\n    warn(methodName + ' is unsupported and will likely change soon.  ' + 'Please do not use.');\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n    return typeof data === 'number' && (data != data || data == Number.POSITIVE_INFINITY || data == Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n    if (Object(__WEBPACK_IMPORTED_MODULE_7__utils_environment__[\"b\" /* isNodeSdk */])() || document.readyState === 'complete') {\n        fn();\n    } else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        var called_1 = false;\n        var wrappedFn_1 = function wrappedFn_1() {\n            if (!document.body) {\n                setTimeout(wrappedFn_1, Math.floor(10));\n                return;\n            }\n            if (!called_1) {\n                called_1 = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn_1, false);\n        } else if (document.attachEvent) {\n            // IE.\n            document.attachEvent('onreadystatechange', function () {\n                if (document.readyState === 'complete') wrappedFn_1();\n            });\n            // fallback to onload.\n            window.attachEvent('onload', wrappedFn_1);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\nvar nameCompare = function nameCompare(a, b) {\n    if (a === b) {\n        return 0;\n    } else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    } else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    } else {\n        var aAsInt = tryParseInt(a),\n            bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n            } else {\n                return -1;\n            }\n        } else if (bAsInt !== null) {\n            return 1;\n        } else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\nvar stringCompare = function stringCompare(a, b) {\n    if (a === b) {\n        return 0;\n    } else if (a < b) {\n        return -1;\n    } else {\n        return 1;\n    }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\nvar requireKey = function requireKey(key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    } else {\n        throw new Error('Missing required key (' + key + ') in object: ' + Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(obj));\n    }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) return Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(obj);\n    var keys = [];\n    for (var k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    var key = '{';\n    for (var i = 0; i < keys.length; i++) {\n        if (i !== 0) key += ',';\n        key += Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n    var len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    var dataSegs = [];\n    for (var c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        } else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\nvar each = function each(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; ++i) {\n            fn(i, obj[i]);\n        }\n    } else {\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\n        Object(__WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(obj, function (key, val) {\n            return fn(val, key);\n        });\n    }\n};\n/**\r\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\r\n * @param {function(*)} callback Callback function.\r\n * @param {?Object=} context Optional context to bind to.\r\n * @return {function(*)}\r\n */\nvar bindCallback = function bindCallback(callback, context) {\n    return context ? callback.bind(context) : callback;\n};\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n    Object(__WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    var ebits = 11,\n        fbits = 52;\n    var bias = (1 << ebits - 1) - 1,\n        s,\n        e,\n        f,\n        ln,\n        i,\n        bits,\n        str;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    } else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        } else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n    // Return the data as a hex string. --MJL\n    var hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) hexByte = '0' + hexByte;\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n    return !!((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n    // Check for the presence of a couple WinRT globals\n    return (typeof Windows === 'undefined' ? 'undefined' : _typeof(Windows)) === 'object' && _typeof(Windows.UI) === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\nvar errorForServerCode = function errorForServerCode(code, query) {\n    var reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n    } else if (code == 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    } else if (code == 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n    error.code = code.toUpperCase();\n    return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\nvar tryParseInt = function tryParseInt(str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        var intVal = Number(str);\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\nvar exceptionGuard = function exceptionGuard(fn) {\n    try {\n        fn();\n    } catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(function () {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            var stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\r\n * Helper function to safely call opt_callback with the specified arguments.  It:\r\n * 1. Turns into a no-op if opt_callback is null or undefined.\r\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\r\n *\r\n * @param {?Function=} callback Optional onComplete callback.\r\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\r\n */\nvar callUserCallback = function callUserCallback(callback) {\n    var var_args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        var_args[_i - 1] = arguments[_i];\n    }\n    if (typeof callback === 'function') {\n        exceptionGuard(function () {\n            callback.apply(void 0, var_args);\n        });\n    }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\nvar beingCrawled = function beingCrawled() {\n    var userAgent = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Export a property of an object using a getter function.\r\n *\r\n * @param {!Object} object\r\n * @param {string} name\r\n * @param {!function(): *} fnGet\r\n */\nvar exportPropGetter = function exportPropGetter(object, name, fnGet) {\n    Object.defineProperty(object, name, { get: fnGet });\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n    var timeout = setTimeout(fn, time);\n    if ((typeof timeout === 'undefined' ? 'undefined' : _typeof(timeout)) === 'object' && timeout['unref']) {\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return contains; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return safeGet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return forEach; });\n/* unused harmony export extend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return clone; });\n/* unused harmony export isNonNullObject */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return isEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return getCount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return map; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return findKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return findValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return getAnyKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return getValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return every; });\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\nvar contains = function contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar safeGet = function safeGet(obj, key) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];\n    // else return undefined.\n};\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\nvar forEach = function forEach(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n};\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\nvar extend = function extend(objTo, objFrom) {\n    forEach(objFrom, function (key, value) {\n        objTo[key] = value;\n    });\n    return objTo;\n};\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\nvar clone = function clone(obj) {\n    return extend({}, obj);\n};\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\nvar isNonNullObject = function isNonNullObject(obj) {\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;\n};\nvar isEmpty = function isEmpty(obj) {\n    for (var key in obj) {\n        return false;\n    }\n    return true;\n};\nvar getCount = function getCount(obj) {\n    var rv = 0;\n    for (var key in obj) {\n        rv++;\n    }\n    return rv;\n};\nvar map = function map(obj, f, opt_obj) {\n    var res = {};\n    for (var key in obj) {\n        res[key] = f.call(opt_obj, obj[key], key, obj);\n    }\n    return res;\n};\nvar findKey = function findKey(obj, fn, opt_this) {\n    for (var key in obj) {\n        if (fn.call(opt_this, obj[key], key, obj)) {\n            return key;\n        }\n    }\n    return undefined;\n};\nvar findValue = function findValue(obj, fn, opt_this) {\n    var key = findKey(obj, fn, opt_this);\n    return key && obj[key];\n};\nvar getAnyKey = function getAnyKey(obj) {\n    for (var key in obj) {\n        return key;\n    }\n};\nvar getValues = function getValues(obj) {\n    var res = [];\n    var i = 0;\n    for (var key in obj) {\n        res[i++] = obj[key];\n    }\n    return res;\n};\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\nvar every = function every(obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (!fn(key, obj[key])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return jsonEval; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return stringify; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\nvar jsonEval = function jsonEval(str) {\n  return JSON.parse(str);\n};\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\nvar stringify = function stringify(data) {\n  return JSON.stringify(data);\n};\n\n/***/ }),\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export getUA */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isMobileCordova; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return isReactNative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isNodeSdk; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(7);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\nvar getUA = function getUA() {\n    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {\n        return navigator['userAgent'];\n    } else {\n        return '';\n    }\n};\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\nvar isMobileCordova = function isMobileCordova() {\n    return typeof window !== 'undefined' && !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());\n};\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\nvar isReactNative = function isReactNative() {\n    return (typeof navigator === 'undefined' ? 'undefined' : _typeof(navigator)) === 'object' && navigator['product'] === 'ReactNative';\n};\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\nvar isNodeSdk = function isNodeSdk() {\n    return __WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* CONSTANTS */].NODE_CLIENT === true || __WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* CONSTANTS */].NODE_ADMIN === true;\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CONSTANTS; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\nvar CONSTANTS = {\n  /**\r\n   * @define {boolean} Whether this is the client Node.js SDK.\r\n   */\n  NODE_CLIENT: false,\n  /**\r\n   * @define {boolean} Whether this is the Admin Node.js SDK.\r\n   */\n  NODE_ADMIN: false,\n  /**\r\n   * Firebase SDK Version\r\n   */\n  SDK_VERSION: '4.3.0'\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/database/core/storage/DOMStorageWrapper.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_json__ = __webpack_require__(3);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\nvar DOMStorageWrapper = function () {\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\n    function DOMStorageWrapper(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\n    DOMStorageWrapper.prototype.set = function (key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        } else {\n            this.domStorage_.setItem(this.prefixedName_(key), Object(__WEBPACK_IMPORTED_MODULE_0__utils_json__[\"b\" /* stringify */])(value));\n        }\n    };\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\n    DOMStorageWrapper.prototype.get = function (key) {\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        } else {\n            return Object(__WEBPACK_IMPORTED_MODULE_0__utils_json__[\"a\" /* jsonEval */])(storedVal);\n        }\n    };\n    /**\r\n     * @param {string} key\r\n     */\n    DOMStorageWrapper.prototype.remove = function (key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    };\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n        return this.prefix_ + name;\n    };\n    DOMStorageWrapper.prototype.toString = function () {\n        return this.domStorage_.toString();\n    };\n    return DOMStorageWrapper;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/storage/MemoryStorage.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\nvar MemoryStorage = function () {\n    function MemoryStorage() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    MemoryStorage.prototype.set = function (key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        } else {\n            this.cache_[key] = value;\n        }\n    };\n    MemoryStorage.prototype.get = function (key) {\n        if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"b\" /* contains */])(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    };\n    MemoryStorage.prototype.remove = function (key) {\n        delete this.cache_[key];\n    };\n    return MemoryStorage;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/storage/storage.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PersistentStorage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return SessionStorage; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n* Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n* TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n* to reflect this type\r\n*\r\n* @param {string} domStorageName Name of the underlying storage object\r\n*   (e.g. 'localStorage' or 'sessionStorage').\r\n* @return {?} Turning off type information until a common interface is defined.\r\n*/\nvar storage_createStoragefor = function createStoragefor(domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            var domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    } catch (e) {}\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nvar PersistentStorage = storage_createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nvar SessionStorage = storage_createStoragefor('sessionStorage');\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return PROTOCOL_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return VERSION_PARAM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return TRANSPORT_SESSION_PARAM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return REFERER_PARAM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FORGE_REF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FORGE_DOMAIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return LAST_SESSION_PARAM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return WEBSOCKET; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return LONG_POLLING; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n\n/***/ }),\n/* 10 */,\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return stringToByteArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return stringLength; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\nvar stringToByteArray = function stringToByteArray(str) {\n    var out = [],\n        p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        // Is this the lead surrogate in a surrogate pair?\n        if (c >= 0xd800 && c <= 0xdbff) {\n            var high = c - 0xd800; // the high 10 bits.\n            i++;\n            Object(__WEBPACK_IMPORTED_MODULE_0__assert__[\"a\" /* assert */])(i < str.length, 'Surrogate pair missing trail surrogate.');\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n            c = 0x10000 + (high << 10) + low;\n        }\n        if (c < 128) {\n            out[p++] = c;\n        } else if (c < 2048) {\n            out[p++] = c >> 6 | 192;\n            out[p++] = c & 63 | 128;\n        } else if (c < 65536) {\n            out[p++] = c >> 12 | 224;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        } else {\n            out[p++] = c >> 18 | 240;\n            out[p++] = c >> 12 & 63 | 128;\n            out[p++] = c >> 6 & 63 | 128;\n            out[p++] = c & 63 | 128;\n        }\n    }\n    return out;\n};\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\nvar stringLength = function stringLength(str) {\n    var p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            p++;\n        } else if (c < 2048) {\n            p += 2;\n        } else if (c >= 0xd800 && c <= 0xdbff) {\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n            p += 4;\n            i++; // skip trail surrogate.\n        } else {\n            p += 3;\n        }\n    }\n    return p;\n};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/database/core/stats/StatsCollection.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_deep_copy__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\nvar StatsCollection = function () {\n    function StatsCollection() {\n        this.counters_ = {};\n    }\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\n        if (amount === void 0) {\n            amount = 1;\n        }\n        if (!Object(__WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"b\" /* contains */])(this.counters_, name)) this.counters_[name] = 0;\n        this.counters_[name] += amount;\n    };\n    StatsCollection.prototype.get = function () {\n        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_deep_copy__[\"a\" /* deepCopy */])(this.counters_);\n    };\n    return StatsCollection;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/stats/StatsManager.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return StatsManager_StatsManager; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar StatsManager_StatsManager = function () {\n    function StatsManager() {}\n    StatsManager.getCollection = function (repoInfo) {\n        var hashString = repoInfo.toString();\n        if (!this.collections_[hashString]) {\n            this.collections_[hashString] = new StatsCollection();\n        }\n        return this.collections_[hashString];\n    };\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n        var hashString = repoInfo.toString();\n        if (!this.reporters_[hashString]) {\n            this.reporters_[hashString] = creatorFunction();\n        }\n        return this.reporters_[hashString];\n    };\n    StatsManager.collections_ = {};\n    StatsManager.reporters_ = {};\n    return StatsManager;\n}();\n\n\n/***/ }),\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export setWebSocketImpl */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return WebSocketConnection; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__app__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_stats_StatsManager__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Constants__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_constants__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_storage_storage__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_json__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_environment__ = __webpack_require__(6);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\nfunction setWebSocketImpl(impl) {\n    WebSocketImpl = impl;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\nvar WebSocketConnection = function () {\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = Object(__WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"t\" /* logWrapper */])(this.connId);\n        this.stats_ = __WEBPACK_IMPORTED_MODULE_3__core_stats_StatsManager__[\"a\" /* StatsManager */].getCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n    }\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n        var urlParams = {};\n        urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"h\" /* VERSION_PARAM */]] = __WEBPACK_IMPORTED_MODULE_4__Constants__[\"e\" /* PROTOCOL_VERSION */];\n        if (!Object(__WEBPACK_IMPORTED_MODULE_8__utils_environment__[\"b\" /* isNodeSdk */])() && typeof location !== 'undefined' && location.href && location.href.indexOf(__WEBPACK_IMPORTED_MODULE_4__Constants__[\"a\" /* FORGE_DOMAIN */]) !== -1) {\n            urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"f\" /* REFERER_PARAM */]] = __WEBPACK_IMPORTED_MODULE_4__Constants__[\"b\" /* FORGE_REF */];\n        }\n        if (transportSessionId) {\n            urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"g\" /* TRANSPORT_SESSION_PARAM */]] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"c\" /* LAST_SESSION_PARAM */]] = lastSessionId;\n        }\n        return repoInfo.connectionURL(__WEBPACK_IMPORTED_MODULE_4__Constants__[\"i\" /* WEBSOCKET */], urlParams);\n    };\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n        var _this = this;\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        __WEBPACK_IMPORTED_MODULE_6__core_storage_storage__[\"a\" /* PersistentStorage */].set('previous_websocket_failure', true);\n        try {\n            if (Object(__WEBPACK_IMPORTED_MODULE_8__utils_environment__[\"b\" /* isNodeSdk */])()) {\n                var device = __WEBPACK_IMPORTED_MODULE_5__utils_constants__[\"a\" /* CONSTANTS */].NODE_ADMIN ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                var options = {\n                    headers: {\n                        'User-Agent': \"Firebase/\" + __WEBPACK_IMPORTED_MODULE_4__Constants__[\"e\" /* PROTOCOL_VERSION */] + \"/\" + __WEBPACK_IMPORTED_MODULE_0__app__[\"default\"].SDK_VERSION + \"/\" + process.platform + \"/\" + device\n                    }\n                };\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                var env = process['env'];\n                var proxy = this.connURL.indexOf('wss://') == 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\n            } else {\n                this.mySock = new WebSocketImpl(this.connURL);\n            }\n        } catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            var error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = function () {\n            _this.log_('Websocket connected.');\n            _this.everConnected_ = true;\n        };\n        this.mySock.onclose = function () {\n            _this.log_('Websocket connection was disconnected.');\n            _this.mySock = null;\n            _this.onClosed_();\n        };\n        this.mySock.onmessage = function (m) {\n            _this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = function (e) {\n            _this.log_('WebSocket error.  Closing connection.');\n            var error = e.message || e.data;\n            if (error) {\n                _this.log_(error);\n            }\n            _this.onClosed_();\n        };\n    };\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\n    WebSocketConnection.prototype.start = function () {};\n    WebSocketConnection.forceDisallow = function () {\n        WebSocketConnection.forceDisallow_ = true;\n    };\n    WebSocketConnection.isAvailable = function () {\n        var isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n    };\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\n    WebSocketConnection.previouslyFailed = function () {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return __WEBPACK_IMPORTED_MODULE_6__core_storage_storage__[\"a\" /* PersistentStorage */].isInMemoryStorage || __WEBPACK_IMPORTED_MODULE_6__core_storage_storage__[\"a\" /* PersistentStorage */].get('previous_websocket_failure') === true;\n    };\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\n        __WEBPACK_IMPORTED_MODULE_6__core_storage_storage__[\"a\" /* PersistentStorage */].remove('previous_websocket_failure');\n    };\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\n        this.frames.push(data);\n        if (this.frames.length == this.totalFrames) {\n            var fullMess = this.frames.join('');\n            this.frames = null;\n            var jsonMess = Object(__WEBPACK_IMPORTED_MODULE_7__utils_json__[\"a\" /* jsonEval */])(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    };\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    };\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            var frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    };\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n        if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        var data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        } else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            var remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    };\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\n    WebSocketConnection.prototype.send = function (data) {\n        this.resetKeepAlive();\n        var dataStr = Object(__WEBPACK_IMPORTED_MODULE_7__utils_json__[\"b\" /* stringify */])(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        var dataSegs = Object(__WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"z\" /* splitStringBySize */])(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (var i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    };\n    WebSocketConnection.prototype.shutdown_ = function () {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    };\n    WebSocketConnection.prototype.onClosed_ = function () {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    };\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\n    WebSocketConnection.prototype.close = function () {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    };\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\n    WebSocketConnection.prototype.resetKeepAlive = function () {\n        var _this = this;\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(function () {\n            //If there has been no websocket activity for a while, send a no-op\n            if (_this.mySock) {\n                _this.sendString_('0');\n            }\n            _this.resetKeepAlive();\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    };\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\n    WebSocketConnection.prototype.sendString_ = function (str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        } catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    };\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\n    WebSocketConnection.healthyTimeout = 30000;\n    return WebSocketConnection;\n}();\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(16)))\n\n/***/ }),\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */,\n/* 24 */,\n/* 25 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/database/core/util/Path.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_utf8__ = __webpack_require__(11);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nvar Path = function () {\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\n    function Path(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            var copyTo = 0;\n            for (var i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        } else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    Object.defineProperty(Path, \"Empty\", {\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\n        get: function get() {\n            return new Path('');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.getFront = function () {\n        if (this.pieceNum_ >= this.pieces_.length) return null;\n        return this.pieces_[this.pieceNum_];\n    };\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\n    Path.prototype.getLength = function () {\n        return this.pieces_.length - this.pieceNum_;\n    };\n    /**\r\n     * @return {!Path}\r\n     */\n    Path.prototype.popFront = function () {\n        var pieceNum = this.pieceNum_;\n        if (pieceNum < this.pieces_.length) {\n            pieceNum++;\n        }\n        return new Path(this.pieces_, pieceNum);\n    };\n    /**\r\n     * @return {?string}\r\n     */\n    Path.prototype.getBack = function () {\n        if (this.pieceNum_ < this.pieces_.length) return this.pieces_[this.pieces_.length - 1];\n        return null;\n    };\n    Path.prototype.toString = function () {\n        var pathString = '';\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n        }\n        return pathString || '/';\n    };\n    Path.prototype.toUrlEncodedString = function () {\n        var pathString = '';\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n        }\n        return pathString || '/';\n    };\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\n    Path.prototype.slice = function (begin) {\n        if (begin === void 0) {\n            begin = 0;\n        }\n        return this.pieces_.slice(this.pieceNum_ + begin);\n    };\n    /**\r\n     * @return {?Path}\r\n     */\n    Path.prototype.parent = function () {\n        if (this.pieceNum_ >= this.pieces_.length) return null;\n        var pieces = [];\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n            pieces.push(this.pieces_[i]);\n        }return new Path(pieces, 0);\n    };\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\n    Path.prototype.child = function (childPathObj) {\n        var pieces = [];\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n            pieces.push(this.pieces_[i]);\n        }if (childPathObj instanceof Path) {\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n                pieces.push(childPathObj.pieces_[i]);\n            }\n        } else {\n            var childPieces = childPathObj.split('/');\n            for (var i = 0; i < childPieces.length; i++) {\n                if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n            }\n        }\n        return new Path(pieces, 0);\n    };\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\n    Path.prototype.isEmpty = function () {\n        return this.pieceNum_ >= this.pieces_.length;\n    };\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\n    Path.relativePath = function (outerPath, innerPath) {\n        var outer = outerPath.getFront(),\n            inner = innerPath.getFront();\n        if (outer === null) {\n            return innerPath;\n        } else if (outer === inner) {\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n        } else {\n            throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n        }\n    };\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\n    Path.comparePaths = function (left, right) {\n        var leftKeys = left.slice();\n        var rightKeys = right.slice();\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n            var cmp = Object(__WEBPACK_IMPORTED_MODULE_0__util__[\"v\" /* nameCompare */])(leftKeys[i], rightKeys[i]);\n            if (cmp !== 0) return cmp;\n        }\n        if (leftKeys.length === rightKeys.length) return 0;\n        return leftKeys.length < rightKeys.length ? -1 : 1;\n    };\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\n    Path.prototype.equals = function (other) {\n        if (this.getLength() !== other.getLength()) {\n            return false;\n        }\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n            if (this.pieces_[i] !== other.pieces_[j]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\n    Path.prototype.contains = function (other) {\n        var i = this.pieceNum_;\n        var j = other.pieceNum_;\n        if (this.getLength() > other.getLength()) {\n            return false;\n        }\n        while (i < this.pieces_.length) {\n            if (this.pieces_[i] !== other.pieces_[j]) {\n                return false;\n            }\n            ++i;\n            ++j;\n        }\n        return true;\n    };\n    return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nvar ValidationPath = function () {\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\n    function ValidationPath(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        /** @type {!Array<string>} */\n        this.parts_ = path.slice();\n        /** @type {number} Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (var i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += Object(__WEBPACK_IMPORTED_MODULE_1__utils_utf8__[\"a\" /* stringLength */])(this.parts_[i]);\n        }\n        this.checkValid_();\n    }\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n        /** @const {number} Maximum key depth. */\n        get: function get() {\n            return 32;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n        get: function get() {\n            return 768;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @param {string} child */\n    ValidationPath.prototype.push = function (child) {\n        // Count the needed '/'\n        if (this.parts_.length > 0) {\n            this.byteLength_ += 1;\n        }\n        this.parts_.push(child);\n        this.byteLength_ += Object(__WEBPACK_IMPORTED_MODULE_1__utils_utf8__[\"a\" /* stringLength */])(child);\n        this.checkValid_();\n    };\n    ValidationPath.prototype.pop = function () {\n        var last = this.parts_.pop();\n        this.byteLength_ -= Object(__WEBPACK_IMPORTED_MODULE_1__utils_utf8__[\"a\" /* stringLength */])(last);\n        // Un-count the previous '/'\n        if (this.parts_.length > 0) {\n            this.byteLength_ -= 1;\n        }\n    };\n    ValidationPath.prototype.checkValid_ = function () {\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n            throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n        }\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n            throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n        }\n    };\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\n    ValidationPath.prototype.toErrorString = function () {\n        if (this.parts_.length == 0) {\n            return '';\n        }\n        return \"in property '\" + this.parts_.join('.') + \"'\";\n    };\n    return ValidationPath;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/RepoInfo.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__storage_storage__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__realtime_Constants__ = __webpack_require__(9);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\nvar RepoInfo = function () {\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n        if (persistenceKey === void 0) {\n            persistenceKey = '';\n        }\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.persistenceKey = persistenceKey;\n        this.host = host.toLowerCase();\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\n        this.internalHost = __WEBPACK_IMPORTED_MODULE_2__storage_storage__[\"a\" /* PersistentStorage */].get('host:' + host) || this.host;\n    }\n    RepoInfo.prototype.needsQueryParam = function () {\n        return this.host !== this.internalHost;\n    };\n    RepoInfo.prototype.isCacheableHost = function () {\n        return this.internalHost.substr(0, 2) === 's-';\n    };\n    RepoInfo.prototype.isDemoHost = function () {\n        return this.domain === 'firebaseio-demo.com';\n    };\n    RepoInfo.prototype.isCustomHost = function () {\n        return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n    };\n    RepoInfo.prototype.updateHost = function (newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                __WEBPACK_IMPORTED_MODULE_2__storage_storage__[\"a\" /* PersistentStorage */].set('host:' + this.host, this.internalHost);\n            }\n        }\n    };\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\n    RepoInfo.prototype.connectionURL = function (type, params) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(typeof type === 'string', 'typeof type must == string');\n        Object(__WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object', 'typeof params must == object');\n        var connURL;\n        if (type === __WEBPACK_IMPORTED_MODULE_3__realtime_Constants__[\"i\" /* WEBSOCKET */]) {\n            connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n        } else if (type === __WEBPACK_IMPORTED_MODULE_3__realtime_Constants__[\"d\" /* LONG_POLLING */]) {\n            connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n        } else {\n            throw new Error('Unknown connection type: ' + type);\n        }\n        if (this.needsQueryParam()) {\n            params['ns'] = this.namespace;\n        }\n        var pairs = [];\n        Object(__WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(params, function (key, value) {\n            pairs.push(key + '=' + value);\n        });\n        return connURL + pairs.join('&');\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toString = function () {\n        var str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toURLString = function () {\n        return (this.secure ? 'https://' : 'http://') + this.host;\n    };\n    return RepoInfo;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/libs/parser.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\nfunction decodePath(pathString) {\n    var pathStringDecoded = '';\n    var pieces = pathString.split('/');\n    for (var i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            var piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            } catch (e) {}\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\nvar parser_parseRepoInfo = function parseRepoInfo(dataURL) {\n    var parsedUrl = parseURL(dataURL),\n        namespace = parsedUrl.subdomain;\n    if (parsedUrl.domain === 'firebase') {\n        Object(__WEBPACK_IMPORTED_MODULE_2__util__[\"o\" /* fatal */])(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if (!namespace || namespace == 'undefined') {\n        Object(__WEBPACK_IMPORTED_MODULE_2__util__[\"o\" /* fatal */])('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        Object(__WEBPACK_IMPORTED_MODULE_2__util__[\"C\" /* warnIfPageIsSecure */])();\n    }\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\n        path: new Path(parsedUrl.pathString)\n    };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\nvar parseURL = function parseURL(dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    var host = '',\n        domain = '',\n        subdomain = '',\n        pathString = '';\n    // Always default to SSL, unless otherwise specified.\n    var secure = true,\n        scheme = 'https',\n        port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        var colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host and path.\n        var slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        host = dataURL.substring(0, slashInd);\n        pathString = decodePath(dataURL.substring(slashInd));\n        var parts = host.split('.');\n        if (parts.length === 3) {\n            // Normalize namespaces to lowercase to share storage / connection.\n            domain = parts[1];\n            subdomain = parts[0].toLowerCase();\n        } else if (parts.length === 2) {\n            domain = parts[0];\n        }\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n    }\n    return {\n        host: host,\n        port: port,\n        domain: domain,\n        subdomain: subdomain,\n        secure: secure,\n        scheme: scheme,\n        pathString: pathString\n    };\n};\n// CONCATENATED MODULE: ./src/utils/validation.ts\nvar validation__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\nvar validateArgCount = function validateArgCount(fnName, minCount, maxCount, argCount) {\n    var argError;\n    if (argCount < minCount) {\n        argError = 'at least ' + minCount;\n    } else if (argCount > maxCount) {\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n    }\n    if (argError) {\n        var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';\n        throw new Error(error);\n    }\n};\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\nfunction validation_errorPrefix(fnName, argumentNumber, optional) {\n    var argName = '';\n    switch (argumentNumber) {\n        case 1:\n            argName = optional ? 'first' : 'First';\n            break;\n        case 2:\n            argName = optional ? 'second' : 'Second';\n            break;\n        case 3:\n            argName = optional ? 'third' : 'Third';\n            break;\n        case 4:\n            argName = optional ? 'fourth' : 'Fourth';\n            break;\n        default:\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n    }\n    var error = fnName + ' failed: ';\n    error += argName + ' argument ';\n    return error;\n}\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\nvar validateNamespace = function validateNamespace(fnName, argumentNumber, namespace, optional) {\n    if (optional && !namespace) return;\n    if (typeof namespace !== 'string') {\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\n        throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');\n    }\n};\nvar validateCallback = function validateCallback(fnName, argumentNumber, callback, optional) {\n    if (optional && !callback) return;\n    if (typeof callback !== 'function') throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');\n};\nvar validateContextObject = function validateContextObject(fnName, argumentNumber, context, optional) {\n    if (optional && !context) return;\n    if ((typeof context === 'undefined' ? 'undefined' : validation__typeof(context)) !== 'object' || context === null) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');\n};\n// CONCATENATED MODULE: ./src/database/core/util/validation.ts\n/* harmony import */ var validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var validation___WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_utf8__ = __webpack_require__(11);\nvar util_validation__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\nvar isValidKey = function isValidKey(key) {\n    return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\nvar isValidPathString = function isValidPathString(pathString) {\n    return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\nvar isValidPriority = function isValidPriority(priority) {\n    return priority === null || typeof priority === 'string' || typeof priority === 'number' && !Object(validation___WEBPACK_IMPORTED_MODULE_2__util__[\"q\" /* isInvalidJSONNumber */])(priority) || priority && (typeof priority === 'undefined' ? 'undefined' : util_validation__typeof(priority)) === 'object' && Object(validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"b\" /* contains */])(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\nvar validation_validateFirebaseDataArg = function validateFirebaseDataArg(fnName, argumentNumber, data, path, optional) {\n    if (optional && data === undefined) return;\n    validation_validateFirebaseData(validation_errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\nvar validation_validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n    }\n    if (Object(validation___WEBPACK_IMPORTED_MODULE_2__util__[\"q\" /* isInvalidJSONNumber */])(data)) {\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && Object(__WEBPACK_IMPORTED_MODULE_4__utils_utf8__[\"a\" /* stringLength */])(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && (typeof data === 'undefined' ? 'undefined' : util_validation__typeof(data)) === 'object') {\n        var hasDotValue_1 = false,\n            hasActualChild_1 = false;\n        Object(validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(data, function (key, value) {\n            if (key === '.value') {\n                hasDotValue_1 = true;\n            } else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild_1 = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            path.push(key);\n            validateFirebaseData(errorPrefix, value, path);\n            path.pop();\n        });\n        if (hasDotValue_1 && hasActualChild_1) {\n            throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n        }\n    }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\nvar validation_validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n    var i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        var keys = curPath.slice();\n        for (var j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) {\n                // .priority is OK\n            } else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(Path.comparePaths);\n    var prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && prevPath.contains(curPath)) {\n            throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\nvar validation_validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, argumentNumber, data, path, optional) {\n    if (optional && data === undefined) return;\n    var errorPrefix = validation_errorPrefix(fnName, argumentNumber, optional);\n    if (!(data && (typeof data === 'undefined' ? 'undefined' : util_validation__typeof(data)) === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n    }\n    var mergePaths = [];\n    Object(validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(data, function (key, value) {\n        var curPath = new Path(key);\n        validation_validateFirebaseData(errorPrefix, value, path.child(curPath));\n        if (curPath.getBack() === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validation_validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\nvar validation_validatePriority = function validatePriority(fnName, argumentNumber, priority, optional) {\n    if (optional && priority === undefined) return;\n    if (Object(validation___WEBPACK_IMPORTED_MODULE_2__util__[\"q\" /* isInvalidJSONNumber */])(priority)) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n};\nvar validation_validateEventType = function validateEventType(fnName, argumentNumber, eventType, optional) {\n    if (optional && eventType === undefined) return;\n    switch (eventType) {\n        case 'value':\n        case 'child_added':\n        case 'child_removed':\n        case 'child_changed':\n        case 'child_moved':\n            break;\n        default:\n            throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n};\nvar validation_validateKey = function validateKey(fnName, argumentNumber, key, optional) {\n    if (optional && key === undefined) return;\n    if (!isValidKey(key)) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n};\nvar validation_validatePathString = function validatePathString(fnName, argumentNumber, pathString, optional) {\n    if (optional && pathString === undefined) return;\n    if (!isValidPathString(pathString)) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n};\nvar validateRootPathString = function validateRootPathString(fnName, argumentNumber, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validation_validatePathString(fnName, argumentNumber, pathString, optional);\n};\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n    if (path.getFront() === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nvar validation_validateUrl = function validateUrl(fnName, argumentNumber, parsedUrl) {\n    // TODO = Validate server better.\n    var pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n        throw new Error(validation_errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\nvar validation_validateCredential = function validateCredential(fnName, argumentNumber, cred, optional) {\n    if (optional && cred === undefined) return;\n    if (!(typeof cred === 'string')) throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid credential (a string).');\n};\nvar validation_validateBoolean = function validateBoolean(fnName, argumentNumber, bool, optional) {\n    if (optional && bool === undefined) return;\n    if (typeof bool !== 'boolean') throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n};\nvar validation_validateString = function validateString(fnName, argumentNumber, string, optional) {\n    if (optional && string === undefined) return;\n    if (!(typeof string === 'string')) {\n        throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid string.');\n    }\n};\nvar validation_validateObject = function validateObject(fnName, argumentNumber, obj, optional) {\n    if (optional && obj === undefined) return;\n    if (!(obj && (typeof obj === 'undefined' ? 'undefined' : util_validation__typeof(obj)) === 'object') || obj === null) {\n        throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must be a valid object.');\n    }\n};\nvar validation_validateObjectContainsKey = function validateObjectContainsKey(fnName, argumentNumber, obj, key, optional, opt_type) {\n    var objectContainsKey = obj && (typeof obj === 'undefined' ? 'undefined' : util_validation__typeof(obj)) === 'object' && Object(validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"b\" /* contains */])(obj, key);\n    if (!objectContainsKey) {\n        if (optional) {\n            return;\n        } else {\n            throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must contain the key \"' + key + '\"');\n        }\n    }\n    if (opt_type) {\n        var val = Object(validation___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"l\" /* safeGet */])(obj, key);\n        if (opt_type === 'number' && !(typeof val === 'number') || opt_type === 'string' && !(typeof val === 'string') || opt_type === 'boolean' && !(typeof val === 'boolean') || opt_type === 'function' && !(typeof val === 'function') || opt_type === 'object' && !((typeof val === 'undefined' ? 'undefined' : util_validation__typeof(val)) === 'object') && val) {\n            if (optional) {\n                throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'contains invalid value for key \"' + key + '\" (must be of type \"' + opt_type + '\")');\n            } else {\n                throw new Error(validation_errorPrefix(fnName, argumentNumber, optional) + 'must contain the key \"' + key + '\" with type \"' + opt_type + '\"');\n            }\n        }\n    }\n};\n// CONCATENATED MODULE: ./src/database/api/onDisconnect.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_promise__ = __webpack_require__(5);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * @constructor\r\n */\nvar onDisconnect_OnDisconnect = function () {\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\n    function OnDisconnect(repo_, path_) {\n        this.repo_ = repo_;\n        this.path_ = path_;\n    }\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\n    OnDisconnect.prototype.cancel = function (onComplete) {\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n        validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n        var deferred = new __WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"a\" /* Deferred */]();\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\n    OnDisconnect.prototype.remove = function (onComplete) {\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n        validateWritablePath('OnDisconnect.remove', this.path_);\n        validateCallback('OnDisconnect.remove', 1, onComplete, true);\n        var deferred = new __WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"a\" /* Deferred */]();\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\n    OnDisconnect.prototype.set = function (value, onComplete) {\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n        validateWritablePath('OnDisconnect.set', this.path_);\n        validation_validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n        validateCallback('OnDisconnect.set', 2, onComplete, true);\n        var deferred = new __WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"a\" /* Deferred */]();\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n        validation_validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n        validation_validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n        validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n        var deferred = new __WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"a\" /* Deferred */]();\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n        validateWritablePath('OnDisconnect.update', this.path_);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            Object(__WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"B\" /* warn */])('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n        }\n        validation_validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n        validateCallback('OnDisconnect.update', 2, onComplete, true);\n        var deferred = new __WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"a\" /* Deferred */]();\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    return OnDisconnect;\n}();\n\n// CONCATENATED MODULE: ./src/database/api/TransactionResult.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nvar TransactionResult_TransactionResult = function () {\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\n    function TransactionResult(committed, snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users\n    TransactionResult.prototype.toJSON = function () {\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    };\n    return TransactionResult;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/NextPushId.ts\n/* harmony import */ var NextPushId___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nvar nextPushId = function () {\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    var lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    var lastRandChars = [];\n    return function (now) {\n        var duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        var i;\n        var timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        Object(NextPushId___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(now === 0, 'Cannot push at time == 0');\n        var id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        } else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        Object(NextPushId___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n}();\n// CONCATENATED MODULE: ./src/database/core/snap/Node.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\nvar NamedNode = function () {\n    function NamedNode(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\n    NamedNode.Wrap = function (name, node) {\n        return new NamedNode(name, node);\n    };\n    return NamedNode;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/snap/indexes/Index.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n *\r\n * @constructor\r\n */\nvar Index_Index = function () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(__WEBPACK_IMPORTED_MODULE_1__util_util__[\"c\" /* MIN_NAME */], oldNode);\n    var newWrapped = new NamedNode(__WEBPACK_IMPORTED_MODULE_1__util_util__[\"c\" /* MIN_NAME */], newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  Index.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  return Index;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/snap/indexes/KeyIndex.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\nvar __EMPTY_NODE;\nvar KeyIndex_KeyIndex = function (_super) {\n    __extends(KeyIndex, _super);\n    function KeyIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n        get: function get() {\n            return __EMPTY_NODE;\n        },\n        set: function set(val) {\n            __EMPTY_NODE = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * @inheritDoc\r\n     */\n    KeyIndex.prototype.compare = function (a, b) {\n        return Object(__WEBPACK_IMPORTED_MODULE_2__util_util__[\"v\" /* nameCompare */])(a.name, b.name);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    KeyIndex.prototype.isDefinedOn = function (node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw Object(__WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"b\" /* assertionError */])('KeyIndex.isDefinedOn not expected to be called.');\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return false; // The key for a node never changes.\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    KeyIndex.prototype.minPost = function () {\n        return NamedNode.MIN;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    KeyIndex.prototype.maxPost = function () {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(__WEBPACK_IMPORTED_MODULE_2__util_util__[\"b\" /* MAX_NAME */], __EMPTY_NODE);\n    };\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\n    KeyIndex.prototype.makePost = function (indexValue, name) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    };\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\n    KeyIndex.prototype.toString = function () {\n        return '.key';\n    };\n    return KeyIndex;\n}(Index_Index);\n\nvar KEY_INDEX = new KeyIndex_KeyIndex();\n// CONCATENATED MODULE: ./src/database/core/snap/snap.ts\n/* harmony import */ var snap___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var snap___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_obj__ = __webpack_require__(2);\nvar snap__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\nvar MAX_NODE;\nfunction setMaxNode(val) {\n    MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\nvar priorityHashText = function priorityHashText(priority) {\n    if (typeof priority === 'number') return 'number:' + Object(snap___WEBPACK_IMPORTED_MODULE_1__util_util__[\"h\" /* doubleToIEEE754String */])(priority);else return 'string:' + priority;\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        var val = priorityNode.val();\n        Object(snap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(typeof val === 'string' || typeof val === 'number' || (typeof val === 'undefined' ? 'undefined' : snap__typeof(val)) === 'object' && Object(__WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"b\" /* contains */])(val, '.sv'), 'Priority must be a string or number.');\n    } else {\n        Object(snap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    Object(snap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n// CONCATENATED MODULE: ./src/database/core/snap/LeafNode.ts\n/* harmony import */ var LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var LeafNode___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\nvar LeafNode__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nvar LeafNode_LeafNode = function () {\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\n    function LeafNode(value_, priorityNode_) {\n        if (priorityNode_ === void 0) {\n            priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        Object(LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n        get: function get() {\n            return __childrenNodeConstructor;\n        },\n        set: function set(val) {\n            __childrenNodeConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    LeafNode.prototype.isLeafNode = function () {\n        return true;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPriority = function () {\n        return this.priorityNode_;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        } else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getChild = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        } else if (path.getFront() === '.priority') {\n            return this.priorityNode_;\n        } else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.hasChild = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n        return null;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        } else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        } else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        } else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        } else {\n            Object(LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.numChildren = function () {\n        return 0;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.forEachChild = function (index, action) {\n        return false;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.val = function (exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) return {\n            '.value': this.getValue(),\n            '.priority': this.getPriority().val()\n        };else return this.getValue();\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash = '';\n            if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n            var type = LeafNode__typeof(this.value_);\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += Object(LeafNode___WEBPACK_IMPORTED_MODULE_1__util_util__[\"h\" /* doubleToIEEE754String */])(this.value_);\n            } else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = Object(LeafNode___WEBPACK_IMPORTED_MODULE_1__util_util__[\"y\" /* sha1 */])(toHash);\n        }\n        return this.lazyHash_;\n    };\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\n    LeafNode.prototype.getValue = function () {\n        return this.value_;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.compareTo = function (other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        } else {\n            Object(LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    };\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n        var otherLeafType = LeafNode__typeof(otherLeaf.value_);\n        var thisLeafType = LeafNode__typeof(this.value_);\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        Object(LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        Object(LeafNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            } else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                } else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            }\n        } else {\n            return thisIndex - otherIndex;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.withIndex = function () {\n        return this;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.isIndexed = function () {\n        return true;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LeafNode.prototype.equals = function (other) {\n        /**\r\n         * @inheritDoc\r\n         */\n        if (other === this) {\n            return true;\n        } else if (other.isLeafNode()) {\n            var otherLeaf = other;\n            return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n        } else {\n            return false;\n        }\n    };\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n    return LeafNode;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/snap/indexes/PriorityIndex.ts\n/* harmony import */ var PriorityIndex___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar PriorityIndex___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\nvar nodeFromJSON;\nvar PriorityIndex_MAX_NODE;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON = val;\n}\nfunction PriorityIndex_setMaxNode(val) {\n    PriorityIndex_MAX_NODE = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\nvar PriorityIndex_PriorityIndex = function (_super) {\n    PriorityIndex___extends(PriorityIndex, _super);\n    function PriorityIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    PriorityIndex.prototype.compare = function (a, b) {\n        var aPriority = a.node.getPriority();\n        var bPriority = b.node.getPriority();\n        var indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return Object(PriorityIndex___WEBPACK_IMPORTED_MODULE_1__util_util__[\"v\" /* nameCompare */])(a.name, b.name);\n        } else {\n            return indexCmp;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PriorityIndex.prototype.isDefinedOn = function (node) {\n        return !node.getPriority().isEmpty();\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PriorityIndex.prototype.minPost = function () {\n        return NamedNode.MIN;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PriorityIndex.prototype.maxPost = function () {\n        return new NamedNode(PriorityIndex___WEBPACK_IMPORTED_MODULE_1__util_util__[\"b\" /* MAX_NAME */], new LeafNode_LeafNode('[PRIORITY-POST]', PriorityIndex_MAX_NODE));\n    };\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\n        var priorityNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, new LeafNode_LeafNode('[PRIORITY-POST]', priorityNode));\n    };\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\n    PriorityIndex.prototype.toString = function () {\n        return '.priority';\n    };\n    return PriorityIndex;\n}(Index_Index);\n\nvar PRIORITY_INDEX = new PriorityIndex_PriorityIndex();\n// CONCATENATED MODULE: ./src/database/core/util/SortedMap.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * An iterator over an LLRBNode.\r\n */\nvar SortedMapIterator = function () {\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n        if (resultGenerator_ === void 0) {\n            resultGenerator_ = null;\n        }\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\n        this.nodeStack_ = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                } else {\n                    node = node.right;\n                }\n            } else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            } else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                } else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        if (this.nodeStack_.length === 0) return null;\n        var node = this.nodeStack_.pop();\n        var result;\n        if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = { key: node.key, value: node.value };\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        } else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack_.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack_.length === 0) return null;\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        } else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}();\n\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nvar LLRBNode = function () {\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left = left != null ? left : SortedMap.EMPTY_NODE;\n        this.right = right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\n    LLRBNode.prototype.count = function () {\n        return this.left.count() + 1 + this.right.count();\n    };\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n    };\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n    };\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\n    LLRBNode.prototype.min_ = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        } else {\n            return this.left.min_();\n        }\n    };\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\n    LLRBNode.prototype.minKey = function () {\n        return this.min_().key;\n    };\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        } else {\n            return this.right.maxKey();\n        }\n    };\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var cmp, n;\n        n = this;\n        cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        } else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        } else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\n    LLRBNode.prototype.removeMin_ = function () {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        var n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    };\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        } else {\n            if (n.left.isRed_()) n = n.rotateRight_();\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                } else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\n    LLRBNode.prototype.isRed_ = function () {\n        return this.color;\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\n    LLRBNode.prototype.fixUp_ = function () {\n        var n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n        if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n        if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n        return n;\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\n    LLRBNode.prototype.moveRedLeft_ = function () {\n        var n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\n    LLRBNode.prototype.moveRedRight_ = function () {\n        var n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\n    LLRBNode.prototype.rotateLeft_ = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\n    LLRBNode.prototype.rotateRight_ = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\n    LLRBNode.prototype.colorFlip_ = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\n    LLRBNode.prototype.checkMaxDepth_ = function () {\n        var blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    };\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\n    LLRBNode.prototype.check_ = function () {\n        var blackDepth;\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        } else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    };\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}();\n\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nvar LLRBEmptyNode = function () {\n    function LLRBEmptyNode() {}\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    };\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\n    LLRBEmptyNode.prototype.count = function () {\n        return 0;\n    };\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    /**\r\n     * @return {null}\r\n     */\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    /**\r\n     * @return {null}\r\n     */\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\n    LLRBEmptyNode.prototype.check_ = function () {\n        return 0;\n    };\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\n    LLRBEmptyNode.prototype.isRed_ = function () {\n        return false;\n    };\n    return LLRBEmptyNode;\n}();\n\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nvar SortedMap = function () {\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\n    function SortedMap(comparator_, root_) {\n        if (root_ === void 0) {\n            root_ = SortedMap.EMPTY_NODE;\n        }\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\n    SortedMap.prototype.get = function (key) {\n        var cmp;\n        var node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            } else if (cmp < 0) {\n                node = node.left;\n            } else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var cmp,\n            node = this.root_,\n            rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }return node.key;\n                } else if (rightParent) {\n                    return rightParent.key;\n                } else {\n                    return null; // first item.\n                }\n            } else if (cmp < 0) {\n                node = node.left;\n            } else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    };\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\n    SortedMap.prototype.isEmpty = function () {\n        return this.root_.isEmpty();\n    };\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\n    SortedMap.prototype.count = function () {\n        return this.root_.count();\n    };\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\n    SortedMap.prototype.minKey = function () {\n        return this.root_.minKey();\n    };\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\n    SortedMap.prototype.maxKey = function () {\n        return this.root_.maxKey();\n    };\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root_.inorderTraversal(action);\n    };\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root_.reverseTraversal(action);\n    };\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    };\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n    return SortedMap;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/snap/childSet.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\nvar Base12Num = function () {\n    /**\r\n     * @param {number} length\r\n     */\n    function Base12Num(length) {\n        var logBase2 = function logBase2(num) {\n            return parseInt(Math.log(num) / LOG_2, 10);\n        };\n        var bitMask = function bitMask(bits) {\n            return parseInt(Array(bits + 1).join('1'), 2);\n        };\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        var mask = bitMask(this.count);\n        this.bits_ = length + 1 & mask;\n    }\n    /**\r\n     * @return {boolean}\r\n     */\n    Base12Num.prototype.nextBitIsOne = function () {\n        //noinspection JSBitwiseOperatorUsage\n        var result = !(this.bits_ & 0x1 << this.current_);\n        this.current_--;\n        return result;\n    };\n    return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\nvar childSet_buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    var buildBalancedTree = function buildBalancedTree(low, high) {\n        var length = high - low;\n        var namedNode;\n        var key;\n        if (length == 0) {\n            return null;\n        } else if (length == 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        } else {\n            var middle = parseInt(length / 2, 10) + low;\n            var left = buildBalancedTree(low, middle);\n            var right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    var buildFrom12Array = function buildFrom12Array(base12) {\n        var node = null;\n        var root = null;\n        var index = childList.length;\n        var buildPennant = function buildPennant(chunkSize, color) {\n            var low = index - chunkSize;\n            var high = index;\n            index -= chunkSize;\n            var childTree = buildBalancedTree(low + 1, high);\n            var namedNode = childList[low];\n            var key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        var attachPennant = function attachPennant(pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            } else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (var i = 0; i < base12.count; ++i) {\n            var isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            } else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    var base12 = new Base12Num(childList.length);\n    var root = buildFrom12Array(base12);\n    return new SortedMap(mapSortFn || cmp, root);\n};\n// CONCATENATED MODULE: ./src/database/core/snap/IndexMap.ts\n/* harmony import */ var IndexMap___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\nvar _defaultIndexMap;\nvar fallbackObject = {};\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\nvar IndexMap_IndexMap = function () {\n    function IndexMap(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    Object.defineProperty(IndexMap, \"Default\", {\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\n        get: function get() {\n            Object(IndexMap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n            _defaultIndexMap = _defaultIndexMap || new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n            return _defaultIndexMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\n    IndexMap.prototype.get = function (indexKey) {\n        var sortedMap = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"l\" /* safeGet */])(this.indexes_, indexKey);\n        if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n        if (sortedMap === fallbackObject) {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        } else {\n            return sortedMap;\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\n        return Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"b\" /* contains */])(this.indexSet_, indexDefinition.toString());\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n        Object(IndexMap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        var childList = [];\n        var sawIndexedValue = false;\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\n        var next = iter.getNext();\n        while (next) {\n            sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        var newIndex;\n        if (sawIndexedValue) {\n            newIndex = childSet_buildChildSet(childList, indexDefinition.getCompare());\n        } else {\n            newIndex = fallbackObject;\n        }\n        var indexName = indexDefinition.toString();\n        var newIndexSet = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"a\" /* clone */])(this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        var newIndexes = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"a\" /* clone */])(this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    };\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n        var _this = this;\n        var newIndexes = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"k\" /* map */])(this.indexes_, function (indexedChildren, indexName) {\n            var index = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"l\" /* safeGet */])(_this.indexSet_, indexName);\n            Object(IndexMap___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    var childList = [];\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\n                    var next = iter.getNext();\n                    while (next) {\n                        if (next.name != namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return childSet_buildChildSet(childList, index.getCompare());\n                } else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            } else {\n                var existingSnap = existingChildren.get(namedNode.name);\n                var newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    };\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n        var newIndexes = Object(IndexMap___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"k\" /* map */])(this.indexes_, function (indexedChildren) {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            } else {\n                var existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                } else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    };\n    return IndexMap;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/snap/comparators.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return Object(__WEBPACK_IMPORTED_MODULE_0__util_util__[\"v\" /* nameCompare */])(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return Object(__WEBPACK_IMPORTED_MODULE_0__util_util__[\"v\" /* nameCompare */])(left, right);\n}\n// CONCATENATED MODULE: ./src/database/core/snap/ChildrenNode.ts\n/* harmony import */ var ChildrenNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var ChildrenNode___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar ChildrenNode___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n\n\n\n\n\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\nvar ChildrenNode_ChildrenNode = function () {\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            Object(ChildrenNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n        get: function get() {\n            return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap_IndexMap.Default));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    ChildrenNode.prototype.isLeafNode = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPriority = function () {\n        return this.priorityNode_ || EMPTY_NODE;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        } else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        } else {\n            var child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getChild = function (path) {\n        var front = path.getFront();\n        if (front === null) return this;\n        return this.getImmediateChild(front).getChild(path.popFront());\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hasChild = function (childName) {\n        return this.children_.get(childName) !== null;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        Object(ChildrenNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        } else {\n            var namedNode = new NamedNode(childName, newChildNode);\n            var newChildren = void 0,\n                newIndexMap = void 0,\n                newPriority = void 0;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            } else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        } else {\n            Object(ChildrenNode___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.isEmpty = function () {\n        return this.children_.isEmpty();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.numChildren = function () {\n        return this.children_.count();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.val = function (exportFormat) {\n        if (this.isEmpty()) return null;\n        var obj = {};\n        var numKeys = 0,\n            maxKey = 0,\n            allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            } else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            var array = [];\n            for (var key in obj) {\n                array[key] = obj[key];\n            }return array;\n        } else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash_1 = '';\n            if (!this.getPriority().isEmpty()) toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n                var childHash = childNode.hash();\n                if (childHash !== '') toHash_1 += ':' + key + ':' + childHash;\n            });\n            this.lazyHash_ = toHash_1 === '' ? '' : Object(ChildrenNode___WEBPACK_IMPORTED_MODULE_1__util_util__[\"y\" /* sha1 */])(toHash_1);\n        }\n        return this.lazyHash_;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        } else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var minKey = idx.minKey();\n            return minKey && minKey.name;\n        } else {\n            return this.children_.minKey();\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n        var minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        } else {\n            return this.children_.maxKey();\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n        var maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildrenNode.prototype.forEachChild = function (index, action) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(function (wrappedNode) {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        } else {\n            return this.children_.inorderTraversal(action);\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    };\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, function (key) {\n                return key;\n            });\n        } else {\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    };\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, function (key) {\n                return key;\n            });\n        } else {\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildrenNode.prototype.compareTo = function (other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            } else {\n                return -1;\n            }\n        } else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        } else if (other === ChildrenNode_MAX_NODE) {\n            return -1;\n        } else {\n            // Must be another node with children.\n            return 0;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\n        if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        } else {\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildrenNode.prototype.isIndexed = function (index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildrenNode.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        } else if (other.isLeafNode()) {\n            return false;\n        } else {\n            var otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                var thisIter = this.getIterator(PRIORITY_INDEX);\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                var thisCurrent = thisIter.getNext();\n                var otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            } else {\n                return false;\n            }\n        }\n    };\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        } else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    };\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n    return ChildrenNode;\n}();\n\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\nvar ChildrenNode_MaxNode = function (_super) {\n    ChildrenNode___extends(MaxNode, _super);\n    function MaxNode() {\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode_ChildrenNode.EMPTY_NODE, IndexMap_IndexMap.Default) || this;\n    }\n    MaxNode.prototype.compareTo = function (other) {\n        if (other === this) {\n            return 0;\n        } else {\n            return 1;\n        }\n    };\n    MaxNode.prototype.equals = function (other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    };\n    MaxNode.prototype.getPriority = function () {\n        return this;\n    };\n    MaxNode.prototype.getImmediateChild = function (childName) {\n        return ChildrenNode_ChildrenNode.EMPTY_NODE;\n    };\n    MaxNode.prototype.isEmpty = function () {\n        return false;\n    };\n    return MaxNode;\n}(ChildrenNode_ChildrenNode);\n\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\nvar ChildrenNode_MAX_NODE = new ChildrenNode_MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(ChildrenNode___WEBPACK_IMPORTED_MODULE_1__util_util__[\"c\" /* MIN_NAME */], ChildrenNode_ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(ChildrenNode___WEBPACK_IMPORTED_MODULE_1__util_util__[\"b\" /* MAX_NAME */], ChildrenNode_MAX_NODE)\n    }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex_KeyIndex.__EMPTY_NODE = ChildrenNode_ChildrenNode.EMPTY_NODE;\nLeafNode_LeafNode.__childrenNodeConstructor = ChildrenNode_ChildrenNode;\nsetMaxNode(ChildrenNode_MAX_NODE);\nPriorityIndex_setMaxNode(ChildrenNode_MAX_NODE);\n// CONCATENATED MODULE: ./src/database/core/snap/nodeFromJSON.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_assert__ = __webpack_require__(0);\nvar nodeFromJSON__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\nfunction nodeFromJSON_nodeFromJSON(json, priority) {\n    if (priority === void 0) {\n        priority = null;\n    }\n    if (json === null) {\n        return ChildrenNode_ChildrenNode.EMPTY_NODE;\n    }\n    if ((typeof json === 'undefined' ? 'undefined' : nodeFromJSON__typeof(json)) === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    Object(__WEBPACK_IMPORTED_MODULE_4__utils_assert__[\"a\" /* assert */])(priority === null || typeof priority === 'string' || typeof priority === 'number' || (typeof priority === 'undefined' ? 'undefined' : nodeFromJSON__typeof(priority)) === 'object' && '.sv' in priority, 'Invalid priority type found: ' + (typeof priority === 'undefined' ? 'undefined' : nodeFromJSON__typeof(priority)));\n    if ((typeof json === 'undefined' ? 'undefined' : nodeFromJSON__typeof(json)) === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if ((typeof json === 'undefined' ? 'undefined' : nodeFromJSON__typeof(json)) !== 'object' || '.sv' in json) {\n        var jsonLeaf = json;\n        return new LeafNode_LeafNode(jsonLeaf, nodeFromJSON_nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        var children_1 = [];\n        var childrenHavePriority_1 = false;\n        var hinzeJsonObj_1 = json;\n        Object(__WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(hinzeJsonObj_1, function (key, child) {\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                var childNode = nodeFromJSON_nodeFromJSON(hinzeJsonObj_1[key]);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n                    children_1.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children_1.length == 0) {\n            return ChildrenNode_ChildrenNode.EMPTY_NODE;\n        }\n        var childSet = childSet_buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n            return namedNode.name;\n        }, NAME_COMPARATOR);\n        if (childrenHavePriority_1) {\n            var sortedChildSet = childSet_buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode_ChildrenNode(childSet, nodeFromJSON_nodeFromJSON(priority), new IndexMap_IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        } else {\n            return new ChildrenNode_ChildrenNode(childSet, nodeFromJSON_nodeFromJSON(priority), IndexMap_IndexMap.Default);\n        }\n    } else {\n        var node_1 = ChildrenNode_ChildrenNode.EMPTY_NODE;\n        var jsonObj_1 = json;\n        Object(__WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(jsonObj_1, function (key, childData) {\n            if (Object(__WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"b\" /* contains */])(jsonObj_1, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    var childNode = nodeFromJSON_nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);\n                }\n            }\n        });\n        return node_1.updatePriority(nodeFromJSON_nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON_nodeFromJSON);\n// CONCATENATED MODULE: ./src/database/core/snap/indexes/ValueIndex.ts\n/* harmony import */ var ValueIndex___WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar ValueIndex___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\nvar ValueIndex_ValueIndex = function (_super) {\n    ValueIndex___extends(ValueIndex, _super);\n    function ValueIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueIndex.prototype.compare = function (a, b) {\n        var indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return Object(ValueIndex___WEBPACK_IMPORTED_MODULE_2__util_util__[\"v\" /* nameCompare */])(a.name, b.name);\n        } else {\n            return indexCmp;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueIndex.prototype.isDefinedOn = function (node) {\n        return true;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueIndex.prototype.minPost = function () {\n        return NamedNode.MIN;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueIndex.prototype.maxPost = function () {\n        return NamedNode.MAX;\n    };\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\n    ValueIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON_nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    };\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\n    ValueIndex.prototype.toString = function () {\n        return '.value';\n    };\n    return ValueIndex;\n}(Index_Index);\n\nvar VALUE_INDEX = new ValueIndex_ValueIndex();\n// CONCATENATED MODULE: ./src/database/core/snap/indexes/PathIndex.ts\n/* harmony import */ var PathIndex___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var PathIndex___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar PathIndex___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\nvar PathIndex_PathIndex = function (_super) {\n    PathIndex___extends(PathIndex, _super);\n    function PathIndex(indexPath_) {\n        var _this = _super.call(this) || this;\n        _this.indexPath_ = indexPath_;\n        Object(PathIndex___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n        return _this;\n    }\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\n    PathIndex.prototype.extractChild = function (snap) {\n        return snap.getChild(this.indexPath_);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PathIndex.prototype.isDefinedOn = function (node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PathIndex.prototype.compare = function (a, b) {\n        var aChild = this.extractChild(a.node);\n        var bChild = this.extractChild(b.node);\n        var indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return Object(PathIndex___WEBPACK_IMPORTED_MODULE_1__util_util__[\"v\" /* nameCompare */])(a.name, b.name);\n        } else {\n            return indexCmp;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PathIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON_nodeFromJSON(indexValue);\n        var node = ChildrenNode_ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PathIndex.prototype.maxPost = function () {\n        var node = ChildrenNode_ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_MAX_NODE);\n        return new NamedNode(PathIndex___WEBPACK_IMPORTED_MODULE_1__util_util__[\"b\" /* MAX_NAME */], node);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PathIndex.prototype.toString = function () {\n        return this.indexPath_.slice().join('/');\n    };\n    return PathIndex;\n}(Index_Index);\n\n// CONCATENATED MODULE: ./src/database/api/DataSnapshot.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nvar DataSnapshot_DataSnapshot = function () {\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\n    function DataSnapshot(node_, ref_, index_) {\n        this.node_ = node_;\n        this.ref_ = ref_;\n        this.index_ = index_;\n    }\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\n    DataSnapshot.prototype.val = function () {\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n        return this.node_.val();\n    };\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\n    DataSnapshot.prototype.exportVal = function () {\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n        return this.node_.val(true);\n    };\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users\n    DataSnapshot.prototype.toJSON = function () {\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n        return this.exportVal();\n    };\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\n    DataSnapshot.prototype.exists = function () {\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n        return !this.node_.isEmpty();\n    };\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\n    DataSnapshot.prototype.child = function (childPathString) {\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n        // Ensure the childPath is a string (can be a number)\n        childPathString = String(childPathString);\n        validation_validatePathString('DataSnapshot.child', 1, childPathString, false);\n        var childPath = new Path(childPathString);\n        var childRef = this.ref_.child(childPath);\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n    };\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\n    DataSnapshot.prototype.hasChild = function (childPathString) {\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n        validation_validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n        var childPath = new Path(childPathString);\n        return !this.node_.getChild(childPath).isEmpty();\n    };\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\n    DataSnapshot.prototype.getPriority = function () {\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this.node_.getPriority().val();\n    };\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\n    DataSnapshot.prototype.forEach = function (action) {\n        var _this = this;\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n        validateCallback('DataSnapshot.forEach', 1, action, false);\n        if (this.node_.isLeafNode()) return false;\n        var childrenNode = this.node_;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n        });\n    };\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\n    DataSnapshot.prototype.hasChildren = function () {\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n        if (this.node_.isLeafNode()) return false;else return !this.node_.isEmpty();\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\n        get: function get() {\n            return this.ref_.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\n    DataSnapshot.prototype.numChildren = function () {\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n        return this.node_.numChildren();\n    };\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\n    DataSnapshot.prototype.getRef = function () {\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n        return this.ref_;\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n        get: function get() {\n            return this.getRef();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DataSnapshot;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/Event.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_json__ = __webpack_require__(3);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\nvar DataEvent = function () {\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    DataEvent.prototype.getPath = function () {\n        var ref = this.snapshot.getRef();\n        if (this.eventType === 'value') {\n            return ref.path;\n        } else {\n            return ref.getParent().path;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    DataEvent.prototype.getEventType = function () {\n        return this.eventType;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    DataEvent.prototype.getEventRunner = function () {\n        return this.eventRegistration.getEventRunner(this);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    DataEvent.prototype.toString = function () {\n        return this.getPath().toString() + ':' + this.eventType + ':' + Object(__WEBPACK_IMPORTED_MODULE_0__utils_json__[\"b\" /* stringify */])(this.snapshot.exportVal());\n    };\n    return DataEvent;\n}();\n\nvar CancelEvent = function () {\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\n    function CancelEvent(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    CancelEvent.prototype.getPath = function () {\n        return this.path;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    CancelEvent.prototype.getEventType = function () {\n        return 'cancel';\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    CancelEvent.prototype.getEventRunner = function () {\n        return this.eventRegistration.getEventRunner(this);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    CancelEvent.prototype.toString = function () {\n        return this.path.toString() + ':cancel';\n    };\n    return CancelEvent;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/EventRegistration.ts\n/* harmony import */ var EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var EventRegistration___WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * Represents registration for 'value' events.\r\n */\nvar EventRegistration_ValueEventRegistration = function () {\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\n        this.callback_ = callback_;\n        this.cancelCallback_ = cancelCallback_;\n        this.context_ = context_;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\n        return eventType === 'value';\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\n        var index = query.getQueryParams().getIndex();\n        return new DataEvent('value', this, new DataSnapshot_DataSnapshot(change.snapshotNode, query.getRef(), index));\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n        var ctx = this.context_;\n        if (eventData.getEventType() === 'cancel') {\n            Object(EventRegistration___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n            var cancelCB_1 = this.cancelCallback_;\n            return function () {\n                // We know that error exists, we checked above that this is a cancel event\n                cancelCB_1.call(ctx, eventData.error);\n            };\n        } else {\n            var cb_1 = this.callback_;\n            return function () {\n                cb_1.call(ctx, eventData.snapshot);\n            };\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n        if (this.cancelCallback_) {\n            return new CancelEvent(this, error, path);\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.matches = function (other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        } else if (!other.callback_ || !this.callback_) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        } else {\n            return other.callback_ === this.callback_ && other.context_ === this.context_;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\n        return this.callback_ !== null;\n    };\n    return ValueEventRegistration;\n}();\n\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\nvar EventRegistration_ChildEventRegistration = function () {\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n        this.callbacks_ = callbacks_;\n        this.cancelCallback_ = cancelCallback_;\n        this.context_ = context_;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"b\" /* contains */])(this.callbacks_, eventToCheck);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n        if (this.cancelCallback_) {\n            return new CancelEvent(this, error, path);\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\n        Object(EventRegistration___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(change.childName != null, 'Child events should have a childName.');\n        var ref = query.getRef().child /** @type {!string} */(change.childName);\n        var index = query.getQueryParams().getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot_DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n        var ctx = this.context_;\n        if (eventData.getEventType() === 'cancel') {\n            Object(EventRegistration___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n            var cancelCB_2 = this.cancelCallback_;\n            return function () {\n                // We know that error exists, we checked above that this is a cancel event\n                cancelCB_2.call(ctx, eventData.error);\n            };\n        } else {\n            var cb_2 = this.callbacks_[eventData.eventType];\n            return function () {\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n            };\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.matches = function (other) {\n        if (other instanceof ChildEventRegistration) {\n            if (!this.callbacks_ || !other.callbacks_) {\n                return true;\n            } else if (this.context_ === other.context_) {\n                var otherCount = Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"h\" /* getCount */])(other.callbacks_);\n                var thisCount = Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"h\" /* getCount */])(this.callbacks_);\n                if (otherCount === thisCount) {\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n                    //  If event types don't match, not a match\n                    // If count is not 1, exact match across all\n                    if (otherCount === 1) {\n                        var otherKey /** @type {!string} */ = Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"g\" /* getAnyKey */])(other.callbacks_);\n                        var thisKey /** @type {!string} */ = Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"g\" /* getAnyKey */])(this.callbacks_);\n                        return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n                    } else {\n                        // Exact match on each key.\n                        return Object(EventRegistration___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"c\" /* every */])(this.callbacks_, function (eventType, cb) {\n                            return other.callbacks_[eventType] === cb;\n                        });\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\n        return this.callbacks_ !== null;\n    };\n    return ChildEventRegistration;\n}();\n\n// CONCATENATED MODULE: ./src/database/api/Query.ts\n/* harmony import */ var Query___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_promise__ = __webpack_require__(5);\nvar Query__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nvar Query_Query = function () {\n    function Query(repo, path, queryParams_, orderByCalled_) {\n        this.repo = repo;\n        this.path = path;\n        this.queryParams_ = queryParams_;\n        this.orderByCalled_ = orderByCalled_;\n    }\n    Object.defineProperty(Query, \"__referenceConstructor\", {\n        get: function get() {\n            Object(Query___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(__referenceConstructor, 'Reference.ts has not been loaded');\n            return __referenceConstructor;\n        },\n        set: function set(val) {\n            __referenceConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\n    Query.validateQueryEndpoints_ = function (params) {\n        var startNode = null;\n        var endNode = null;\n        if (params.hasStart()) {\n            startNode = params.getIndexStartValue();\n        }\n        if (params.hasEnd()) {\n            endNode = params.getIndexEndValue();\n        }\n        if (params.getIndex() === KEY_INDEX) {\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n            if (params.hasStart()) {\n                var startName = params.getIndexStartName();\n                if (startName != __WEBPACK_IMPORTED_MODULE_5__core_util_util__[\"c\" /* MIN_NAME */]) {\n                    throw new Error(tooManyArgsError);\n                } else if (typeof startNode !== 'string') {\n                    throw new Error(wrongArgTypeError);\n                }\n            }\n            if (params.hasEnd()) {\n                var endName = params.getIndexEndName();\n                if (endName != __WEBPACK_IMPORTED_MODULE_5__core_util_util__[\"b\" /* MAX_NAME */]) {\n                    throw new Error(tooManyArgsError);\n                } else if (typeof endNode !== 'string') {\n                    throw new Error(wrongArgTypeError);\n                }\n            }\n        } else if (params.getIndex() === PRIORITY_INDEX) {\n            if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n            }\n        } else {\n            Object(Query___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(params.getIndex() instanceof PathIndex_PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n            if (startNode != null && (typeof startNode === 'undefined' ? 'undefined' : Query__typeof(startNode)) === 'object' || endNode != null && (typeof endNode === 'undefined' ? 'undefined' : Query__typeof(endNode)) === 'object') {\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n            }\n        }\n    };\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\n    Query.validateLimit_ = function (params) {\n        if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n        }\n    };\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n        if (this.orderByCalled_ === true) {\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n        }\n    };\n    /**\r\n     * @return {!QueryParams}\r\n     */\n    Query.prototype.getQueryParams = function () {\n        return this.queryParams_;\n    };\n    /**\r\n     * @return {!Reference}\r\n     */\n    Query.prototype.getRef = function () {\n        validateArgCount('Query.ref', 0, 0, arguments.length);\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n        // method gets called.\n        return new Query.__referenceConstructor(this.repo, this.path);\n    };\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n        validateArgCount('Query.on', 2, 4, arguments.length);\n        validation_validateEventType('Query.on', 1, eventType, false);\n        validateCallback('Query.on', 2, callback, false);\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n        if (eventType === 'value') {\n            this.onValueEvent(callback, ret.cancel, ret.context);\n        } else {\n            var callbacks = {};\n            callbacks[eventType] = callback;\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\n        }\n        return callback;\n    };\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n        var container = new EventRegistration_ValueEventRegistration(callback, cancelCallback || null, context || null);\n        this.repo.addEventCallbackForQuery(this, container);\n    };\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n        var container = new EventRegistration_ChildEventRegistration(callbacks, cancelCallback, context);\n        this.repo.addEventCallbackForQuery(this, container);\n    };\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\n    Query.prototype.off = function (eventType, callback, context) {\n        validateArgCount('Query.off', 0, 3, arguments.length);\n        validation_validateEventType('Query.off', 1, eventType, true);\n        validateCallback('Query.off', 2, callback, true);\n        validateContextObject('Query.off', 3, context, true);\n        var container = null;\n        var callbacks = null;\n        if (eventType === 'value') {\n            var valueCallback = callback || null;\n            container = new EventRegistration_ValueEventRegistration(valueCallback, null, context || null);\n        } else if (eventType) {\n            if (callback) {\n                callbacks = {};\n                callbacks[eventType] = callback;\n            }\n            container = new EventRegistration_ChildEventRegistration(callbacks, null, context || null);\n        }\n        this.repo.removeEventCallbackForQuery(this, container);\n    };\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\n        var _this = this;\n        validateArgCount('Query.once', 1, 4, arguments.length);\n        validation_validateEventType('Query.once', 1, eventType, false);\n        validateCallback('Query.once', 2, userCallback, true);\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n        // against the Promise specification.\n        var firstCall = true;\n        var deferred = new __WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        Object(__WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"c\" /* attachDummyErrorHandler */])(deferred.promise);\n        var onceCallback = function onceCallback(snapshot) {\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n            // triggers multiple events (e.g. child_added or child_changed).\n            if (firstCall) {\n                firstCall = false;\n                _this.off(eventType, onceCallback);\n                if (userCallback) {\n                    userCallback.bind(ret.context)(snapshot);\n                }\n                deferred.resolve(snapshot);\n            }\n        };\n        this.on(eventType, onceCallback,\n        /*cancel=*/function (err) {\n            _this.off(eventType, onceCallback);\n            if (ret.cancel) ret.cancel.bind(ret.context)(err);\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\n    Query.prototype.limitToFirst = function (limit) {\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n        if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n        }\n        if (this.queryParams_.hasLimit()) {\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n        }\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n    };\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\n    Query.prototype.limitToLast = function (limit) {\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n        if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\n        }\n        if (this.queryParams_.hasLimit()) {\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n        }\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n    };\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\n    Query.prototype.orderByChild = function (path) {\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n        if (path === '$key') {\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n        } else if (path === '$priority') {\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n        } else if (path === '$value') {\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n        }\n        validation_validatePathString('Query.orderByChild', 1, path, false);\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\n        var parsedPath = new Path(path);\n        if (parsedPath.isEmpty()) {\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n        }\n        var index = new PathIndex_PathIndex(parsedPath);\n        var newParams = this.queryParams_.orderBy(index);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n    };\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\n    Query.prototype.orderByKey = function () {\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n    };\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\n    Query.prototype.orderByPriority = function () {\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n    };\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\n    Query.prototype.orderByValue = function () {\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/true);\n    };\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\n    Query.prototype.startAt = function (value, name) {\n        if (value === void 0) {\n            value = null;\n        }\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\n        validation_validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n        validation_validateKey('Query.startAt', 2, name, true);\n        var newParams = this.queryParams_.startAt(value, name);\n        Query.validateLimit_(newParams);\n        Query.validateQueryEndpoints_(newParams);\n        if (this.queryParams_.hasStart()) {\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n        }\n        // Calling with no params tells us to start at the beginning.\n        if (value === undefined) {\n            value = null;\n            name = null;\n        }\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n    };\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\n    Query.prototype.endAt = function (value, name) {\n        if (value === void 0) {\n            value = null;\n        }\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\n        validation_validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n        validation_validateKey('Query.endAt', 2, name, true);\n        var newParams = this.queryParams_.endAt(value, name);\n        Query.validateLimit_(newParams);\n        Query.validateQueryEndpoints_(newParams);\n        if (this.queryParams_.hasEnd()) {\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n        }\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n    };\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\n    Query.prototype.equalTo = function (value, name) {\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\n        validation_validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n        validation_validateKey('Query.equalTo', 2, name, true);\n        if (this.queryParams_.hasStart()) {\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n        }\n        if (this.queryParams_.hasEnd()) {\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n        }\n        return this.startAt(value, name).endAt(value, name);\n    };\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\n    Query.prototype.toString = function () {\n        validateArgCount('Query.toString', 0, 0, arguments.length);\n        return this.repo.toString() + this.path.toUrlEncodedString();\n    };\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users.\n    Query.prototype.toJSON = function () {\n        // An optional spacer argument is unnecessary for a string.\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\n        return this.toString();\n    };\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\n    Query.prototype.queryObject = function () {\n        return this.queryParams_.getQueryObject();\n    };\n    /**\r\n     * @return {!string}\r\n     */\n    Query.prototype.queryIdentifier = function () {\n        var obj = this.queryObject();\n        var id = Object(__WEBPACK_IMPORTED_MODULE_5__core_util_util__[\"d\" /* ObjectToUniqueKey */])(obj);\n        return id === '{}' ? 'default' : id;\n    };\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\n    Query.prototype.isEqual = function (other) {\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\n        if (!(other instanceof Query)) {\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n            throw new Error(error);\n        }\n        var sameRepo = this.repo === other.repo;\n        var samePath = this.path.equals(other.path);\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n        return sameRepo && samePath && sameQueryIdentifier;\n    };\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n        var ret = { cancel: null, context: null };\n        if (cancelOrContext && context) {\n            ret.cancel = cancelOrContext;\n            validateCallback(fnName, 3, ret.cancel, true);\n            ret.context = context;\n            validateContextObject(fnName, 4, ret.context, true);\n        } else if (cancelOrContext) {\n            // we have either a cancel callback or a context.\n            if ((typeof cancelOrContext === 'undefined' ? 'undefined' : Query__typeof(cancelOrContext)) === 'object' && cancelOrContext !== null) {\n                // it's a context!\n                ret.context = cancelOrContext;\n            } else if (typeof cancelOrContext === 'function') {\n                ret.cancel = cancelOrContext;\n            } else {\n                throw new Error(validation_errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n            }\n        }\n        return ret;\n    };\n    Object.defineProperty(Query.prototype, \"ref\", {\n        get: function get() {\n            return this.getRef();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Query;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/CountedSet.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\nvar CountedSet = function () {\n    function CountedSet() {\n        this.set = {};\n    }\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\n    CountedSet.prototype.add = function (item, val) {\n        this.set[item] = val !== null ? val : true;\n    };\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\n    CountedSet.prototype.contains = function (key) {\n        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"b\" /* contains */])(this.set, key);\n    };\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\n    CountedSet.prototype.get = function (item) {\n        return this.contains(item) ? this.set[item] : undefined;\n    };\n    /**\r\n     * @param {!K} item\r\n     */\n    CountedSet.prototype.remove = function (item) {\n        delete this.set[item];\n    };\n    /**\r\n     * Deletes everything in the set\r\n     */\n    CountedSet.prototype.clear = function () {\n        this.set = {};\n    };\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\n    CountedSet.prototype.isEmpty = function () {\n        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"j\" /* isEmpty */])(this.set);\n    };\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\n    CountedSet.prototype.count = function () {\n        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"h\" /* getCount */])(this.set);\n    };\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\n    CountedSet.prototype.each = function (fn) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"f\" /* forEach */])(this.set, function (k, v) {\n            return fn(k, v);\n        });\n    };\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\n    CountedSet.prototype.keys = function () {\n        var keys = [];\n        Object(__WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"f\" /* forEach */])(this.set, function (k) {\n            keys.push(k);\n        });\n        return keys;\n    };\n    return CountedSet;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/SparseSnapshotTree.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\nvar SparseSnapshotTree_SparseSnapshotTree = function () {\n    function SparseSnapshotTree() {\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\n        this.value_ = null;\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\n        this.children_ = null;\n    }\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\n    SparseSnapshotTree.prototype.find = function (path) {\n        if (this.value_ != null) {\n            return this.value_.getChild(path);\n        } else if (!path.isEmpty() && this.children_ != null) {\n            var childKey = path.getFront();\n            path = path.popFront();\n            if (this.children_.contains(childKey)) {\n                var childTree = this.children_.get(childKey);\n                return childTree.find(path);\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\n    SparseSnapshotTree.prototype.remember = function (path, data) {\n        if (path.isEmpty()) {\n            this.value_ = data;\n            this.children_ = null;\n        } else if (this.value_ !== null) {\n            this.value_ = this.value_.updateChild(path, data);\n        } else {\n            if (this.children_ == null) {\n                this.children_ = new CountedSet();\n            }\n            var childKey = path.getFront();\n            if (!this.children_.contains(childKey)) {\n                this.children_.add(childKey, new SparseSnapshotTree());\n            }\n            var child = this.children_.get(childKey);\n            path = path.popFront();\n            child.remember(path, data);\n        }\n    };\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\n    SparseSnapshotTree.prototype.forget = function (path) {\n        if (path.isEmpty()) {\n            this.value_ = null;\n            this.children_ = null;\n            return true;\n        } else {\n            if (this.value_ !== null) {\n                if (this.value_.isLeafNode()) {\n                    // We're trying to forget a node that doesn't exist\n                    return false;\n                } else {\n                    var value = this.value_;\n                    this.value_ = null;\n                    var self_1 = this;\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n                        self_1.remember(new Path(key), tree);\n                    });\n                    return this.forget(path);\n                }\n            } else if (this.children_ !== null) {\n                var childKey = path.getFront();\n                path = path.popFront();\n                if (this.children_.contains(childKey)) {\n                    var safeToRemove = this.children_.get(childKey).forget(path);\n                    if (safeToRemove) {\n                        this.children_.remove(childKey);\n                    }\n                }\n                if (this.children_.isEmpty()) {\n                    this.children_ = null;\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return true;\n            }\n        }\n    };\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n        if (this.value_ !== null) {\n            func(prefixPath, this.value_);\n        } else {\n            this.forEachChild(function (key, tree) {\n                var path = new Path(prefixPath.toString() + '/' + key);\n                tree.forEachTree(path, func);\n            });\n        }\n    };\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\n        if (this.children_ !== null) {\n            this.children_.each(function (key, tree) {\n                func(key, tree);\n            });\n        }\n    };\n    return SparseSnapshotTree;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/ServerValues.ts\n/* harmony import */ var ServerValues___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\nvar ServerValues__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\nvar generateWithValues = function generateWithValues(values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\nvar resolveDeferredValue = function resolveDeferredValue(value, serverValues) {\n    if (!value || (typeof value === 'undefined' ? 'undefined' : ServerValues__typeof(value)) !== 'object') {\n        return value;\n    } else {\n        Object(ServerValues___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])('.sv' in value, 'Unexpected leaf node or priority contents');\n        return serverValues[value['.sv']];\n    }\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\nvar ServerValues_resolveDeferredValueTree = function resolveDeferredValueTree(tree, serverValues) {\n    var resolvedTree = new SparseSnapshotTree_SparseSnapshotTree();\n    tree.forEachTree(new Path(''), function (path, node) {\n        resolvedTree.remember(path, ServerValues_resolveDeferredValueSnapshot(node, serverValues));\n    });\n    return resolvedTree;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\nvar ServerValues_resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, serverValues) {\n    var rawPri = node.getPriority().val();\n    var priority = resolveDeferredValue(rawPri, serverValues);\n    var newNode;\n    if (node.isLeafNode()) {\n        var leafNode = node;\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\n        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n            return new LeafNode_LeafNode(value, nodeFromJSON_nodeFromJSON(priority));\n        } else {\n            return node;\n        }\n    } else {\n        var childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode_LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n};\n// CONCATENATED MODULE: ./src/database/core/operation/Operation.ts\n/* harmony import */ var Operation___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\nvar OperationSource = function () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    Object(Operation___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/true, false, null,\n  /*tagged=*/false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/true, null,\n  /*tagged=*/false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/true, queryId,\n    /*tagged=*/true);\n  };\n  return OperationSource;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/operation/AckUserWrite.ts\n/* harmony import */ var AckUserWrite___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\nvar AckUserWrite_AckUserWrite = function () {\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\n    function AckUserWrite(\n    /**@inheritDoc */path,\n    /**@inheritDoc */affectedTree,\n    /**@inheritDoc */revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = OperationSource.User;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    AckUserWrite.prototype.operationForChild = function (childName) {\n        if (!this.path.isEmpty()) {\n            Object(AckUserWrite___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n        } else if (this.affectedTree.value != null) {\n            Object(AckUserWrite___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        } else {\n            var childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\n        }\n    };\n    return AckUserWrite;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/ImmutableTree.ts\n/* harmony import */ var ImmutableTree___WEBPACK_IMPORTED_MODULE_2__util__ = __webpack_require__(1);\n/* harmony import */ var ImmutableTree___WEBPACK_IMPORTED_MODULE_3__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\nvar ImmutableTree_EmptyChildren = function EmptyChildren() {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(ImmutableTree___WEBPACK_IMPORTED_MODULE_2__util__[\"A\" /* stringCompare */]);\n    }\n    return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nvar ImmutableTree_ImmutableTree = function () {\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\n    function ImmutableTree(value, children) {\n        if (children === void 0) {\n            children = ImmutableTree_EmptyChildren();\n        }\n        this.value = value;\n        this.children = children;\n    }\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\n    ImmutableTree.fromObject = function (obj) {\n        var tree = ImmutableTree.Empty;\n        Object(ImmutableTree___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(obj, function (childPath, childSnap) {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    };\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\n    ImmutableTree.prototype.isEmpty = function () {\n        return this.value === null && this.children.isEmpty();\n    };\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: Path.Empty, value: this.value };\n        } else {\n            if (relativePath.isEmpty()) {\n                return null;\n            } else {\n                var front = relativePath.getFront();\n                var child = this.children.get(front);\n                if (child !== null) {\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n                    if (childExistingPathAndValue != null) {\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, function () {\n            return true;\n        });\n    };\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\n    ImmutableTree.prototype.subtree = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this;\n        } else {\n            var front = relativePath.getFront();\n            var childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(relativePath.popFront());\n            } else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\n        if (relativePath.isEmpty()) {\n            return new ImmutableTree(toSet, this.children);\n        } else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.set(relativePath.popFront(), toSet);\n            var newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\n    ImmutableTree.prototype.remove = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            if (this.children.isEmpty()) {\n                return ImmutableTree.Empty;\n            } else {\n                return new ImmutableTree(null, this.children);\n            }\n        } else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                var newChild = child.remove(relativePath.popFront());\n                var newChildren = void 0;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                } else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return ImmutableTree.Empty;\n                } else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            } else {\n                return this;\n            }\n        }\n    };\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\n    ImmutableTree.prototype.get = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this.value;\n        } else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                return child.get(relativePath.popFront());\n            } else {\n                return null;\n            }\n        }\n    };\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n        if (relativePath.isEmpty()) {\n            return newTree;\n        } else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.setTree(relativePath.popFront(), newTree);\n            var newChildren = void 0;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            } else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\n    ImmutableTree.prototype.fold = function (fn) {\n        return this.fold_(Path.Empty, fn);\n    };\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n        var accum = {};\n        this.children.inorderTraversal(function (childKey, childTree) {\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    };\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\n    ImmutableTree.prototype.findOnPath = function (path, f) {\n        return this.findOnPath_(path, Path.Empty, f);\n    };\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n        var result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        } else {\n            if (pathToFollow.isEmpty()) {\n                return null;\n            } else {\n                var front = pathToFollow.getFront();\n                var nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n                } else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\n        return this.foreachOnPath_(path, Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n        if (pathToFollow.isEmpty()) {\n            return this;\n        } else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            var front = pathToFollow.getFront();\n            var nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n            } else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\n    ImmutableTree.prototype.foreach = function (f) {\n        this.foreach_(Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            childTree.foreach_(currentRelativePath.child(childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    };\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\n    ImmutableTree.prototype.foreachChild = function (f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    };\n    ImmutableTree.Empty = new ImmutableTree(null);\n    return ImmutableTree;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/operation/ListenComplete.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar ListenComplete_ListenComplete = function () {\n    function ListenComplete(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    ListenComplete.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            return new ListenComplete(this.source, Path.Empty);\n        } else {\n            return new ListenComplete(this.source, this.path.popFront());\n        }\n    };\n    return ListenComplete;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/operation/Overwrite.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar Overwrite_Overwrite = function () {\n    function Overwrite(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    Overwrite.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n        } else {\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\n        }\n    };\n    return Overwrite;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/operation/Merge.ts\n/* harmony import */ var Merge___WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\nvar Merge_Merge = function () {\n    function Merge(\n    /**@inheritDoc */source,\n    /**@inheritDoc */path,\n    /**@inheritDoc */children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    Merge.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            var childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            } else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite_Overwrite(this.source, Path.Empty, childTree.value);\n            } else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, Path.Empty, childTree);\n            }\n        } else {\n            Object(Merge___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, this.path.popFront(), this.children);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    Merge.prototype.toString = function () {\n        return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n    };\n    return Merge;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/CacheNode.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nvar CacheNode = function () {\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\n    function CacheNode(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\n    CacheNode.prototype.isFullyInitialized = function () {\n        return this.fullyInitialized_;\n    };\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\n    CacheNode.prototype.isFiltered = function () {\n        return this.filtered_;\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\n    CacheNode.prototype.isCompleteForPath = function (path) {\n        if (path.isEmpty()) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        var childKey = path.getFront();\n        return this.isCompleteForChild(childKey);\n    };\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\n    CacheNode.prototype.isCompleteForChild = function (key) {\n        return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n    };\n    /**\r\n     * @return {!Node}\r\n     */\n    CacheNode.prototype.getNode = function () {\n        return this.node_;\n    };\n    return CacheNode;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/ViewCache.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\nvar ViewCache_ViewCache = function () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode_ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/false,\n  /*filtered=*/false), new CacheNode(ChildrenNode_ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/false,\n  /*filtered=*/false));\n  return ViewCache;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/Change.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\nvar Change = function () {\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\n        this.type = type;\n        this.snapshotNode = snapshotNode;\n        this.childName = childName;\n        this.oldSnap = oldSnap;\n        this.prevName = prevName;\n    }\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\n    Change.valueChange = function (snapshot) {\n        return new Change(Change.VALUE, snapshot);\n    };\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\n    Change.childAddedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\n    };\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\n    Change.childRemovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n    };\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n    };\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\n    Change.childMovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\n    };\n    //event types\n    /** Event type for a child added */\n    Change.CHILD_ADDED = 'child_added';\n    /** Event type for a child removed */\n    Change.CHILD_REMOVED = 'child_removed';\n    /** Event type for a child changed */\n    Change.CHILD_CHANGED = 'child_changed';\n    /** Event type for a child moved */\n    Change.CHILD_MOVED = 'child_moved';\n    /** Event type for a value change */\n    Change.VALUE = 'value';\n    return Change;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/filter/IndexedFilter.ts\n/* harmony import */ var IndexedFilter___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\nvar IndexedFilter_IndexedFilter = function () {\n    function IndexedFilter(index_) {\n        this.index_ = index_;\n    }\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        Object(IndexedFilter___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        var oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n                } else {\n                    Object(IndexedFilter___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            } else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n            } else {\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        } else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n                    if (oldSnap.hasChild(key)) {\n                        var oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n                        }\n                    } else {\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode_ChildrenNode.EMPTY_NODE;\n        } else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    IndexedFilter.prototype.filtersNodes = function () {\n        return false;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    IndexedFilter.prototype.getIndexedFilter = function () {\n        return this;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    IndexedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    return IndexedFilter;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/ChildChangeAccumulator.ts\n/* harmony import */ var ChildChangeAccumulator___WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * @constructor\r\n */\nvar ChildChangeAccumulator_ChildChangeAccumulator = function () {\n    function ChildChangeAccumulator() {\n        this.changeMap_ = {};\n    }\n    /**\r\n     * @param {!Change} change\r\n     */\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n        var type = change.type;\n        var childKey /** @type {!string} */ = change.childName;\n        Object(__WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"a\" /* assert */])(type == Change.CHILD_ADDED || type == Change.CHILD_CHANGED || type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n        Object(__WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"a\" /* assert */])(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        var oldChange = Object(ChildChangeAccumulator___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"l\" /* safeGet */])(this.changeMap_, childKey);\n        if (oldChange) {\n            var oldType = oldChange.type;\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n            } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_ADDED) {\n                delete this.changeMap_[childKey];\n            } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\n            } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_ADDED) {\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\n            } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n            } else {\n                throw Object(__WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"b\" /* assertionError */])('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n            }\n        } else {\n            this.changeMap_[childKey] = change;\n        }\n    };\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\n    ChildChangeAccumulator.prototype.getChanges = function () {\n        return Object(ChildChangeAccumulator___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"i\" /* getValues */])(this.changeMap_);\n    };\n    return ChildChangeAccumulator;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/CompleteChildSource.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\nvar NoCompleteChildSource_ = function () {\n    function NoCompleteChildSource_() {}\n    /**\r\n     * @inheritDoc\r\n     */\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n        return null;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n        return null;\n    };\n    return NoCompleteChildSource_;\n}();\n\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\nvar CompleteChildSource_WriteTreeCompleteChildSource = function () {\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n        if (optCompleteServerCache_ === void 0) {\n            optCompleteServerCache_ = null;\n        }\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n        var node = this.viewCache_.getEventCache();\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        } else {\n            var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n            return this.writes_.calcCompleteChild(childKey, serverNode);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n        var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        } else {\n            return nodes[0];\n        }\n    };\n    return WriteTreeCompleteChildSource;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/ViewProcessor.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n/**\r\n * @constructor\r\n * @struct\r\n */\nvar ProcessorResult = function () {\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\n    function ProcessorResult(viewCache, changes) {\n        this.viewCache = viewCache;\n        this.changes = changes;\n    }\n    return ProcessorResult;\n}();\n\n/**\r\n * @constructor\r\n */\nvar ViewProcessor_ViewProcessor = function () {\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\n    function ViewProcessor(filter_) {\n        this.filter_ = filter_;\n    }\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\n        Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n        Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n    };\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n        var accumulator = new ChildChangeAccumulator_ChildChangeAccumulator();\n        var newViewCache, filterServerNode;\n        if (operation.type === OperationType.OVERWRITE) {\n            var overwrite = operation;\n            if (overwrite.source.fromUser) {\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n            } else {\n                Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(overwrite.source.fromServer, 'Unknown source.');\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n                // again\n                filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n            }\n        } else if (operation.type === OperationType.MERGE) {\n            var merge = operation;\n            if (merge.source.fromUser) {\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n            } else {\n                Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(merge.source.fromServer, 'Unknown source.');\n                // We filter the node if it's a tagged update or the node has been previously filtered\n                filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n            }\n        } else if (operation.type === OperationType.ACK_USER_WRITE) {\n            var ackUserWrite = operation;\n            if (!ackUserWrite.revert) {\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n            } else {\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n            }\n        } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n        } else {\n            throw Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"b\" /* assertionError */])('Unknown operation type: ' + operation.type);\n        }\n        var changes = accumulator.getChanges();\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n        return new ProcessorResult(newViewCache, changes);\n    };\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n        var eventSnap = newViewCache.getEventCache();\n        if (eventSnap.isFullyInitialized()) {\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n            if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals /** @type {!Node} */(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n                accumulator.push(Change.valueChange(\n                /** @type {!Node} */newViewCache.getCompleteEventSnap()));\n            }\n        }\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n        var oldEventSnap = viewCache.getEventCache();\n        if (writesCache.shadowingWrite(changePath) != null) {\n            // we have a shadowing write, ignore changes\n            return viewCache;\n        } else {\n            var newEventCache = void 0,\n                serverNode = void 0;\n            if (changePath.isEmpty()) {\n                // TODO: figure out how this plays with \"sliding ack windows\"\n                Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n                if (viewCache.getServerCache().isFiltered()) {\n                    // We need to special case this, because we need to only apply writes to complete children, or\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\n                    // writes cannot be guaranteed to be complete\n                    var serverCache = viewCache.getCompleteServerSnap();\n                    var completeChildren = serverCache instanceof ChildrenNode_ChildrenNode ? serverCache : ChildrenNode_ChildrenNode.EMPTY_NODE;\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n                } else {\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n                }\n            } else {\n                var childKey = changePath.getFront();\n                if (childKey == '.priority') {\n                    Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\n                    var oldEventNode = oldEventSnap.getNode();\n                    serverNode = viewCache.getServerCache().getNode();\n                    // we might have overwrites for this priority\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n                    if (updatedPriority != null) {\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n                    } else {\n                        // priority didn't change, keep old node\n                        newEventCache = oldEventSnap.getNode();\n                    }\n                } else {\n                    var childChangePath = changePath.popFront();\n                    // update child\n                    var newEventChild = void 0;\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\n                        serverNode = viewCache.getServerCache().getNode();\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n                        if (eventChildUpdate != null) {\n                            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n                        } else {\n                            // Nothing changed, just keep the old child\n                            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                        }\n                    } else {\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n                    }\n                    if (newEventChild != null) {\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                    } else {\n                        // no complete child available or no change\n                        newEventCache = oldEventSnap.getNode();\n                    }\n                }\n            }\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n        }\n    };\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n        var oldServerSnap = oldViewCache.getServerCache();\n        var newServerCache;\n        var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n        if (changePath.isEmpty()) {\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n        } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n            var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n        } else {\n            var childKey = changePath.getFront();\n            if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n                // We don't update incomplete nodes with updates intended for other listeners\n                return oldViewCache;\n            }\n            var childChangePath = changePath.popFront();\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n            if (childKey == '.priority') {\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n            } else {\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n            }\n        }\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n        var source = new CompleteChildSource_WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n    };\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n        var oldEventSnap = oldViewCache.getEventCache();\n        var newViewCache, newEventCache;\n        var source = new CompleteChildSource_WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n        if (changePath.isEmpty()) {\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n        } else {\n            var childKey = changePath.getFront();\n            if (childKey === '.priority') {\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n            } else {\n                var childChangePath = changePath.popFront();\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                var newChild = void 0;\n                if (childChangePath.isEmpty()) {\n                    // Child overwrite, we can replace the child\n                    newChild = changedSnap;\n                } else {\n                    var childNode = source.getCompleteChild(childKey);\n                    if (childNode != null) {\n                        if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n                            // This is a priority update on an empty node. If this node exists on the server, the\n                            // server will send down the priority in the update, so ignore for now\n                            newChild = childNode;\n                        } else {\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\n                        }\n                    } else {\n                        // There is no complete child node available\n                        newChild = ChildrenNode_ChildrenNode.EMPTY_NODE;\n                    }\n                }\n                if (!oldChild.equals(newChild)) {\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n                } else {\n                    newViewCache = oldViewCache;\n                }\n            }\n        }\n        return newViewCache;\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n        return viewCache.getEventCache().isCompleteForChild(childKey);\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n        var _this = this;\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\n        // window leaving room for new items.  It's important we process these changes first, so we\n        // iterate the changes twice, first processing any that affect items currently in view.\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n        // not the other.\n        var curViewCache = viewCache;\n        changedChildren.foreach(function (relativePath, childNode) {\n            var writePath = path.child(relativePath);\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n            }\n        });\n        changedChildren.foreach(function (relativePath, childNode) {\n            var writePath = path.child(relativePath);\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n            }\n        });\n        return curViewCache;\n    };\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n        merge.foreach(function (relativePath, childNode) {\n            node = node.updateChild(relativePath, childNode);\n        });\n        return node;\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n        var _this = this;\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n        // wait for the complete data update coming soon.\n        if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n            return viewCache;\n        }\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\n        // window leaving room for new items.  It's important we process these changes first, so we\n        // iterate the changes twice, first processing any that affect items currently in view.\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n        // not the other.\n        var curViewCache = viewCache;\n        var viewMergeTree;\n        if (path.isEmpty()) {\n            viewMergeTree = changedChildren;\n        } else {\n            viewMergeTree = ImmutableTree_ImmutableTree.Empty.setTree(path, changedChildren);\n        }\n        var serverNode = viewCache.getServerCache().getNode();\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n            if (serverNode.hasChild(childKey)) {\n                var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n                var newChild = _this.applyMerge_(serverChild, childTree);\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n            }\n        });\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n                var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n            }\n        });\n        return curViewCache;\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n        if (writesCache.shadowingWrite(ackPath) != null) {\n            return viewCache;\n        }\n        // Only filter server node if it is currently filtered\n        var filterServerNode = viewCache.getServerCache().isFiltered();\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n        // now that it won't be shadowed.\n        var serverCache = viewCache.getServerCache();\n        if (affectedTree.value != null) {\n            // This is an overwrite.\n            if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n            } else if (ackPath.isEmpty()) {\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n                // should just re-apply whatever we have in our cache as a merge.\n                var changedChildren_1 = ImmutableTree_ImmutableTree.Empty;\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\n                });\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n            } else {\n                return viewCache;\n            }\n        } else {\n            // This is a merge.\n            var changedChildren_2 = ImmutableTree_ImmutableTree.Empty;\n            affectedTree.foreach(function (mergePath, value) {\n                var serverCachePath = ackPath.child(mergePath);\n                if (serverCache.isCompleteForPath(serverCachePath)) {\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n                }\n            });\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n        var oldServerNode = viewCache.getServerCache();\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n    };\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n        var complete;\n        if (writesCache.shadowingWrite(path) != null) {\n            return viewCache;\n        } else {\n            var source = new CompleteChildSource_WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n            var oldEventCache = viewCache.getEventCache().getNode();\n            var newEventCache = void 0;\n            if (path.isEmpty() || path.getFront() === '.priority') {\n                var newNode = void 0;\n                if (viewCache.getServerCache().isFullyInitialized()) {\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                } else {\n                    var serverChildren = viewCache.getServerCache().getNode();\n                    Object(__WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(serverChildren instanceof ChildrenNode_ChildrenNode, 'serverChildren would be complete if leaf node');\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\n                }\n                newNode = newNode;\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n            } else {\n                var childKey = path.getFront();\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n                if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n                    newChild = oldEventCache.getImmediateChild(childKey);\n                }\n                if (newChild != null) {\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n                } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n                    // No complete child available, delete the existing one, if any\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n                } else {\n                    newEventCache = oldEventCache;\n                }\n                if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                    if (complete.isLeafNode()) {\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n                    }\n                }\n            }\n            complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n        }\n    };\n    return ViewProcessor;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/EventGenerator.ts\n/* harmony import */ var EventGenerator___WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\nvar EventGenerator_EventGenerator = function () {\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\n    function EventGenerator(query_) {\n        this.query_ = query_;\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\n        this.index_ = this.query_.getQueryParams().getIndex();\n    }\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n        var _this = this;\n        var events = [];\n        var moves = [];\n        changes.forEach(function (change) {\n            if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n            }\n        });\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n        return events;\n    };\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n        var _this = this;\n        var filteredChanges = changes.filter(function (change) {\n            return change.type === eventType;\n        });\n        filteredChanges.sort(this.compareChanges_.bind(this));\n        filteredChanges.forEach(function (change) {\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\n            registrations.forEach(function (registration) {\n                if (registration.respondsTo(change.type)) {\n                    events.push(registration.createEvent(materializedChange, _this.query_));\n                }\n            });\n        });\n    };\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n        if (change.type === 'value' || change.type === 'child_removed') {\n            return change;\n        } else {\n            change.prevName = eventCache.getPredecessorChildName(\n            /** @type {!string} */\n            change.childName, change.snapshotNode, this.index_);\n            return change;\n        }\n    };\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\n        if (a.childName == null || b.childName == null) {\n            throw Object(EventGenerator___WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"b\" /* assertionError */])('Should only compare child_ events.');\n        }\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n        return this.index_.compare(aWrapped, bWrapped);\n    };\n    return EventGenerator;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/View.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\nvar View_View = function () {\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\n    function View(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        var params = this.query_.getQueryParams();\n        var indexFilter = new IndexedFilter_IndexedFilter(params.getIndex());\n        var filter = params.getNodeFilter();\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\n        this.processor_ = new ViewProcessor_ViewProcessor(filter);\n        var initialServerCache = initialViewCache.getServerCache();\n        var initialEventCache = initialViewCache.getEventCache();\n        // Don't filter server node with other filter than index, wait for tagged listen\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode_ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        var eventSnap = filter.updateFullNode(ChildrenNode_ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\n        this.viewCache_ = new ViewCache_ViewCache(newEventCache, newServerCache);\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\n        this.eventGenerator_ = new EventGenerator_EventGenerator(this.query_);\n    }\n    /**\r\n     * @return {!Query}\r\n     */\n    View.prototype.getQuery = function () {\n        return this.query_;\n    };\n    /**\r\n     * @return {?Node}\r\n     */\n    View.prototype.getServerCache = function () {\n        return this.viewCache_.getServerCache().getNode();\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\n    View.prototype.getCompleteServerCache = function (path) {\n        var cache = this.viewCache_.getCompleteServerSnap();\n        if (cache) {\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n            // we need to see if it contains the child we're interested in.\n            if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n                return cache.getChild(path);\n            }\n        }\n        return null;\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    View.prototype.isEmpty = function () {\n        return this.eventRegistrations_.length === 0;\n    };\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\n    View.prototype.addEventRegistration = function (eventRegistration) {\n        this.eventRegistrations_.push(eventRegistration);\n    };\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n        var cancelEvents = [];\n        if (cancelError) {\n            Object(__WEBPACK_IMPORTED_MODULE_6__utils_assert__[\"a\" /* assert */])(eventRegistration == null, 'A cancel should cancel all event registrations.');\n            var path_1 = this.query_.path;\n            this.eventRegistrations_.forEach(function (registration) {\n                cancelError /** @type {!Error} */ = cancelError;\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n                if (maybeEvent) {\n                    cancelEvents.push(maybeEvent);\n                }\n            });\n        }\n        if (eventRegistration) {\n            var remaining = [];\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n                var existing = this.eventRegistrations_[i];\n                if (!existing.matches(eventRegistration)) {\n                    remaining.push(existing);\n                } else if (eventRegistration.hasAnyCallback()) {\n                    // We're removing just this one\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n                    break;\n                }\n            }\n            this.eventRegistrations_ = remaining;\n        } else {\n            this.eventRegistrations_ = [];\n        }\n        return cancelEvents;\n    };\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n        if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n            Object(__WEBPACK_IMPORTED_MODULE_6__utils_assert__[\"a\" /* assert */])(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n            Object(__WEBPACK_IMPORTED_MODULE_6__utils_assert__[\"a\" /* assert */])(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n        }\n        var oldViewCache = this.viewCache_;\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n        this.processor_.assertIndexed(result.viewCache);\n        Object(__WEBPACK_IMPORTED_MODULE_6__utils_assert__[\"a\" /* assert */])(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n        this.viewCache_ = result.viewCache;\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n    };\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\n    View.prototype.getInitialEvents = function (registration) {\n        var eventSnap = this.viewCache_.getEventCache();\n        var initialChanges = [];\n        if (!eventSnap.getNode().isLeafNode()) {\n            var eventNode = eventSnap.getNode();\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n                initialChanges.push(Change.childAddedChange(key, childNode));\n            });\n        }\n        if (eventSnap.isFullyInitialized()) {\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\n        }\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n    };\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n        var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n    };\n    return View;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/SyncPoint.ts\n/* harmony import */ var SyncPoint___WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\nvar SyncPoint___referenceConstructor;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nvar SyncPoint_SyncPoint = function () {\n    function SyncPoint() {\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\n        this.views_ = {};\n    }\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n        get: function get() {\n            Object(SyncPoint___WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"a\" /* assert */])(SyncPoint___referenceConstructor, 'Reference.ts has not been loaded');\n            return SyncPoint___referenceConstructor;\n        },\n        set: function set(val) {\n            Object(SyncPoint___WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"a\" /* assert */])(!SyncPoint___referenceConstructor, '__referenceConstructor has already been defined');\n            SyncPoint___referenceConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * @return {boolean}\r\n     */\n    SyncPoint.prototype.isEmpty = function () {\n        return Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"j\" /* isEmpty */])(this.views_);\n    };\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n        var queryId = operation.source.queryId;\n        if (queryId !== null) {\n            var view = Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"l\" /* safeGet */])(this.views_, queryId);\n            Object(SyncPoint___WEBPACK_IMPORTED_MODULE_2__utils_assert__[\"a\" /* assert */])(view != null, 'SyncTree gave us an op for an invalid query.');\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\n        } else {\n            var events_1 = [];\n            Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(this.views_, function (key, view) {\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n            });\n            return events_1;\n        }\n    };\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n        var queryId = query.queryIdentifier();\n        var view = Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"l\" /* safeGet */])(this.views_, queryId);\n        if (!view) {\n            // TODO: make writesCache take flag for complete server node\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n            var eventCacheComplete = false;\n            if (eventCache) {\n                eventCacheComplete = true;\n            } else if (serverCache instanceof ChildrenNode_ChildrenNode) {\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\n                eventCacheComplete = false;\n            } else {\n                eventCache = ChildrenNode_ChildrenNode.EMPTY_NODE;\n                eventCacheComplete = false;\n            }\n            var viewCache = new ViewCache_ViewCache(new CacheNode /** @type {!Node} */(eventCache, eventCacheComplete, false), new CacheNode /** @type {!Node} */(serverCache, serverCacheComplete, false));\n            view = new View_View(query, viewCache);\n            this.views_[queryId] = view;\n        }\n        // This is guaranteed to exist now, we just created anything that was missing\n        view.addEventRegistration(eventRegistration);\n        return view.getInitialEvents(eventRegistration);\n    };\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var queryId = query.queryIdentifier();\n        var removed = [];\n        var cancelEvents = [];\n        var hadCompleteView = this.hasCompleteView();\n        if (queryId === 'default') {\n            // When you do ref.off(...), we search all views for the registration to remove.\n            var self_1 = this;\n            Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(this.views_, function (viewQueryId, view) {\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n                if (view.isEmpty()) {\n                    delete self_1.views_[viewQueryId];\n                    // We'll deal with complete views later.\n                    if (!view.getQuery().getQueryParams().loadsAllData()) {\n                        removed.push(view.getQuery());\n                    }\n                }\n            });\n        } else {\n            // remove the callback from the specific view.\n            var view = Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"l\" /* safeGet */])(this.views_, queryId);\n            if (view) {\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n                if (view.isEmpty()) {\n                    delete this.views_[queryId];\n                    // We'll deal with complete views later.\n                    if (!view.getQuery().getQueryParams().loadsAllData()) {\n                        removed.push(view.getQuery());\n                    }\n                }\n            }\n        }\n        if (hadCompleteView && !this.hasCompleteView()) {\n            // We removed our last complete view.\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n        }\n        return { removed: removed, events: cancelEvents };\n    };\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\n    SyncPoint.prototype.getQueryViews = function () {\n        var _this = this;\n        var values = Object.keys(this.views_).map(function (key) {\n            return _this.views_[key];\n        });\n        return values.filter(function (view) {\n            return !view.getQuery().getQueryParams().loadsAllData();\n        });\n    };\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\n        var serverCache = null;\n        Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"f\" /* forEach */])(this.views_, function (key, view) {\n            serverCache = serverCache || view.getCompleteServerCache(path);\n        });\n        return serverCache;\n    };\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\n    SyncPoint.prototype.viewForQuery = function (query) {\n        var params = query.getQueryParams();\n        if (params.loadsAllData()) {\n            return this.getCompleteView();\n        } else {\n            var queryId = query.queryIdentifier();\n            return Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"l\" /* safeGet */])(this.views_, queryId);\n        }\n    };\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\n        return this.viewForQuery(query) != null;\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    SyncPoint.prototype.hasCompleteView = function () {\n        return this.getCompleteView() != null;\n    };\n    /**\r\n     * @return {?View}\r\n     */\n    SyncPoint.prototype.getCompleteView = function () {\n        var completeView = Object(SyncPoint___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"e\" /* findValue */])(this.views_, function (view) {\n            return view.getQuery().getQueryParams().loadsAllData();\n        });\n        return completeView || null;\n    };\n    return SyncPoint;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/CompoundWrite.ts\n/* harmony import */ var CompoundWrite___WEBPACK_IMPORTED_MODULE_2__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\nvar CompoundWrite_CompoundWrite = function () {\n    function CompoundWrite(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\n    CompoundWrite.prototype.addWrite = function (path, node) {\n        if (path.isEmpty()) {\n            return new CompoundWrite(new ImmutableTree_ImmutableTree(node));\n        } else {\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n            if (rootmost != null) {\n                var rootMostPath = rootmost.path;\n                var value = rootmost.value;\n                var relativePath = Path.relativePath(rootMostPath, path);\n                value = value.updateChild(relativePath, node);\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n            } else {\n                var subtree = new ImmutableTree_ImmutableTree(node);\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\n                return new CompoundWrite(newWriteTree);\n            }\n        }\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\n    CompoundWrite.prototype.addWrites = function (path, updates) {\n        var newWrite = this;\n        Object(CompoundWrite___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"f\" /* forEach */])(updates, function (childKey, node) {\n            newWrite = newWrite.addWrite(path.child(childKey), node);\n        });\n        return newWrite;\n    };\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\n    CompoundWrite.prototype.removeWrite = function (path) {\n        if (path.isEmpty()) {\n            return CompoundWrite.Empty;\n        } else {\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_ImmutableTree.Empty);\n            return new CompoundWrite(newWriteTree);\n        }\n    };\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\n        return this.getCompleteNode(path) != null;\n    };\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\n    CompoundWrite.prototype.getCompleteNode = function (path) {\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n        } else {\n            return null;\n        }\n    };\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\n    CompoundWrite.prototype.getCompleteChildren = function () {\n        var children = [];\n        var node = this.writeTree_.value;\n        if (node != null) {\n            // If it's a leaf node, it has no children; so nothing to do.\n            if (!node.isLeafNode()) {\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n                    children.push(new NamedNode(childName, childNode));\n                });\n            }\n        } else {\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n                if (childTree.value != null) {\n                    children.push(new NamedNode(childName, childTree.value));\n                }\n            });\n        }\n        return children;\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        } else {\n            var shadowingNode = this.getCompleteNode(path);\n            if (shadowingNode != null) {\n                return new CompoundWrite(new ImmutableTree_ImmutableTree(shadowingNode));\n            } else {\n                return new CompoundWrite(this.writeTree_.subtree(path));\n            }\n        }\n    };\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\n    CompoundWrite.prototype.isEmpty = function () {\n        return this.writeTree_.isEmpty();\n    };\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\n    CompoundWrite.prototype.apply = function (node) {\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\n    };\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_ImmutableTree(null));\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\n        if (writeTree.value != null) {\n            // Since there a write is always a leaf, we're done here\n            return node.updateChild(relativePath, writeTree.value);\n        } else {\n            var priorityWrite_1 = null;\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\n                if (childKey === '.priority') {\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                    // to apply priorities to empty nodes that are later filled\n                    Object(__WEBPACK_IMPORTED_MODULE_5__utils_assert__[\"a\" /* assert */])(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                    priorityWrite_1 = childTree.value;\n                } else {\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\n                }\n            });\n            // If there was a priority write, we only apply it if the node is not empty\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n            }\n            return node;\n        }\n    };\n    return CompoundWrite;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/WriteTree.ts\n/* harmony import */ var WriteTree___WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\nvar WriteTree_WriteTree = function () {\n    function WriteTree() {\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\n        this.visibleWrites_ = CompoundWrite_CompoundWrite.Empty;\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        Object(WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({\n            path: path,\n            snap: snap,\n            writeId: writeId,\n            visible: visible\n        });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        Object(WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({\n            path: path,\n            children: changedChildren,\n            writeId: writeId,\n            visible: true\n        });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) {\n            return s.writeId === writeId;\n        });\n        Object(WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                } else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        } else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        } else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            } else {\n                var children = writeToRemove.children;\n                Object(WriteTree___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"f\" /* forEach */])(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            } else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                } else {\n                    var layeredCache = completeServerCache || ChildrenNode_ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        } else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            } else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n                    return null;\n                } else {\n                    var filter = function filter(write) {\n                        return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode_ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode_ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        } else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        } else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        Object(WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        } else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            } else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        } else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            } else {\n                return null;\n            }\n        }\n    };\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        } else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        } else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        } else {\n            return [];\n        }\n    };\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        } else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!Object(WriteTree___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"d\" /* findKey */])(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        } else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite_CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    } else if (writePath.contains(treeRoot)) {\n                        relativePath = Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n                    } else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                } else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    } else if (writePath.contains(treeRoot)) {\n                        relativePath = Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n                        } else {\n                            var child = Object(WriteTree___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"l\" /* safeGet */])(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n                            }\n                        }\n                    } else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                } else {\n                    throw Object(WriteTree___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"b\" /* assertionError */])('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}();\n\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\nvar WriteTreeRef = function () {\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/SyncTree.ts\n/* harmony import */ var SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var SyncTree___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\nvar SyncTree_SyncTree = function () {\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\n    function SyncTree(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\n        this.syncPointTree_ = ImmutableTree_ImmutableTree.Empty;\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\n        this.pendingWriteTree_ = new WriteTree_WriteTree();\n        this.tagToQueryMap_ = {};\n        this.queryToTagMap_ = {};\n    }\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n        // Record pending write.\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n        if (!visible) {\n            return [];\n        } else {\n            return this.applyOperationToSyncPoints_(new Overwrite_Overwrite(OperationSource.User, path, newData));\n        }\n    };\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n        // Record pending merge.\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n        var changeTree = ImmutableTree_ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_Merge(OperationSource.User, path, changeTree));\n    };\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n        if (revert === void 0) {\n            revert = false;\n        }\n        var write = this.pendingWriteTree_.getWrite(writeId);\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n        if (!needToReevaluate) {\n            return [];\n        } else {\n            var affectedTree_1 = ImmutableTree_ImmutableTree.Empty;\n            if (write.snap != null) {\n                // overwrite\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n            } else {\n                Object(__WEBPACK_IMPORTED_MODULE_4__utils_obj__[\"f\" /* forEach */])(write.children, function (pathString, node) {\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n                });\n            }\n            return this.applyOperationToSyncPoints_(new AckUserWrite_AckUserWrite(write.path, affectedTree_1, revert));\n        }\n    };\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n        return this.applyOperationToSyncPoints_(new Overwrite_Overwrite(OperationSource.Server, path, newData));\n    };\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n        var changeTree = ImmutableTree_ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_Merge(OperationSource.Server, path, changeTree));\n    };\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyListenComplete = function (path) {\n        return this.applyOperationToSyncPoints_(new ListenComplete_ListenComplete(OperationSource.Server, path));\n    };\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey != null) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path,\n                queryId = r.queryId;\n            var relativePath = Path.relativePath(queryPath, path);\n            var op = new Overwrite_Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n            return this.applyTaggedOperation_(queryPath, op);\n        } else {\n            // Query must have been removed already\n            return [];\n        }\n    };\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path,\n                queryId = r.queryId;\n            var relativePath = Path.relativePath(queryPath, path);\n            var changeTree = ImmutableTree_ImmutableTree.fromObject(changedChildren);\n            var op = new Merge_Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n            return this.applyTaggedOperation_(queryPath, op);\n        } else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path,\n                queryId = r.queryId;\n            var relativePath = Path.relativePath(queryPath, path);\n            var op = new ListenComplete_ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n            return this.applyTaggedOperation_(queryPath, op);\n        } else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n        var path = query.path;\n        var serverCache = null;\n        var foundAncestorDefaultView = false;\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n            foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n        });\n        var syncPoint = this.syncPointTree_.get(path);\n        if (!syncPoint) {\n            syncPoint = new SyncPoint_SyncPoint();\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n        } else {\n            foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n        }\n        var serverCacheComplete;\n        if (serverCache != null) {\n            serverCacheComplete = true;\n        } else {\n            serverCacheComplete = false;\n            serverCache = ChildrenNode_ChildrenNode.EMPTY_NODE;\n            var subtree = this.syncPointTree_.subtree(path);\n            subtree.foreachChild(function (childName, childSyncPoint) {\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n                if (completeCache) {\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\n                }\n            });\n        }\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n            // We need to track a tag for this query\n            var queryKey = SyncTree.makeQueryKey_(query);\n            Object(SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n            var tag = SyncTree.getNextQueryTag_();\n            this.queryToTagMap_[queryKey] = tag;\n            // Coerce to string to avoid sparse arrays.\n            this.tagToQueryMap_['_' + tag] = queryKey;\n        }\n        var writesCache = this.pendingWriteTree_.childWrites(path);\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\n            events = events.concat(this.setupListener_(query, view));\n        }\n        return events;\n    };\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var _this = this;\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\n        var path = query.path;\n        var maybeSyncPoint = this.syncPointTree_.get(path);\n        var cancelEvents = [];\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n        // not loadsAllData().\n        if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n            if (maybeSyncPoint.isEmpty()) {\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\n            }\n            var removed = removedAndEvents.removed;\n            cancelEvents = removedAndEvents.events;\n            // We may have just removed one of many listeners and can short-circuit this whole process\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n            // properly set up.\n            //\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            var removingDefault = -1 !== removed.findIndex(function (query) {\n                return query.getQueryParams().loadsAllData();\n            });\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n                return parentSyncPoint.hasCompleteView();\n            });\n            if (removingDefault && !covered) {\n                var subtree = this.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (var i = 0; i < newViews.length; ++i) {\n                        var view = newViews[i],\n                            newQuery = view.getQuery();\n                        var listener = this.createListenerForView_(view);\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n                    }\n                } else {\n                    // There's nothing below us, so nothing we need to start listening on\n                }\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    var defaultTag = null;\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n                } else {\n                    removed.forEach(function (queryToRemove) {\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n            // Now, clear all of the tags we're tracking for the removed listens\n            this.removeTags_(removed);\n        } else {\n            // No-op, this listener must've been already removed\n        }\n        return cancelEvents;\n    };\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n        var includeHiddenSets = true;\n        var writeTree = this.pendingWriteTree_;\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n            var relativePath = Path.relativePath(pathSoFar, path);\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\n            if (serverCache) {\n                return serverCache;\n            }\n        });\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n    };\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n                var completeView = maybeChildSyncPoint.getCompleteView();\n                return [completeView];\n            } else {\n                // No complete view here, flatten any deeper listens into an array\n                var views_1 = [];\n                if (maybeChildSyncPoint) {\n                    views_1 = maybeChildSyncPoint.getQueryViews();\n                }\n                Object(__WEBPACK_IMPORTED_MODULE_4__utils_obj__[\"f\" /* forEach */])(childMap, function (key, childViews) {\n                    views_1 = views_1.concat(childViews);\n                });\n                return views_1;\n            }\n        });\n    };\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\n    SyncTree.prototype.removeTags_ = function (queries) {\n        for (var j = 0; j < queries.length; ++j) {\n            var removedQuery = queries[j];\n            if (!removedQuery.getQueryParams().loadsAllData()) {\n                // We should have a tag for this\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n                delete this.queryToTagMap_[removedQueryKey];\n                delete this.tagToQueryMap_['_' + removedQueryTag];\n            }\n        }\n    };\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\n    SyncTree.queryForListening_ = function (query) {\n        if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n            // We treat queries that load all data as default queries\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n            // from Query\n            return query.getRef();\n        } else {\n            return query;\n        }\n    };\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\n    SyncTree.prototype.setupListener_ = function (query, view) {\n        var path = query.path;\n        var tag = this.tagForQuery_(query);\n        var listener = this.createListenerForView_(view);\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n        var subtree = this.syncPointTree_.subtree(path);\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n        // may need to shadow other listens as well.\n        if (tag) {\n            Object(SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n        } else {\n            // Shadow everything at or below this location, this is a default listener.\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n                if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\n                } else {\n                    // No default listener here, flatten any deeper queries into an array\n                    var queries_1 = [];\n                    if (maybeChildSyncPoint) {\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n                            return view.getQuery();\n                        }));\n                    }\n                    Object(__WEBPACK_IMPORTED_MODULE_4__utils_obj__[\"f\" /* forEach */])(childMap, function (key, childQueries) {\n                        queries_1 = queries_1.concat(childQueries);\n                    });\n                    return queries_1;\n                }\n            });\n            for (var i = 0; i < queriesToStop.length; ++i) {\n                var queryToStop = queriesToStop[i];\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n            }\n        }\n        return events;\n    };\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\n    SyncTree.prototype.createListenerForView_ = function (view) {\n        var _this = this;\n        var query = view.getQuery();\n        var tag = this.tagForQuery_(query);\n        return {\n            hashFn: function hashFn() {\n                var cache = view.getServerCache() || ChildrenNode_ChildrenNode.EMPTY_NODE;\n                return cache.hash();\n            },\n            onComplete: function onComplete(status) {\n                if (status === 'ok') {\n                    if (tag) {\n                        return _this.applyTaggedListenComplete(query.path, tag);\n                    } else {\n                        return _this.applyListenComplete(query.path);\n                    }\n                } else {\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                    var error = Object(SyncTree___WEBPACK_IMPORTED_MODULE_1__util_util__[\"l\" /* errorForServerCode */])(status, query);\n                    return _this.removeEventRegistration(query,\n                    /*eventRegistration*/null, error);\n                }\n            }\n        };\n    };\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\n    SyncTree.makeQueryKey_ = function (query) {\n        return query.path.toString() + '$' + query.queryIdentifier();\n    };\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\n    SyncTree.parseQueryKey_ = function (queryKey) {\n        var splitIndex = queryKey.indexOf('$');\n        Object(SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n        return {\n            queryId: queryKey.substr(splitIndex + 1),\n            path: new Path(queryKey.substr(0, splitIndex))\n        };\n    };\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\n        return this.tagToQueryMap_['_' + tag];\n    };\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\n    SyncTree.prototype.tagForQuery_ = function (query) {\n        var queryKey = SyncTree.makeQueryKey_(query);\n        return Object(__WEBPACK_IMPORTED_MODULE_4__utils_obj__[\"l\" /* safeGet */])(this.queryToTagMap_, queryKey);\n    };\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\n    SyncTree.getNextQueryTag_ = function () {\n        return SyncTree.nextQueryTag_++;\n    };\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n        var syncPoint = this.syncPointTree_.get(queryPath);\n        Object(SyncTree___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(syncPoint, \"Missing sync point for query tag that we're tracking\");\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n        return syncPoint.applyOperation(operation, writesCache,\n        /*serverCache=*/null);\n    };\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n        * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n        * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n        return this.applyOperationHelper_(operation, this.syncPointTree_,\n        /*serverCache=*/null, this.pendingWriteTree_.childWrites(Path.Empty));\n    };\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        if (operation.path.isEmpty()) {\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n        } else {\n            var syncPoint = syncPointTree.get(Path.Empty);\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\n            if (serverCache == null && syncPoint != null) {\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n            }\n            var events = [];\n            var childName = operation.path.getFront();\n            var childOperation = operation.operationForChild(childName);\n            var childTree = syncPointTree.children.get(childName);\n            if (childTree && childOperation) {\n                var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n                var childWritesCache = writesCache.child(childName);\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n            if (syncPoint) {\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n            }\n            return events;\n        }\n    };\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        var _this = this;\n        var syncPoint = syncPointTree.get(Path.Empty);\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n        }\n        var events = [];\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\n            var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n            var childWritesCache = writesCache.child(childName);\n            var childOperation = operation.operationForChild(childName);\n            if (childOperation) {\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n        });\n        if (syncPoint) {\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n        }\n        return events;\n    };\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\n    SyncTree.nextQueryTag_ = 1;\n    return SyncTree;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/SnapshotHolder.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\nvar SnapshotHolder_SnapshotHolder = function () {\n    function SnapshotHolder() {\n        this.rootNode_ = ChildrenNode_ChildrenNode.EMPTY_NODE;\n    }\n    SnapshotHolder.prototype.getNode = function (path) {\n        return this.rootNode_.getChild(path);\n    };\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    };\n    return SnapshotHolder;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/AuthTokenProvider.ts\n/* harmony import */ var AuthTokenProvider___WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nvar AuthTokenProvider = function () {\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\n    function AuthTokenProvider(app_) {\n        this.app_ = app_;\n    }\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null,\n        // .catch\n        function (error) {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                Object(AuthTokenProvider___WEBPACK_IMPORTED_MODULE_0__util_util__[\"s\" /* log */])('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            } else {\n                return Promise.reject(error);\n            }\n        });\n    };\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n        var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n        if ('credential' in this.app_.options) {\n            errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n        } else if ('serviceAccount' in this.app_.options) {\n            errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n        } else {\n            errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n        }\n        Object(AuthTokenProvider___WEBPACK_IMPORTED_MODULE_0__util_util__[\"B\" /* warn */])(errorMessage);\n    };\n    return AuthTokenProvider;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/stats/StatsListener.ts\n/* harmony import */ var StatsListener___WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\nvar StatsListener = function () {\n    function StatsListener(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    StatsListener.prototype.get = function () {\n        var newStats = this.collection_.get();\n        var delta = Object(StatsListener___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"a\" /* clone */])(newStats);\n        if (this.last_) {\n            Object(StatsListener___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"f\" /* forEach */])(this.last_, function (stat, value) {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    };\n    return StatsListener;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/stats/StatsReporter.ts\n/* harmony import */ var StatsReporter___WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var StatsReporter___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\nvar StatsReporter_StatsReporter = function () {\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\n    function StatsReporter(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        Object(StatsReporter___WEBPACK_IMPORTED_MODULE_1__util_util__[\"x\" /* setTimeoutNonBlocking */])(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    StatsReporter.prototype.includeStat = function (stat) {\n        this.statsToReport_[stat] = true;\n    };\n    StatsReporter.prototype.reportStats_ = function () {\n        var _this = this;\n        var stats = this.statsListener_.get();\n        var reportedStats = {};\n        var haveStatsToReport = false;\n        Object(StatsReporter___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"f\" /* forEach */])(stats, function (stat, value) {\n            if (value > 0 && Object(StatsReporter___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"b\" /* contains */])(_this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        Object(StatsReporter___WEBPACK_IMPORTED_MODULE_1__util_util__[\"x\" /* setTimeoutNonBlocking */])(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    };\n    return StatsReporter;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/EventQueue.ts\n/* harmony import */ var EventQueue___WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\nvar EventQueue = function () {\n    function EventQueue() {\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\n        this.eventLists_ = [];\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\n        this.recursionDepth_ = 0;\n    }\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\n    EventQueue.prototype.queueEvents = function (eventDataList) {\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n        var currList = null;\n        for (var i = 0; i < eventDataList.length; i++) {\n            var eventData = eventDataList[i];\n            var eventPath = eventData.getPath();\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\n                this.eventLists_.push(currList);\n                currList = null;\n            }\n            if (currList === null) {\n                currList = new EventList(eventPath);\n            }\n            currList.add(eventData);\n        }\n        if (currList) {\n            this.eventLists_.push(currList);\n        }\n    };\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n        this.queueEvents(eventDataList);\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n            return eventPath.equals(path);\n        });\n    };\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n        this.queueEvents(eventDataList);\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n        });\n    };\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n        this.recursionDepth_++;\n        var sentAll = true;\n        for (var i = 0; i < this.eventLists_.length; i++) {\n            var eventList = this.eventLists_[i];\n            if (eventList) {\n                var eventPath = eventList.getPath();\n                if (predicate(eventPath)) {\n                    this.eventLists_[i].raise();\n                    this.eventLists_[i] = null;\n                } else {\n                    sentAll = false;\n                }\n            }\n        }\n        if (sentAll) {\n            this.eventLists_ = [];\n        }\n        this.recursionDepth_--;\n    };\n    return EventQueue;\n}();\n\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\nvar EventList = function () {\n    function EventList(path_) {\n        this.path_ = path_;\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\n        this.events_ = [];\n    }\n    /**\r\n     * @param {!Event} eventData\r\n     */\n    EventList.prototype.add = function (eventData) {\n        this.events_.push(eventData);\n    };\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\n    EventList.prototype.raise = function () {\n        for (var i = 0; i < this.events_.length; i++) {\n            var eventData = this.events_[i];\n            if (eventData !== null) {\n                this.events_[i] = null;\n                var eventFn = eventData.getEventRunner();\n                if (EventQueue___WEBPACK_IMPORTED_MODULE_0__util_util__[\"u\" /* logger */]) {\n                    Object(EventQueue___WEBPACK_IMPORTED_MODULE_0__util_util__[\"s\" /* log */])('event: ' + eventData.toString());\n                }\n                Object(EventQueue___WEBPACK_IMPORTED_MODULE_0__util_util__[\"m\" /* exceptionGuard */])(eventFn);\n            }\n        }\n    };\n    /**\r\n     * @return {!Path}\r\n     */\n    EventList.prototype.getPath = function () {\n        return this.path_;\n    };\n    return EventList;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/EventEmitter.ts\n/* harmony import */ var EventEmitter___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nvar EventEmitter = function () {\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\n    function EventEmitter(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        Object(EventEmitter___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\n    EventEmitter.prototype.trigger = function (eventType) {\n        var var_args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            var_args[_i - 1] = arguments[_i];\n        }\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            var listeners = this.listeners_[eventType].slice();\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, var_args);\n            }\n        }\n    };\n    EventEmitter.prototype.on = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback: callback, context: context });\n        var eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    };\n    EventEmitter.prototype.off = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        var listeners = this.listeners_[eventType] || [];\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\n        Object(EventEmitter___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.allowedEvents_.find(function (et) {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    };\n    return EventEmitter;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/util/VisibilityMonitor.ts\n/* harmony import */ var VisibilityMonitor___WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar VisibilityMonitor___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n/**\r\n * @extends {EventEmitter}\r\n */\nvar VisibilityMonitor = function (_super) {\n    VisibilityMonitor___extends(VisibilityMonitor, _super);\n    function VisibilityMonitor() {\n        var _this = _super.call(this, ['visible']) || this;\n        var hidden;\n        var visibilityChange;\n        if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            } else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            } else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            } else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        _this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, function () {\n                var visible = !document[hidden];\n                if (visible !== _this.visible_) {\n                    _this.visible_ = visible;\n                    _this.trigger('visible', visible);\n                }\n            }, false);\n        }\n        return _this;\n    }\n    VisibilityMonitor.getInstance = function () {\n        return new VisibilityMonitor();\n    };\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n        Object(VisibilityMonitor___WEBPACK_IMPORTED_MODULE_1__utils_assert__[\"a\" /* assert */])(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    };\n    return VisibilityMonitor;\n}(EventEmitter);\n\n// CONCATENATED MODULE: ./src/database/core/util/OnlineMonitor.ts\n/* harmony import */ var OnlineMonitor___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_environment__ = __webpack_require__(6);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar OnlineMonitor___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\nvar OnlineMonitor = function (_super) {\n    OnlineMonitor___extends(OnlineMonitor, _super);\n    function OnlineMonitor() {\n        var _this = _super.call(this, ['online']) || this;\n        _this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !Object(__WEBPACK_IMPORTED_MODULE_2__utils_environment__[\"a\" /* isMobileCordova */])()) {\n            window.addEventListener('online', function () {\n                if (!_this.online_) {\n                    _this.online_ = true;\n                    _this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', function () {\n                if (_this.online_) {\n                    _this.online_ = false;\n                    _this.trigger('online', false);\n                }\n            }, false);\n        }\n        return _this;\n    }\n    OnlineMonitor.getInstance = function () {\n        return new OnlineMonitor();\n    };\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n        Object(OnlineMonitor___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    OnlineMonitor.prototype.currentlyOnline = function () {\n        return this.online_;\n    };\n    return OnlineMonitor;\n}(EventEmitter);\n\n// CONCATENATED MODULE: ./src/utils/jwt.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__database_core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__json__ = __webpack_require__(3);\nvar jwt__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\nvar decode = function decode(token) {\n    var header = {},\n        claims = {},\n        data = {},\n        signature = '';\n    try {\n        var parts = token.split('.');\n        header = Object(__WEBPACK_IMPORTED_MODULE_1__json__[\"a\" /* jsonEval */])(Object(__WEBPACK_IMPORTED_MODULE_0__database_core_util_util__[\"e\" /* base64Decode */])(parts[0]) || '');\n        claims = Object(__WEBPACK_IMPORTED_MODULE_1__json__[\"a\" /* jsonEval */])(Object(__WEBPACK_IMPORTED_MODULE_0__database_core_util_util__[\"e\" /* base64Decode */])(parts[1]) || '');\n        signature = parts[2];\n        data = claims['d'] || {};\n        delete claims['d'];\n    } catch (e) {}\n    return {\n        header: header,\n        claims: claims,\n        data: data,\n        signature: signature\n    };\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\nvar isValidTimestamp = function isValidTimestamp(token) {\n    var claims = decode(token).claims,\n        now = Math.floor(new Date().getTime() / 1000),\n        validSince,\n        validUntil;\n    if ((typeof claims === 'undefined' ? 'undefined' : jwt__typeof(claims)) === 'object') {\n        if (claims.hasOwnProperty('nbf')) {\n            validSince = claims['nbf'];\n        } else if (claims.hasOwnProperty('iat')) {\n            validSince = claims['iat'];\n        }\n        if (claims.hasOwnProperty('exp')) {\n            validUntil = claims['exp'];\n        } else {\n            // token will expire after 24h by default\n            validUntil = validSince + 86400;\n        }\n    }\n    return now && validSince && validUntil && now >= validSince && now <= validUntil;\n};\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\nvar issuedAtTime = function issuedAtTime(token) {\n    var claims = decode(token).claims;\n    if ((typeof claims === 'undefined' ? 'undefined' : jwt__typeof(claims)) === 'object' && claims.hasOwnProperty('iat')) {\n        return claims['iat'];\n    }\n    return null;\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\r\n * signature.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\nvar isValidFormat = function isValidFormat(token) {\n    var decoded = decode(token),\n        claims = decoded.claims;\n    return !!decoded.signature && !!claims && (typeof claims === 'undefined' ? 'undefined' : jwt__typeof(claims)) === 'object' && claims.hasOwnProperty('iat');\n};\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\nvar isAdmin = function isAdmin(token) {\n    var claims = decode(token).claims;\n    return (typeof claims === 'undefined' ? 'undefined' : jwt__typeof(claims)) === 'object' && claims['admin'] === true;\n};\n// CONCATENATED MODULE: ./src/database/realtime/polling/PacketReceiver.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\nvar PacketReceiver = function () {\n    /**\r\n     * @param onMessage_\r\n     */\n    function PacketReceiver(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    };\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n        var _this = this;\n        this.pendingResponses[requestNum] = data;\n        var _loop_1 = function _loop_1() {\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n            delete this_1.pendingResponses[this_1.currentResponseNum];\n            var _loop_2 = function _loop_2(i) {\n                if (toProcess[i]) {\n                    Object(__WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"m\" /* exceptionGuard */])(function () {\n                        _this.onMessage_(toProcess[i]);\n                    });\n                }\n            };\n            for (var i = 0; i < toProcess.length; ++i) {\n                _loop_2(i);\n            }\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n                if (this_1.onClose) {\n                    this_1.onClose();\n                    this_1.onClose = null;\n                }\n                return \"break\";\n            }\n            this_1.currentResponseNum++;\n        };\n        var this_1 = this;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\") break;\n        }\n    };\n    return PacketReceiver;\n}();\n\n// CONCATENATED MODULE: ./src/database/realtime/BrowserPollConnection.ts\n/* harmony import */ var BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_stats_StatsManager__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Constants__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_json__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_environment__ = __webpack_require__(6);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n// URL query parameters associated with longpolling\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\nvar BrowserPollConnection_BrowserPollConnection = function () {\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"t\" /* logWrapper */])(connId);\n        this.stats_ = __WEBPACK_IMPORTED_MODULE_2__core_stats_StatsManager__[\"a\" /* StatsManager */].getCollection(repoInfo);\n        this.urlFn = function (params) {\n            return repoInfo.connectionURL(__WEBPACK_IMPORTED_MODULE_4__Constants__[\"d\" /* LONG_POLLING */], params);\n        };\n    }\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n        var _this = this;\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(function () {\n            _this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            _this.onClosed_();\n            _this.connectTimeoutTimer_ = null;\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"n\" /* executeWhenDOMReady */])(function () {\n            if (_this.isClosed_) return;\n            //Set up a callback that gets triggered once a connection is set up.\n            _this.scriptTagHolder = new BrowserPollConnection_FirebaseIFrameScriptHolder(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var command = args[0],\n                    arg1 = args[1],\n                    arg2 = args[2],\n                    arg3 = args[3],\n                    arg4 = args[4];\n                _this.incrementIncomingBytes_(args);\n                if (!_this.scriptTagHolder) return; // we closed the connection.\n                if (_this.connectTimeoutTimer_) {\n                    clearTimeout(_this.connectTimeoutTimer_);\n                    _this.connectTimeoutTimer_ = null;\n                }\n                _this.everConnected_ = true;\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\n                    _this.id = arg1;\n                    _this.password = arg2;\n                } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        _this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\n                            _this.onClosed_();\n                        });\n                    } else {\n                        _this.onClosed_();\n                    }\n                } else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var pN = args[0],\n                    data = args[1];\n                _this.incrementIncomingBytes_(args);\n                _this.myPacketOrderer.handleResponse(pN, data);\n            }, function () {\n                _this.onClosed_();\n            }, _this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            var urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n            urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"h\" /* VERSION_PARAM */]] = __WEBPACK_IMPORTED_MODULE_4__Constants__[\"e\" /* PROTOCOL_VERSION */];\n            if (_this.transportSessionId) {\n                urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"g\" /* TRANSPORT_SESSION_PARAM */]] = _this.transportSessionId;\n            }\n            if (_this.lastSessionId) {\n                urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"c\" /* LAST_SESSION_PARAM */]] = _this.lastSessionId;\n            }\n            if (!Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])() && typeof location !== 'undefined' && location.href && location.href.indexOf(__WEBPACK_IMPORTED_MODULE_4__Constants__[\"a\" /* FORGE_DOMAIN */]) !== -1) {\n                urlParams[__WEBPACK_IMPORTED_MODULE_4__Constants__[\"f\" /* REFERER_PARAM */]] = __WEBPACK_IMPORTED_MODULE_4__Constants__[\"b\" /* FORGE_REF */];\n            }\n            var connectURL = _this.urlFn(urlParams);\n            _this.log_('Connecting via long-poll to ' + connectURL);\n            _this.scriptTagHolder.addTag(connectURL, function () {\n                /* do nothing */\n            });\n        });\n    };\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\n    BrowserPollConnection.prototype.start = function () {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    };\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\n    BrowserPollConnection.forceAllow = function () {\n        BrowserPollConnection.forceAllow_ = true;\n    };\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\n    BrowserPollConnection.forceDisallow = function () {\n        BrowserPollConnection.forceDisallow_ = true;\n    };\n    // Static method, use string literal so it can be accessed in a generic way\n    BrowserPollConnection.isAvailable = function () {\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n        return BrowserPollConnection.forceAllow_ || !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"p\" /* isChromeExtensionContentScript */])() && !Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"r\" /* isWindowsStoreApp */])() && !Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])();\n    };\n    /**\r\n     * No-op for polling\r\n     */\n    BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\n    BrowserPollConnection.prototype.shutdown_ = function () {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    };\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\n    BrowserPollConnection.prototype.onClosed_ = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    };\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\n    BrowserPollConnection.prototype.close = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    };\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\n    BrowserPollConnection.prototype.send = function (data) {\n        var dataStr = Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        var base64data = Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"f\" /* base64Encode */])(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        var dataSegs = Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"z\" /* splitStringBySize */])(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (var i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    };\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n        if (Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])()) return;\n        this.myDisconnFrame = document.createElement('iframe');\n        var urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    };\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        var bytesReceived = Object(__WEBPACK_IMPORTED_MODULE_5__utils_json__[\"b\" /* stringify */])(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    };\n    return BrowserPollConnection;\n}();\n\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\nvar BrowserPollConnection_FirebaseIFrameScriptHolder = function () {\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\n        this.outstandingRequests = new CountedSet();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"a\" /* LUIDGenerator */])();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            var script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                var currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            var iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            } catch (e) {\n                Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"s\" /* log */])('frame writing exception');\n                if (e.stack) {\n                    Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"s\" /* log */])(e.stack);\n                }\n                Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"s\" /* log */])(e);\n            }\n        } else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\n        var iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                var a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"s\" /* log */])('No IE domain setting required');\n                }\n            } catch (e) {\n                var domain = document.domain;\n                iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n            }\n        } else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        } else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n        } else if (iframe.document) {\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    };\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\n    FirebaseIFrameScriptHolder.prototype.close = function () {\n        var _this = this;\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n            this.myIFrame.doc.body.innerHTML = '';\n            setTimeout(function () {\n                if (_this.myIFrame !== null) {\n                    document.body.removeChild(_this.myIFrame);\n                    _this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        if (Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])() && this.myID) {\n            var urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            var theURL = this.urlFn(urlParams);\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n        }\n        // Protect from being called recursively.\n        var onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    };\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) {}\n    };\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive && this.sendNewPolls && this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            var urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            var theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            var curDataString = '';\n            var i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                var nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    var theSeg = this.pendingSegs.shift();\n                    curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n                    i++;\n                } else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        } else {\n            return false;\n        }\n    };\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    };\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n        var _this = this;\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial, 1);\n        var doNewRequest = function doNewRequest() {\n            _this.outstandingRequests.remove(serial);\n            _this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        var readyStateCB = function readyStateCB() {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    };\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n        var _this = this;\n        if (Object(__WEBPACK_IMPORTED_MODULE_6__utils_environment__[\"b\" /* isNodeSdk */])()) {\n            this.doNodeLongPoll(url, loadCB);\n        } else {\n            setTimeout(function () {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!_this.sendNewPolls) return;\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\n                    newScript_1.type = 'text/javascript';\n                    newScript_1.async = true;\n                    newScript_1.src = url;\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\n                        var rstate = newScript_1.readyState;\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\n                            if (newScript_1.parentNode) {\n                                newScript_1.parentNode.removeChild(newScript_1);\n                            }\n                            loadCB();\n                        }\n                    };\n                    newScript_1.onerror = function () {\n                        Object(BrowserPollConnection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"s\" /* log */])('Long-poll script failed to load: ' + url);\n                        _this.sendNewPolls = false;\n                        _this.close();\n                    };\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\n                } catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    };\n    return FirebaseIFrameScriptHolder;\n}();\n\n// CONCATENATED MODULE: ./src/database/realtime/TransportManager.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__ = __webpack_require__(18);\n/* harmony import */ var TransportManager___WEBPACK_IMPORTED_MODULE_2__core_util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\nvar TransportManager_TransportManager = function () {\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\n    function TransportManager(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\n        get: function get() {\n            return [BrowserPollConnection_BrowserPollConnection, __WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__[\"a\" /* WebSocketConnection */]];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\n        var isWebSocketsAvailable = __WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__[\"a\" /* WebSocketConnection */] && __WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__[\"a\" /* WebSocketConnection */]['isAvailable']();\n        var isSkipPollConnection = isWebSocketsAvailable && !__WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__[\"a\" /* WebSocketConnection */].previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) Object(TransportManager___WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"B\" /* warn */])(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [__WEBPACK_IMPORTED_MODULE_1__WebSocketConnection__[\"a\" /* WebSocketConnection */]];\n        } else {\n            var transports_1 = this.transports_ = [];\n            Object(TransportManager___WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"i\" /* each */])(TransportManager.ALL_TRANSPORTS, function (i, transport) {\n                if (transport && transport['isAvailable']()) {\n                    transports_1.push(transport);\n                }\n            });\n        }\n    };\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\n    TransportManager.prototype.initialTransport = function () {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        } else {\n            throw new Error('No transports available');\n        }\n    };\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\n    TransportManager.prototype.upgradeTransport = function () {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        } else {\n            return null;\n        }\n    };\n    return TransportManager;\n}();\n\n// CONCATENATED MODULE: ./src/database/realtime/Connection.ts\n/* harmony import */ var Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_storage_storage__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Constants__ = __webpack_require__(9);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n// Abort upgrade attempt if it takes longer than 60s.\nvar UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\nvar Connection_Connection = function () {\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* CONNECTING */;\n        this.log_ = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"t\" /* logWrapper */])('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager_TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\n    Connection.prototype.start_ = function () {\n        var _this = this;\n        var conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        var onMessageReceived = this.connReceiver_(this.conn_);\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\n        setTimeout(function () {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\n        if (healthyTimeout_ms > 0) {\n            this.healthyTimeout_ = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"x\" /* setTimeoutNonBlocking */])(function () {\n                _this.healthyTimeout_ = null;\n                if (!_this.isHealthy_) {\n                    if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n                        _this.isHealthy_ = true;\n                        _this.conn_.markConnectionHealthy();\n                    } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    } else {\n                        _this.log_('Closing unhealthy connection after timeout.');\n                        _this.close();\n                    }\n                }\n            }, Math.floor(healthyTimeout_ms));\n        }\n    };\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\n    Connection.prototype.nextTransportId_ = function () {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    };\n    Connection.prototype.disconnReceiver_ = function (conn) {\n        var _this = this;\n        return function (everConnected) {\n            if (conn === _this.conn_) {\n                _this.onConnectionLost_(everConnected);\n            } else if (conn === _this.secondaryConn_) {\n                _this.log_('Secondary connection lost.');\n                _this.onSecondaryConnectionLost_();\n            } else {\n                _this.log_('closing an old connection');\n            }\n        };\n    };\n    Connection.prototype.connReceiver_ = function (conn) {\n        var _this = this;\n        return function (message) {\n            if (_this.state_ != 2 /* DISCONNECTED */) {\n                    if (conn === _this.rx_) {\n                        _this.onPrimaryMessageReceived_(message);\n                    } else if (conn === _this.secondaryConn_) {\n                        _this.onSecondaryMessageReceived_(message);\n                    } else {\n                        _this.log_('message on old connection');\n                    }\n                }\n        };\n    };\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\n    Connection.prototype.sendRequest = function (dataMsg) {\n        // wrap in a data message envelope and send it on\n        var msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    };\n    Connection.prototype.tryCleanupConnection = function () {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    };\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            var cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            } else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            } else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    };\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n        var layer = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"w\" /* requireKey */])('t', parsedData);\n        var data = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"w\" /* requireKey */])('d', parsedData);\n        if (layer == 'c') {\n            this.onSecondaryControl_(data);\n        } else if (layer == 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        } else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    };\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        } else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    };\n    Connection.prototype.proceedWithUpgrade_ = function () {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    };\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        var layer = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"w\" /* requireKey */])('t', parsedData);\n        var data = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"w\" /* requireKey */])('d', parsedData);\n        if (layer == 'c') {\n            this.onControl_(data);\n        } else if (layer == 'd') {\n            this.onDataMessage_(data);\n        }\n    };\n    Connection.prototype.onDataMessage_ = function (message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    };\n    Connection.prototype.onPrimaryResponse_ = function () {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    };\n    Connection.prototype.onControl_ = function (controlData) {\n        var cmd = Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"w\" /* requireKey */])(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            var payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                this.onHandshake_(payload);\n            } else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            } else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            } else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            } else if (cmd === CONTROL_ERROR) {\n                Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"k\" /* error */])('Server Error: ' + payload);\n            } else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            } else {\n                Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"k\" /* error */])('Unknown control packet command: ' + cmd);\n            }\n        }\n    };\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\n    Connection.prototype.onHandshake_ = function (handshake) {\n        var timestamp = handshake.ts;\n        var version = handshake.v;\n        var host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.updateHost(host);\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ == 0 /* CONNECTING */) {\n                this.conn_.start();\n                this.onConnectionEstablished_(this.conn_, timestamp);\n                if (__WEBPACK_IMPORTED_MODULE_2__Constants__[\"e\" /* PROTOCOL_VERSION */] !== version) {\n                    Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"B\" /* warn */])('Protocol version mismatch detected');\n                }\n                // TODO: do we want to upgrade? when? maybe a delay?\n                this.tryStartUpgrade_();\n            }\n    };\n    Connection.prototype.tryStartUpgrade_ = function () {\n        var conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    };\n    Connection.prototype.startUpgrade_ = function (conn) {\n        var _this = this;\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        var onMessage = this.connReceiver_(this.secondaryConn_);\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"x\" /* setTimeoutNonBlocking */])(function () {\n            if (_this.secondaryConn_) {\n                _this.log_('Timed out trying to upgrade.');\n                _this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    };\n    Connection.prototype.onReset_ = function (host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.updateHost(host);\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* CONNECTED */) {\n                this.close();\n            } else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    };\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n        var _this = this;\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        } else {\n            Object(Connection___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"x\" /* setTimeoutNonBlocking */])(function () {\n                _this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    };\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n                this.log_('sending ping on primary.');\n                this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n            }\n    };\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\n        var conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    };\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n                this.log_('Realtime connection failed.');\n                // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n                if (this.repoInfo_.isCacheableHost()) {\n                    __WEBPACK_IMPORTED_MODULE_1__core_storage_storage__[\"a\" /* PersistentStorage */].remove('host:' + this.repoInfo_.host);\n                    // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                    this.repoInfo_.internalHost = this.repoInfo_.host;\n                }\n            } else if (this.state_ === 1 /* CONNECTED */) {\n                this.log_('Realtime connection lost.');\n            }\n        this.close();\n    };\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    };\n    Connection.prototype.sendData_ = function (data) {\n        if (this.state_ !== 1 /* CONNECTED */) {\n                throw 'Connection is not connected';\n            } else {\n            this.tx_.send(data);\n        }\n    };\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\n    Connection.prototype.close = function () {\n        if (this.state_ !== 2 /* DISCONNECTED */) {\n                this.log_('Closing realtime connection.');\n                this.state_ = 2 /* DISCONNECTED */;\n                this.closeConnections_();\n                if (this.onDisconnect_) {\n                    this.onDisconnect_();\n                    this.onDisconnect_ = null;\n                }\n            }\n    };\n    /**\r\n     *\r\n     * @private\r\n     */\n    Connection.prototype.closeConnections_ = function () {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    };\n    return Connection;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/ServerActions.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nvar ServerActions = function () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n  ServerActions.prototype.reportStats = function (stats) {};\n  return ServerActions;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/PersistentConnection.ts\n/* harmony import */ var PersistentConnection___WEBPACK_IMPORTED_MODULE_0__app__ = __webpack_require__(4);\n/* harmony import */ var PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_json__ = __webpack_require__(3);\n/* harmony import */ var PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_constants__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_environment__ = __webpack_require__(6);\nvar PersistentConnection__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar PersistentConnection___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nvar PersistentConnection_PersistentConnection = function (_super) {\n    PersistentConnection___extends(PersistentConnection, _super);\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n        var _this = _super.call(this) || this;\n        _this.repoInfo_ = repoInfo_;\n        _this.onDataUpdate_ = onDataUpdate_;\n        _this.onConnectStatus_ = onConnectStatus_;\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        _this.authTokenProvider_ = authTokenProvider_;\n        _this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\n        _this.log_ = Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"t\" /* logWrapper */])('p:' + _this.id + ':');\n        /** @private {Object} */\n        _this.interruptReasons_ = {};\n        _this.listens_ = {};\n        _this.outstandingPuts_ = [];\n        _this.outstandingPutCount_ = 0;\n        _this.onDisconnectRequestQueue_ = [];\n        _this.connected_ = false;\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        _this.securityDebugCallback_ = null;\n        _this.lastSessionId = null;\n        /** @private {number|null} */\n        _this.establishConnectionTimer_ = null;\n        /** @private {boolean} */\n        _this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        _this.requestCBHash_ = {};\n        _this.requestNumber_ = 0;\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\n        _this.realtime_ = null;\n        /** @private {string|null} */\n        _this.authToken_ = null;\n        _this.forceTokenRefresh_ = false;\n        _this.invalidAuthTokenCount_ = 0;\n        _this.firstConnection_ = true;\n        _this.lastConnectionAttemptTime_ = null;\n        _this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !Object(__WEBPACK_IMPORTED_MODULE_11__utils_environment__[\"b\" /* isNodeSdk */])()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        _this.scheduleConnect_(0);\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n        }\n        return _this;\n    }\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n        var curReqNum = ++this.requestNumber_;\n        var msg = { r: curReqNum, a: action, b: body };\n        this.log_(Object(__WEBPACK_IMPORTED_MODULE_2__utils_json__[\"b\" /* stringify */])(msg));\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n        var queryId = query.queryIdentifier();\n        var pathString = query.path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        this.listens_[pathString] = this.listens_[pathString] || {};\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\n        var listenSpec = {\n            onComplete: onComplete,\n            hashFn: currentHashFn,\n            query: query,\n            tag: tag\n        };\n        this.listens_[pathString][queryId] = listenSpec;\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    };\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n        var _this = this;\n        var query = listenSpec.query;\n        var pathString = query.path.toString();\n        var queryId = query.queryIdentifier();\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        var req = { /*path*/p: pathString };\n        var action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query.queryObject();\n            req['t'] = listenSpec.tag;\n        }\n        req['h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, function (message) {\n            var payload = message['d'];\n            var status = message['s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                _this.log_('listen response', message);\n                if (status !== 'ok') {\n                    _this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    };\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n        if (payload && (typeof payload === 'undefined' ? 'undefined' : PersistentConnection__typeof(payload)) === 'object' && Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"b\" /* contains */])(payload, 'w')) {\n            var warnings = Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"l\" /* safeGet */])(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n                var indexPath = query.path.toString();\n                Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"B\" /* warn */])('Using an unspecified index. Consider adding ' + indexSpec + ' at ' + indexPath + ' to your security rules for better performance');\n            }\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        } else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, function () {});\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    };\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        var isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    };\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\n    PersistentConnection.prototype.tryAuth = function () {\n        var _this = this;\n        if (this.connected_ && this.authToken_) {\n            var token_1 = this.authToken_;\n            var authMethod = isValidFormat(token_1) ? 'auth' : 'gauth';\n            var requestData = { cred: token_1 };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            } else if (PersistentConnection__typeof(this.authOverride_) === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, function (res) {\n                var status = res['s'];\n                var data = res['d'] || 'error';\n                if (_this.authToken_ === token_1) {\n                    if (status === 'ok') {\n                        _this.invalidAuthTokenCount_ = 0;\n                    } else {\n                        // Triggers reconnect and force refresh for auth token\n                        _this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.unlisten = function (query, tag) {\n        var pathString = query.path.toString();\n        var queryId = query.queryIdentifier();\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n        var listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n        }\n    };\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        var req = { /*path*/p: pathString };\n        var action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        } else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'o',\n                data: data,\n                onComplete: onComplete\n            });\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        } else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'om',\n                data: data,\n                onComplete: onComplete\n            });\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        } else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'oc',\n                data: null,\n                onComplete: onComplete\n            });\n        }\n    };\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n        var request = { /*path*/p: pathString, /*data*/d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, function (response) {\n            if (onComplete) {\n                setTimeout(function () {\n                    onComplete(response['s'], response['d']);\n                }, Math.floor(0));\n            }\n        });\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    };\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n        var request = {\n            /*path*/p: pathString,\n            /*data*/d: data\n        };\n        if (hash !== undefined) request['h'] = hash;\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action: action,\n            request: request,\n            onComplete: onComplete\n        });\n        this.outstandingPutCount_++;\n        var index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        } else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    };\n    PersistentConnection.prototype.sendPut_ = function (index) {\n        var _this = this;\n        var action = this.outstandingPuts_[index].action;\n        var request = this.outstandingPuts_[index].request;\n        var onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, function (message) {\n            _this.log_(action + ' response', message);\n            delete _this.outstandingPuts_[index];\n            _this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (_this.outstandingPutCount_ === 0) {\n                _this.outstandingPuts_ = [];\n            }\n            if (onComplete) onComplete(message['s'], message['d']);\n        });\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    PersistentConnection.prototype.reportStats = function (stats) {\n        var _this = this;\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            var request = { /*counters*/c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest( /*stats*/'s', request, function (result) {\n                var status = result['s'];\n                if (status !== 'ok') {\n                    var errorReason = result['d'];\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    };\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + Object(__WEBPACK_IMPORTED_MODULE_2__utils_json__[\"b\" /* stringify */])(message));\n            var reqNum = message['r'];\n            var onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message['b']);\n            }\n        } else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        } else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    };\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') this.onDataUpdate_(body['p'], body['d'],\n        /*isMerge*/false, body['t']);else if (action === 'm') this.onDataUpdate_(body['p'], body['d'],\n        /*isMerge=*/true, body['t']);else if (action === 'c') this.onListenRevoked_(body['p'], body['q']);else if (action === 'ac') this.onAuthRevoked_(body['s'], body['d']);else if (action === 'sd') this.onSecurityDebugPacket_(body);else Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"k\" /* error */])('Unrecognized action received from server: ' + Object(__WEBPACK_IMPORTED_MODULE_2__utils_json__[\"b\" /* stringify */])(action) + '\\nAre you using the latest client?');\n    };\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    };\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n        var _this = this;\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(function () {\n            _this.establishConnectionTimer_ = null;\n            _this.establishConnection_();\n        }, Math.floor(timeout));\n    };\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\n    PersistentConnection.prototype.onVisible_ = function (visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    };\n    PersistentConnection.prototype.onOnline_ = function (online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        } else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    };\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            } else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    };\n    PersistentConnection.prototype.establishConnection_ = function () {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\n            var onReady_1 = this.onReady_.bind(this);\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            var self_1 = this;\n            var lastSessionId_1 = this.lastSessionId;\n            var canceled_1 = false;\n            var connection_1 = null;\n            var closeFn_1 = function closeFn_1() {\n                if (connection_1) {\n                    connection_1.close();\n                } else {\n                    canceled_1 = true;\n                    onDisconnect_1();\n                }\n            };\n            var sendRequestFn = function sendRequestFn(msg) {\n                Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(connection_1, \"sendRequest call when we're not connected not allowed.\");\n                connection_1.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn_1,\n                sendRequest: sendRequestFn\n            };\n            var forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            // First fetch auth token, and establish connection after fetching the token was successful\n            this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n                if (!canceled_1) {\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"s\" /* log */])('getToken() completed. Creating connection.');\n                    self_1.authToken_ = result && result.accessToken;\n                    connection_1 = new Connection_Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1,\n                    /* onKill= */function (reason) {\n                        Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"B\" /* warn */])(reason + ' (' + self_1.repoInfo_.toString() + ')');\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId_1);\n                } else {\n                    Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"s\" /* log */])('getToken() completed but was canceled');\n                }\n            }).then(null, function (error) {\n                self_1.log_('Failed to get token: ' + error);\n                if (!canceled_1) {\n                    if (__WEBPACK_IMPORTED_MODULE_10__utils_constants__[\"a\" /* CONSTANTS */].NODE_ADMIN) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"B\" /* warn */])(error);\n                    }\n                    closeFn_1();\n                }\n            });\n        }\n    };\n    /**\r\n     * @param {string} reason\r\n     */\n    PersistentConnection.prototype.interrupt = function (reason) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"s\" /* log */])('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        } else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    };\n    /**\r\n     * @param {string} reason\r\n     */\n    PersistentConnection.prototype.resume = function (reason) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"s\" /* log */])('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"j\" /* isEmpty */])(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    };\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n        var delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    };\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\n            var put = this.outstandingPuts_[i];\n            if (put && 'h' in put.request && put.queued) {\n                if (put.onComplete) put.onComplete('disconnect');\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n    };\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        var queryId;\n        if (!query) {\n            queryId = 'default';\n        } else {\n            queryId = query.map(function (q) {\n                return Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"d\" /* ObjectToUniqueKey */])(q);\n            }).join('$');\n        }\n        var listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) listen.onComplete('permission_denied');\n    };\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\n        var listen;\n        if (this.listens_[normalizedPathString] !== undefined) {\n            listen = this.listens_[normalizedPathString][queryId];\n            delete this.listens_[normalizedPathString][queryId];\n            if (Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"h\" /* getCount */])(this.listens_[normalizedPathString]) === 0) {\n                delete this.listens_[normalizedPathString];\n            }\n        } else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    };\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n        Object(__WEBPACK_IMPORTED_MODULE_4__util_util__[\"s\" /* log */])('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    };\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        } else {\n            if ('msg' in body && typeof console !== 'undefined') {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    };\n    PersistentConnection.prototype.restoreState_ = function () {\n        var _this = this;\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(this.listens_, function (pathString, queries) {\n            Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"f\" /* forEach */])(queries, function (key, listenSpec) {\n                _this.sendListen_(listenSpec);\n            });\n        });\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) this.sendPut_(i);\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            var request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n    };\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\n    PersistentConnection.prototype.sendConnectStats_ = function () {\n        var stats = {};\n        var clientName = 'js';\n        if (__WEBPACK_IMPORTED_MODULE_10__utils_constants__[\"a\" /* CONSTANTS */].NODE_ADMIN) {\n            clientName = 'admin_node';\n        } else if (__WEBPACK_IMPORTED_MODULE_10__utils_constants__[\"a\" /* CONSTANTS */].NODE_CLIENT) {\n            clientName = 'node';\n        }\n        stats['sdk.' + clientName + '.' + PersistentConnection___WEBPACK_IMPORTED_MODULE_0__app__[\"default\"].SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (Object(__WEBPACK_IMPORTED_MODULE_11__utils_environment__[\"a\" /* isMobileCordova */])()) {\n            stats['framework.cordova'] = 1;\n        } else if (Object(__WEBPACK_IMPORTED_MODULE_11__utils_environment__[\"c\" /* isReactNative */])()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    };\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\n    PersistentConnection.prototype.shouldReconnect_ = function () {\n        var online = OnlineMonitor.getInstance().currentlyOnline();\n        return Object(PersistentConnection___WEBPACK_IMPORTED_MODULE_1__utils_obj__[\"j\" /* isEmpty */])(this.interruptReasons_) && online;\n    };\n    /**\r\n     * @private\r\n     */\n    PersistentConnection.nextPersistentConnectionId_ = 0;\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\n    PersistentConnection.nextConnectionId_ = 0;\n    return PersistentConnection;\n}(ServerActions);\n\n// CONCATENATED MODULE: ./src/utils/util.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\nvar querystring = function querystring(querystringParams) {\n    var params = [];\n    Object(__WEBPACK_IMPORTED_MODULE_0__obj__[\"f\" /* forEach */])(querystringParams, function (key, value) {\n        if (Array.isArray(value)) {\n            value.forEach(function (arrayVal) {\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n            });\n        } else {\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        }\n    });\n    return params.length ? '&' + params.join('&') : '';\n};\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\nvar querystringDecode = function querystringDecode(querystring) {\n    var obj = {};\n    var tokens = querystring.replace(/^\\?/, '').split('&');\n    tokens.forEach(function (token) {\n        if (token) {\n            var key = token.split('=');\n            obj[key[0]] = key[1];\n        }\n    });\n    return obj;\n};\n// CONCATENATED MODULE: ./src/database/core/ReadonlyRestClient.ts\n/* harmony import */ var ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/* harmony import */ var ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_2__utils_json__ = __webpack_require__(3);\n/* harmony import */ var ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_3__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar ReadonlyRestClient___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nvar ReadonlyRestClient_ReadonlyRestClient = function (_super) {\n    ReadonlyRestClient___extends(ReadonlyRestClient, _super);\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n        var _this = _super.call(this) || this;\n        _this.repoInfo_ = repoInfo_;\n        _this.onDataUpdate_ = onDataUpdate_;\n        _this.authTokenProvider_ = authTokenProvider_;\n        /** @private {function(...[*])} */\n        _this.log_ = Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_1__util_util__[\"t\" /* logWrapper */])('p:rest:');\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\n        _this.listens_ = {};\n        return _this;\n    }\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\n        throw new Error('Method not implemented.');\n    };\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        } else {\n            Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n            return query.path.toString();\n        }\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n        var _this = this;\n        var pathString = query.path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\n        // Mark this listener so we can tell if it's removed.\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\n        var thisListen = {};\n        this.listens_[listenId] = thisListen;\n        var queryStringParamaters = query.getQueryParams().toRestQueryStringParameters();\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error, result) {\n            var data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n            }\n            if (Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_3__utils_obj__[\"l\" /* safeGet */])(_this.listens_, listenId) === thisListen) {\n                var status_1;\n                if (!error) {\n                    status_1 = 'ok';\n                } else if (error == 401) {\n                    status_1 = 'permission_denied';\n                } else {\n                    status_1 = 'rest_error:' + error;\n                }\n                onComplete(status_1, null);\n            }\n        });\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\n        // no-op since we just always call getToken.\n    };\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n        var _this = this;\n        if (queryStringParameters === void 0) {\n            queryStringParameters = {};\n        }\n        queryStringParameters['format'] = 'export';\n        this.authTokenProvider_.getToken( /*forceRefresh=*/false).then(function (authTokenData) {\n            var authToken = authTokenData && authTokenData.accessToken;\n            if (authToken) {\n                queryStringParameters['auth'] = authToken;\n            }\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + querystring(queryStringParameters);\n            _this.log_('Sending REST request for ' + url);\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function () {\n                if (callback && xhr.readyState === 4) {\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    var res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_2__utils_json__[\"a\" /* jsonEval */])(xhr.responseText);\n                        } catch (e) {\n                            Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_1__util_util__[\"B\" /* warn */])('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n                        }\n                        callback(null, res);\n                    } else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            Object(ReadonlyRestClient___WEBPACK_IMPORTED_MODULE_1__util_util__[\"B\" /* warn */])('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/true);\n            xhr.send();\n        });\n    };\n    return ReadonlyRestClient;\n}(ServerActions);\n\n// CONCATENATED MODULE: ./src/database/core/Repo.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_json__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__stats_StatsManager__ = __webpack_require__(12);\nvar Repo__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\nvar Repo_Repo = function () {\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\n    function Repo(repoInfo_, forceRestClient, app) {\n        var _this = this;\n        this.repoInfo_ = repoInfo_;\n        this.app = app;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        // A list of data pieces and paths to be set when this client disconnects.\n        this.onDisconnect_ = new SparseSnapshotTree_SparseSnapshotTree();\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\n        this.persistentConnection_ = null;\n        /** @type {!AuthTokenProvider} */\n        var authTokenProvider = new AuthTokenProvider(app);\n        this.stats_ = __WEBPACK_IMPORTED_MODULE_10__stats_StatsManager__[\"a\" /* StatsManager */].getCollection(repoInfo_);\n        if (forceRestClient || Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"g\" /* beingCrawled */])()) {\n            this.server_ = new ReadonlyRestClient_ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\n        } else {\n            var authOverride = app.options['databaseAuthVariableOverride'];\n            // Validate authOverride\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\n                if ((typeof authOverride === 'undefined' ? 'undefined' : Repo__typeof(authOverride)) !== 'object') {\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n                }\n                try {\n                    Object(__WEBPACK_IMPORTED_MODULE_6__utils_json__[\"b\" /* stringify */])(authOverride);\n                } catch (e) {\n                    throw new Error('Invalid authOverride provided: ' + e);\n                }\n            }\n            this.persistentConnection_ = new PersistentConnection_PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n            this.server_ = this.persistentConnection_;\n        }\n        authTokenProvider.addTokenChangeListener(function (token) {\n            _this.server_.refreshAuthToken(token);\n        });\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n        this.statsReporter_ = __WEBPACK_IMPORTED_MODULE_10__stats_StatsManager__[\"a\" /* StatsManager */].getOrCreateReporter(repoInfo_, function () {\n            return new StatsReporter_StatsReporter(_this.stats_, _this.server_);\n        });\n        this.transactions_init_();\n        // Used for .info.\n        this.infoData_ = new SnapshotHolder_SnapshotHolder();\n        this.infoSyncTree_ = new SyncTree_SyncTree({\n            startListening: function startListening(query, tag, currentHashFn, onComplete) {\n                var infoEvents = [];\n                var node = _this.infoData_.getNode(query.path);\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n                // on initial data...\n                if (!node.isEmpty()) {\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n                    setTimeout(function () {\n                        onComplete('ok');\n                    }, 0);\n                }\n                return infoEvents;\n            },\n            stopListening: function stopListening() {}\n        });\n        this.updateInfo_('connected', false);\n        this.serverSyncTree_ = new SyncTree_SyncTree({\n            startListening: function startListening(query, tag, currentHashFn, onComplete) {\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n                    var events = onComplete(status, data);\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n                });\n                // No synchronous events for network-backed sync trees\n                return [];\n            },\n            stopListening: function stopListening(query, tag) {\n                _this.server_.unlisten(query, tag);\n            }\n        });\n    }\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\n    Repo.prototype.toString = function () {\n        return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n    };\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\n    Repo.prototype.name = function () {\n        return this.repoInfo_.namespace;\n    };\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\n    Repo.prototype.serverTime = function () {\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n        var offset = offsetNode.val() || 0;\n        return new Date().getTime() + offset;\n    };\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\n    Repo.prototype.generateServerValues = function () {\n        return generateWithValues({\n            timestamp: this.serverTime()\n        });\n    };\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n        // For testing.\n        this.dataUpdateCount++;\n        var path = new Path(pathString);\n        data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n        var events = [];\n        if (tag) {\n            if (isMerge) {\n                var taggedChildren = Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"k\" /* map */])(data, function (raw) {\n                    return nodeFromJSON_nodeFromJSON(raw);\n                });\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n            } else {\n                var taggedSnap = nodeFromJSON_nodeFromJSON(data);\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n            }\n        } else if (isMerge) {\n            var changedChildren = Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"k\" /* map */])(data, function (raw) {\n                return nodeFromJSON_nodeFromJSON(raw);\n            });\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n        } else {\n            var snap = nodeFromJSON_nodeFromJSON(data);\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n        }\n        var affectedPath = path;\n        if (events.length > 0) {\n            // Since we have a listener outstanding for each transaction, receiving any events\n            // is a proxy for some change having occurred.\n            affectedPath = this.rerunTransactions_(path);\n        }\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n    };\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\n    Repo.prototype.interceptServerData_ = function (callback) {\n        this.interceptServerDataCallback_ = callback;\n    };\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\n        this.updateInfo_('connected', connectStatus);\n        if (connectStatus === false) {\n            this.runOnDisconnectEvents_();\n        }\n    };\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\n        var _this = this;\n        Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"i\" /* each */])(updates, function (value, key) {\n            _this.updateInfo_(key, value);\n        });\n    };\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\n    Repo.prototype.updateInfo_ = function (pathString, value) {\n        var path = new Path('/.info/' + pathString);\n        var newNode = nodeFromJSON_nodeFromJSON(value);\n        this.infoData_.updateSnapshot(path, newNode);\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n    };\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\n    Repo.prototype.getNextWriteId_ = function () {\n        return this.nextWriteId_++;\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n        var _this = this;\n        this.log_('set', {\n            path: path.toString(),\n            value: newVal,\n            priority: newPriority\n        });\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n        // (b) store unresolved paths on JSON parse\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_nodeFromJSON(newVal, newPriority);\n        var newNode = ServerValues_resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        var writeId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n        this.eventQueue_.queueEvents(events);\n        this.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), function (status, errorReason) {\n            var success = status === 'ok';\n            if (!success) {\n                Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"B\" /* warn */])('set at ' + path + ' failed: ' + status);\n            }\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n        var affectedPath = this.abortTransactions_(path);\n        this.rerunTransactions_(affectedPath);\n        // We queued the events above, so just flush the queue here\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n        var _this = this;\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\n        // Start with our existing data and merge each child into it.\n        var empty = true;\n        var serverValues = this.generateServerValues();\n        var changedChildren = {};\n        Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"f\" /* forEach */])(childrenToMerge, function (changedKey, changedValue) {\n            empty = false;\n            var newNodeUnresolved = nodeFromJSON_nodeFromJSON(changedValue);\n            changedChildren[changedKey] = ServerValues_resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        });\n        if (!empty) {\n            var writeId_1 = this.getNextWriteId_();\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n            this.eventQueue_.queueEvents(events);\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n                var success = status === 'ok';\n                if (!success) {\n                    Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"B\" /* warn */])('update at ' + path + ' failed: ' + status);\n                }\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\n            });\n            Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"f\" /* forEach */])(childrenToMerge, function (changedPath) {\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\n                _this.rerunTransactions_(affectedPath);\n            });\n            // We queued the events above, so just flush the queue here\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\n        } else {\n            Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"s\" /* log */])(\"update() called with empty data.  Don't do anything.\");\n            this.callOnCompleteCallback(onComplete, 'ok');\n        }\n    };\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\n    Repo.prototype.runOnDisconnectEvents_ = function () {\n        var _this = this;\n        this.log_('onDisconnectEvents');\n        var serverValues = this.generateServerValues();\n        var resolvedOnDisconnectTree = ServerValues_resolveDeferredValueTree(this.onDisconnect_, serverValues);\n        var events = [];\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n            var affectedPath = _this.abortTransactions_(path);\n            _this.rerunTransactions_(affectedPath);\n        });\n        this.onDisconnect_ = new SparseSnapshotTree_SparseSnapshotTree();\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n        var _this = this;\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.forget(path);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n        var _this = this;\n        var newNode = nodeFromJSON_nodeFromJSON(value);\n        this.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.remember(path, newNode);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n        var _this = this;\n        var newNode = nodeFromJSON_nodeFromJSON(value, priority);\n        this.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.remember(path, newNode);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n        var _this = this;\n        if (Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"j\" /* isEmpty */])(childrenToMerge)) {\n            Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"s\" /* log */])(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n            this.callOnCompleteCallback(onComplete, 'ok');\n            return;\n        }\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n            if (status === 'ok') {\n                Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"f\" /* forEach */])(childrenToMerge, function (childName, childNode) {\n                    var newChildNode = nodeFromJSON_nodeFromJSON(childNode);\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\n                });\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n        var events;\n        if (query.path.getFront() === '.info') {\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n        } else {\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n        }\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\n    };\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n        // a little bit by handling the return values anyways.\n        var events;\n        if (query.path.getFront() === '.info') {\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n        } else {\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n        }\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\n    };\n    Repo.prototype.interrupt = function () {\n        if (this.persistentConnection_) {\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\n        }\n    };\n    Repo.prototype.resume = function () {\n        if (this.persistentConnection_) {\n            this.persistentConnection_.resume(INTERRUPT_REASON);\n        }\n    };\n    Repo.prototype.stats = function (showDelta) {\n        if (showDelta === void 0) {\n            showDelta = false;\n        }\n        if (typeof console === 'undefined') return;\n        var stats;\n        if (showDelta) {\n            if (!this.statsListener_) this.statsListener_ = new StatsListener(this.stats_);\n            stats = this.statsListener_.get();\n        } else {\n            stats = this.stats_.get();\n        }\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n            return Math.max(currentValue.length, previousValue);\n        }, 0);\n        Object(__WEBPACK_IMPORTED_MODULE_8__utils_obj__[\"f\" /* forEach */])(stats, function (stat, value) {\n            // pad stat names to be the same length (plus 2 extra spaces).\n            for (var i = stat.length; i < longestName + 2; i++) {\n                stat += ' ';\n            }console.log(stat + value);\n        });\n    };\n    Repo.prototype.statsIncrementCounter = function (metric) {\n        this.stats_.incrementCounter(metric);\n        this.statsReporter_.includeStat(metric);\n    };\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\n    Repo.prototype.log_ = function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        var prefix = '';\n        if (this.persistentConnection_) {\n            prefix = this.persistentConnection_.id + ':';\n        }\n        __WEBPACK_IMPORTED_MODULE_7__util_util__[\"s\" /* log */].apply(void 0, [prefix].concat(var_args));\n    };\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n        if (callback) {\n            Object(__WEBPACK_IMPORTED_MODULE_7__util_util__[\"m\" /* exceptionGuard */])(function () {\n                if (status == 'ok') {\n                    callback(null);\n                } else {\n                    var code = (status || 'error').toUpperCase();\n                    var message = code;\n                    if (errorReason) message += ': ' + errorReason;\n                    var error = new Error(message);\n                    error.code = code;\n                    callback(error);\n                }\n            });\n        }\n    };\n    Object.defineProperty(Repo.prototype, \"database\", {\n        get: function get() {\n            return this.__database || (this.__database = new Database_Database(this));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Repo;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/filter/RangedFilter.ts\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\nvar RangedFilter_RangedFilter = function () {\n    /**\r\n     * @param {!QueryParams} params\r\n     */\n    function RangedFilter(params) {\n        this.indexedFilter_ = new IndexedFilter_IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n    }\n    /**\r\n     * @return {!NamedNode}\r\n     */\n    RangedFilter.prototype.getStartPost = function () {\n        return this.startPost_;\n    };\n    /**\r\n     * @return {!NamedNode}\r\n     */\n    RangedFilter.prototype.getEndPost = function () {\n        return this.endPost_;\n    };\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\n    RangedFilter.prototype.matches = function (node) {\n        return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode_ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode_ChildrenNode.EMPTY_NODE;\n        }\n        var filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode_ChildrenNode.EMPTY_NODE);\n        var self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode_ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.filtersNodes = function () {\n        return true;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.getIndexedFilter = function () {\n        return this.indexedFilter_;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    RangedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\n    RangedFilter.getStartPost_ = function (params) {\n        if (params.hasStart()) {\n            var startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        } else {\n            return params.getIndex().minPost();\n        }\n    };\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\n    RangedFilter.getEndPost_ = function (params) {\n        if (params.hasEnd()) {\n            var endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        } else {\n            return params.getIndex().maxPost();\n        }\n    };\n    return RangedFilter;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/filter/LimitedFilter.ts\n/* harmony import */ var LimitedFilter___WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(0);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\nvar LimitedFilter_LimitedFilter = function () {\n    /**\r\n     * @param {!QueryParams} params\r\n     */\n    function LimitedFilter(params) {\n        this.rangedFilter_ = new RangedFilter_RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode_ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        } else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        } else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        var filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode_ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        } else {\n            if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode_ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                var iterator = void 0;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                } else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                var count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    var next = iterator.getNext();\n                    var inRange = void 0;\n                    if (this.reverse_) {\n                        inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n                    } else {\n                        inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n                    }\n                    if (inRange) {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    } else {\n                        // if we have reached the end post, we cannot keep adding elemments\n                        break;\n                    }\n                }\n            } else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode_ChildrenNode.EMPTY_NODE);\n                var startPost = void 0;\n                var endPost = void 0;\n                var cmp = void 0;\n                var iterator = void 0;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                    startPost = this.rangedFilter_.getEndPost();\n                    endPost = this.rangedFilter_.getStartPost();\n                    var indexCompare_1 = this.index_.getCompare();\n                    cmp = function cmp(a, b) {\n                        return indexCompare_1(b, a);\n                    };\n                } else {\n                    iterator = filtered.getIterator(this.index_);\n                    startPost = this.rangedFilter_.getStartPost();\n                    endPost = this.rangedFilter_.getEndPost();\n                    cmp = this.index_.getCompare();\n                }\n                var count = 0;\n                var foundStartPost = false;\n                while (iterator.hasNext()) {\n                    var next = iterator.getNext();\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\n                        // start adding\n                        foundStartPost = true;\n                    }\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n                    if (inRange) {\n                        count++;\n                    } else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode_ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.filtersNodes = function () {\n        return true;\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.getIndexedFilter = function () {\n        return this.rangedFilter_.getIndexedFilter();\n    };\n    /**\r\n     * @inheritDoc\r\n     */\n    LimitedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        var cmp;\n        if (this.reverse_) {\n            var indexCmp_1 = this.index_.getCompare();\n            cmp = function cmp(a, b) {\n                return indexCmp_1(b, a);\n            };\n        } else {\n            cmp = this.index_.getCompare();\n        }\n        var oldEventCache = snap;\n        Object(LimitedFilter___WEBPACK_IMPORTED_MODULE_3__utils_assert__[\"a\" /* assert */])(oldEventCache.numChildren() == this.limit_, '');\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\n        var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null && (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            } else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n                }\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_ChildrenNode.EMPTY_NODE);\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                } else {\n                    return newEventCache;\n                }\n            }\n        } else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        } else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode_ChildrenNode.EMPTY_NODE);\n            } else {\n                return snap;\n            }\n        } else {\n            return snap;\n        }\n    };\n    return LimitedFilter;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/view/QueryParams.ts\n/* harmony import */ var QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var QueryParams___WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_json__ = __webpack_require__(3);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\nvar QueryParams_QueryParams = function () {\n    function QueryParams() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    /**\r\n     * @return {boolean}\r\n     */\n    QueryParams.prototype.hasStart = function () {\n        return this.startSet_;\n    };\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\n    QueryParams.prototype.isViewFromLeft = function () {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        } else {\n            return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n        }\n    };\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\n    QueryParams.prototype.getIndexStartValue = function () {\n        Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    };\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\n    QueryParams.prototype.getIndexStartName = function () {\n        Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        } else {\n            return QueryParams___WEBPACK_IMPORTED_MODULE_1__util_util__[\"c\" /* MIN_NAME */];\n        }\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    QueryParams.prototype.hasEnd = function () {\n        return this.endSet_;\n    };\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\n    QueryParams.prototype.getIndexEndValue = function () {\n        Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    };\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\n    QueryParams.prototype.getIndexEndName = function () {\n        Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        } else {\n            return QueryParams___WEBPACK_IMPORTED_MODULE_1__util_util__[\"b\" /* MAX_NAME */];\n        }\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    QueryParams.prototype.hasLimit = function () {\n        return this.limitSet_;\n    };\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\n    QueryParams.prototype.hasAnchoredLimit = function () {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    };\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\n    QueryParams.prototype.getLimit = function () {\n        Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    };\n    /**\r\n     * @return {!Index}\r\n     */\n    QueryParams.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\n    QueryParams.prototype.copy_ = function () {\n        var copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    };\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.limit = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = '';\n        return newParams;\n    };\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.limitToFirst = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n        return newParams;\n    };\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.limitToLast = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n        return newParams;\n    };\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.startAt = function (indexValue, key) {\n        var newParams = this.copy_();\n        newParams.startSet_ = true;\n        if (!(indexValue !== undefined)) {\n            indexValue = null;\n        }\n        newParams.indexStartValue_ = indexValue;\n        if (key != null) {\n            newParams.startNameSet_ = true;\n            newParams.indexStartName_ = key;\n        } else {\n            newParams.startNameSet_ = false;\n            newParams.indexStartName_ = '';\n        }\n        return newParams;\n    };\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.endAt = function (indexValue, key) {\n        var newParams = this.copy_();\n        newParams.endSet_ = true;\n        if (!(indexValue !== undefined)) {\n            indexValue = null;\n        }\n        newParams.indexEndValue_ = indexValue;\n        if (key !== undefined) {\n            newParams.endNameSet_ = true;\n            newParams.indexEndName_ = key;\n        } else {\n            newParams.endNameSet_ = false;\n            newParams.indexEndName_ = '';\n        }\n        return newParams;\n    };\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\n    QueryParams.prototype.orderBy = function (index) {\n        var newParams = this.copy_();\n        newParams.index_ = index;\n        return newParams;\n    };\n    /**\r\n     * @return {!Object}\r\n     */\n    QueryParams.prototype.getQueryObject = function () {\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n        var obj = {};\n        if (this.startSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n            if (this.startNameSet_) {\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n            }\n        }\n        if (this.endSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n            if (this.endNameSet_) {\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n            }\n        }\n        if (this.limitSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n            var viewFrom = this.viewFrom_;\n            if (viewFrom === '') {\n                if (this.isViewFromLeft()) {\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n                } else {\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n                }\n            }\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n        }\n        // For now, priority index is the default, so we only specify if it's some other index\n        if (this.index_ !== PRIORITY_INDEX) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n        }\n        return obj;\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    QueryParams.prototype.loadsAllData = function () {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    };\n    /**\r\n     * @return {boolean}\r\n     */\n    QueryParams.prototype.isDefault = function () {\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n    };\n    /**\r\n     * @return {!NodeFilter}\r\n     */\n    QueryParams.prototype.getNodeFilter = function () {\n        if (this.loadsAllData()) {\n            return new IndexedFilter_IndexedFilter(this.getIndex());\n        } else if (this.hasLimit()) {\n            return new LimitedFilter_LimitedFilter(this);\n        } else {\n            return new RangedFilter_RangedFilter(this);\n        }\n    };\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\n    QueryParams.prototype.toRestQueryStringParameters = function () {\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n        var qs = {};\n        if (this.isDefault()) {\n            return qs;\n        }\n        var orderBy;\n        if (this.index_ === PRIORITY_INDEX) {\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n        } else if (this.index_ === VALUE_INDEX) {\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\n        } else if (this.index_ === KEY_INDEX) {\n            orderBy = REST_CONSTANTS.KEY_INDEX;\n        } else {\n            Object(QueryParams___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(this.index_ instanceof PathIndex_PathIndex, 'Unrecognized index type!');\n            orderBy = this.index_.toString();\n        }\n        qs[REST_CONSTANTS.ORDER_BY] = Object(__WEBPACK_IMPORTED_MODULE_9__utils_json__[\"b\" /* stringify */])(orderBy);\n        if (this.startSet_) {\n            qs[REST_CONSTANTS.START_AT] = Object(__WEBPACK_IMPORTED_MODULE_9__utils_json__[\"b\" /* stringify */])(this.indexStartValue_);\n            if (this.startNameSet_) {\n                qs[REST_CONSTANTS.START_AT] += ',' + Object(__WEBPACK_IMPORTED_MODULE_9__utils_json__[\"b\" /* stringify */])(this.indexStartName_);\n            }\n        }\n        if (this.endSet_) {\n            qs[REST_CONSTANTS.END_AT] = Object(__WEBPACK_IMPORTED_MODULE_9__utils_json__[\"b\" /* stringify */])(this.indexEndValue_);\n            if (this.endNameSet_) {\n                qs[REST_CONSTANTS.END_AT] += ',' + Object(__WEBPACK_IMPORTED_MODULE_9__utils_json__[\"b\" /* stringify */])(this.indexEndName_);\n            }\n        }\n        if (this.limitSet_) {\n            if (this.isViewFromLeft()) {\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n            } else {\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n            }\n        }\n        return qs;\n    };\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n        INDEX_START_VALUE: 'sp',\n        INDEX_START_NAME: 'sn',\n        INDEX_END_VALUE: 'ep',\n        INDEX_END_NAME: 'en',\n        LIMIT: 'l',\n        VIEW_FROM: 'vf',\n        VIEW_FROM_LEFT: 'l',\n        VIEW_FROM_RIGHT: 'r',\n        INDEX: 'i'\n    };\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\n    QueryParams.REST_QUERY_CONSTANTS_ = {\n        ORDER_BY: 'orderBy',\n        PRIORITY_INDEX: '$priority',\n        VALUE_INDEX: '$value',\n        KEY_INDEX: '$key',\n        START_AT: 'startAt',\n        END_AT: 'endAt',\n        LIMIT_TO_FIRST: 'limitToFirst',\n        LIMIT_TO_LAST: 'limitToLast'\n    };\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\n    QueryParams.DEFAULT = new QueryParams();\n    return QueryParams;\n}();\n\n// CONCATENATED MODULE: ./src/database/api/Reference.ts\n/* harmony import */ var Reference___WEBPACK_IMPORTED_MODULE_2__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__ = __webpack_require__(5);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\nvar Reference___extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\nvar Reference_Reference = function (_super) {\n    Reference___extends(Reference, _super);\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\n    function Reference(repo, path) {\n        var _this = this;\n        if (!(repo instanceof Repo_Repo)) {\n            throw new Error('new Reference() no longer supported - use app.database().');\n        }\n        // call Query's constructor, passing in the repo and path.\n        _this = _super.call(this, repo, path, QueryParams_QueryParams.DEFAULT, false) || this;\n        return _this;\n    }\n    /** @return {?string} */\n    Reference.prototype.getKey = function () {\n        validateArgCount('Reference.key', 0, 0, arguments.length);\n        if (this.path.isEmpty()) return null;else return this.path.getBack();\n    };\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\n    Reference.prototype.child = function (pathString) {\n        validateArgCount('Reference.child', 1, 1, arguments.length);\n        if (typeof pathString === 'number') {\n            pathString = String(pathString);\n        } else if (!(pathString instanceof Path)) {\n            if (this.path.getFront() === null) validateRootPathString('Reference.child', 1, pathString, false);else validation_validatePathString('Reference.child', 1, pathString, false);\n        }\n        return new Reference(this.repo, this.path.child(pathString));\n    };\n    /** @return {?Reference} */\n    Reference.prototype.getParent = function () {\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\n        var parentPath = this.path.parent();\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\n    };\n    /** @return {!Reference} */\n    Reference.prototype.getRoot = function () {\n        validateArgCount('Reference.root', 0, 0, arguments.length);\n        var ref = this;\n        while (ref.getParent() !== null) {\n            ref = ref.getParent();\n        }\n        return ref;\n    };\n    /** @return {!Database} */\n    Reference.prototype.databaseProp = function () {\n        return this.repo.database;\n    };\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.set = function (newVal, onComplete) {\n        validateArgCount('Reference.set', 1, 2, arguments.length);\n        validateWritablePath('Reference.set', this.path);\n        validation_validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n        validateCallback('Reference.set', 2, onComplete, true);\n        var deferred = new Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        this.repo.setWithPriority(this.path, newVal,\n        /*priority=*/null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.update = function (objectToMerge, onComplete) {\n        validateArgCount('Reference.update', 1, 2, arguments.length);\n        validateWritablePath('Reference.update', this.path);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            Object(Reference___WEBPACK_IMPORTED_MODULE_2__core_util_util__[\"B\" /* warn */])('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n        }\n        validation_validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n        validateCallback('Reference.update', 2, onComplete, true);\n        var deferred = new Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n        validateWritablePath('Reference.setWithPriority', this.path);\n        validation_validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n        validation_validatePriority('Reference.setWithPriority', 2, newPriority, false);\n        validateCallback('Reference.setWithPriority', 3, onComplete, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n        var deferred = new Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.remove = function (onComplete) {\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\n        validateWritablePath('Reference.remove', this.path);\n        validateCallback('Reference.remove', 1, onComplete, true);\n        return this.set(null, onComplete);\n    };\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\n        validateWritablePath('Reference.transaction', this.path);\n        validateCallback('Reference.transaction', 1, transactionUpdate, false);\n        validateCallback('Reference.transaction', 2, onComplete, true);\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n        // to expose it.\n        validation_validateBoolean('Reference.transaction', 3, applyLocally, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n        if (applyLocally === undefined) applyLocally = true;\n        var deferred = new Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        if (typeof onComplete === 'function') {\n            Object(Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"c\" /* attachDummyErrorHandler */])(deferred.promise);\n        }\n        var promiseComplete = function promiseComplete(error, committed, snapshot) {\n            if (error) {\n                deferred.reject(error);\n            } else {\n                deferred.resolve(new TransactionResult_TransactionResult(committed, snapshot));\n            }\n            if (typeof onComplete === 'function') {\n                onComplete(error, committed, snapshot);\n            }\n        };\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n        return deferred.promise;\n    };\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\n    Reference.prototype.setPriority = function (priority, onComplete) {\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n        validateWritablePath('Reference.setPriority', this.path);\n        validation_validatePriority('Reference.setPriority', 1, priority, false);\n        validateCallback('Reference.setPriority', 2, onComplete, true);\n        var deferred = new Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"a\" /* Deferred */]();\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\n    Reference.prototype.push = function (value, onComplete) {\n        validateArgCount('Reference.push', 0, 2, arguments.length);\n        validateWritablePath('Reference.push', this.path);\n        validation_validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n        validateCallback('Reference.push', 2, onComplete, true);\n        var now = this.repo.serverTime();\n        var name = nextPushId(now);\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n        // We use child() to create handles to two different references. The first is turned into a\n        // ThennableReference below by adding then() and catch() methods and is used as the\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\n        // value of the first ThennableReference.\n        var thennablePushRef = this.child(name);\n        var pushRef = this.child(name);\n        var promise;\n        if (value != null) {\n            promise = thennablePushRef.set(value, onComplete).then(function () {\n                return pushRef;\n            });\n        } else {\n            promise = Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"b\" /* PromiseImpl */].resolve(pushRef);\n        }\n        thennablePushRef.then = promise.then.bind(promise);\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\n        if (typeof onComplete === 'function') {\n            Object(Reference___WEBPACK_IMPORTED_MODULE_10__utils_promise__[\"c\" /* attachDummyErrorHandler */])(promise);\n        }\n        return thennablePushRef;\n    };\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\n    Reference.prototype.onDisconnect = function () {\n        validateWritablePath('Reference.onDisconnect', this.path);\n        return new onDisconnect_OnDisconnect(this.repo, this.path);\n    };\n    Object.defineProperty(Reference.prototype, \"database\", {\n        get: function get() {\n            return this.databaseProp();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"key\", {\n        get: function get() {\n            return this.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"parent\", {\n        get: function get() {\n            return this.getParent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"root\", {\n        get: function get() {\n            return this.getRoot();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Reference;\n}(Query_Query);\n\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nQuery_Query.__referenceConstructor = Reference_Reference;\nSyncPoint_SyncPoint.__referenceConstructor = Reference_Reference;\n// CONCATENATED MODULE: ./src/database/core/util/Tree.ts\n/* harmony import */ var Tree___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var Tree___WEBPACK_IMPORTED_MODULE_2__utils_obj__ = __webpack_require__(2);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n/**\r\n * Node in a Tree.\r\n */\nvar TreeNode = function () {\n    function TreeNode() {\n        // TODO: Consider making accessors that create children and value lazily or\n        // separate Internal / Leaf 'types'.\n        this.children = {};\n        this.childCount = 0;\n        this.value = null;\n    }\n    return TreeNode;\n}();\n\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nvar Tree_Tree = function () {\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\n    function Tree(name_, parent_, node_) {\n        if (name_ === void 0) {\n            name_ = '';\n        }\n        if (parent_ === void 0) {\n            parent_ = null;\n        }\n        if (node_ === void 0) {\n            node_ = new TreeNode();\n        }\n        this.name_ = name_;\n        this.parent_ = parent_;\n        this.node_ = node_;\n    }\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\n    Tree.prototype.subTree = function (pathObj) {\n        // TODO: Require pathObj to be Path?\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n        var child = this,\n            next;\n        while ((next = path.getFront()) !== null) {\n            var childNode = Object(Tree___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"l\" /* safeGet */])(child.node_.children, next) || new TreeNode();\n            child = new Tree(next, child, childNode);\n            path = path.popFront();\n        }\n        return child;\n    };\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\n    Tree.prototype.getValue = function () {\n        return this.node_.value;\n    };\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\n    Tree.prototype.setValue = function (value) {\n        Object(Tree___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(typeof value !== 'undefined', 'Cannot set value to undefined');\n        this.node_.value = value;\n        this.updateParents_();\n    };\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\n    Tree.prototype.clear = function () {\n        this.node_.value = null;\n        this.node_.children = {};\n        this.node_.childCount = 0;\n        this.updateParents_();\n    };\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\n    Tree.prototype.hasChildren = function () {\n        return this.node_.childCount > 0;\n    };\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\n    Tree.prototype.isEmpty = function () {\n        return this.getValue() === null && !this.hasChildren();\n    };\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\n    Tree.prototype.forEachChild = function (action) {\n        var _this = this;\n        Object(Tree___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"f\" /* forEach */])(this.node_.children, function (child, childTree) {\n            action(new Tree(child, _this, childTree));\n        });\n    };\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n        if (includeSelf && !childrenFirst) action(this);\n        this.forEachChild(function (child) {\n            child.forEachDescendant(action, /*includeSelf=*/true, childrenFirst);\n        });\n        if (includeSelf && childrenFirst) action(this);\n    };\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\n        var node = includeSelf ? this : this.parent();\n        while (node !== null) {\n            if (action(node)) {\n                return true;\n            }\n            node = node.parent();\n        }\n        return false;\n    };\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n        this.forEachChild(function (child) {\n            if (child.getValue() !== null) action(child);else child.forEachImmediateDescendantWithValue(action);\n        });\n    };\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\n    Tree.prototype.path = function () {\n        return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n    };\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\n    Tree.prototype.name = function () {\n        return this.name_;\n    };\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\n    Tree.prototype.parent = function () {\n        return this.parent_;\n    };\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\n    Tree.prototype.updateParents_ = function () {\n        if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n    };\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\n    Tree.prototype.updateChild_ = function (childName, child) {\n        var childEmpty = child.isEmpty();\n        var childExists = Object(Tree___WEBPACK_IMPORTED_MODULE_2__utils_obj__[\"b\" /* contains */])(this.node_.children, childName);\n        if (childEmpty && childExists) {\n            delete this.node_.children[childName];\n            this.node_.childCount--;\n            this.updateParents_();\n        } else if (!childEmpty && !childExists) {\n            this.node_.children[childName] = child.node_;\n            this.node_.childCount++;\n            this.updateParents_();\n        }\n    };\n    return Tree;\n}();\n\n// CONCATENATED MODULE: ./src/database/core/Repo_transaction.ts\n/* harmony import */ var Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_obj__ = __webpack_require__(2);\nvar Repo_transaction__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n/**\r\n * @enum {number}\r\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n    // mismatched hash.\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n    // or rejected yet).\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n    // removed when we get a chance to prune completed ones.\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n    // If it comes back as unsuccessful, we'll abort it.\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\n    // Temporary state used to mark transactions that need to be aborted.\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\nRepo_Repo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\nRepo_Repo.prototype.transactions_init_ = function () {\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\n    this.transactionQueueTree_ = new Tree_Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\nRepo_Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n    this.log_('transaction on ' + path);\n    // Add a watch to make sure we get server updates.\n    var valueCallback = function valueCallback() {};\n    var watchRef = new Reference_Reference(this, path);\n    watchRef.on('value', valueCallback);\n    var unwatcher = function unwatcher() {\n        watchRef.off('value', valueCallback);\n    };\n    // Initialize transaction.\n    var transaction = {\n        path: path,\n        update: transactionUpdate,\n        onComplete: onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out which one goes first.\n        order: Object(__WEBPACK_IMPORTED_MODULE_6__util_util__[\"a\" /* LUIDGenerator */])(),\n        // Whether to raise local events for this transaction.\n        applyLocally: applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher: unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    var currentState = this.getLatestState_(path);\n    transaction.currentInputSnapshot = currentState;\n    var newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            // We just set the input snapshot, so this cast should be safe\n            var snapshot = new DataSnapshot_DataSnapshot(transaction.currentInputSnapshot, new Reference_Reference(this, transaction.path), PRIORITY_INDEX);\n            transaction.onComplete(null, false, snapshot);\n        }\n    } else {\n        validation_validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = TransactionStatus.RUN;\n        var queueNode = this.transactionQueueTree_.subTree(path);\n        var nodeQueue = queueNode.getValue() || [];\n        nodeQueue.push(transaction);\n        queueNode.setValue(nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\n        // start new transactions from the event callbacks.\n        var priorityForNode = void 0;\n        if ((typeof newVal === 'undefined' ? 'undefined' : Repo_transaction__typeof(newVal)) === 'object' && newVal !== null && Object(__WEBPACK_IMPORTED_MODULE_9__utils_obj__[\"b\" /* contains */])(newVal, '.priority')) {\n            priorityForNode = Object(__WEBPACK_IMPORTED_MODULE_9__utils_obj__[\"l\" /* safeGet */])(newVal, '.priority');\n            Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n        } else {\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode_ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_nodeFromJSON(newVal, priorityForNode);\n        var newNode = ServerValues_resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        this.sendReadyTransactions_();\n    }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\nRepo_Repo.prototype.getLatestState_ = function (path, excludeSets) {\n    return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode_ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\nRepo_Repo.prototype.sendReadyTransactions_ = function (node) {\n    var _this = this;\n    if (node === void 0) {\n        node = this.transactionQueueTree_;\n    }\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        this.pruneCompletedTransactionsBelowNode_(node);\n    }\n    if (node.getValue() !== null) {\n        var queue = this.buildTransactionQueue_(node);\n        Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(queue.length > 0, 'Sending zero length transaction queue');\n        var allRun = queue.every(function (transaction) {\n            return transaction.status === TransactionStatus.RUN;\n        });\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            this.sendTransactionQueue_(node.path(), queue);\n        }\n    } else if (node.hasChildren()) {\n        node.forEachChild(function (childNode) {\n            _this.sendReadyTransactions_(childNode);\n        });\n    }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\nRepo_Repo.prototype.sendTransactionQueue_ = function (path, queue) {\n    var _this = this;\n    // Mark transactions as sent and increment retry count!\n    var setsToIgnore = queue.map(function (txn) {\n        return txn.currentWriteId;\n    });\n    var latestState = this.getLatestState_(path, setsToIgnore);\n    var snapToSend = latestState;\n    var latestHash = latestState.hash();\n    for (var i = 0; i < queue.length; i++) {\n        var txn = queue[i];\n        Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = TransactionStatus.SENT;\n        txn.retryCount++;\n        var relativePath = Path.relativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    var dataToSend = snapToSend.val(true);\n    var pathToSend = path;\n    // Send the put.\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n        _this.log_('transaction put response', {\n            path: pathToSend.toString(),\n            status: status\n        });\n        var events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n            // the callback could trigger more transactions or sets.\n            var callbacks = [];\n            for (var i = 0; i < queue.length; i++) {\n                queue[i].status = TransactionStatus.COMPLETED;\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\n                    var node = queue[i].currentOutputSnapshotResolved;\n                    var ref = new Reference_Reference(_this, queue[i].path);\n                    var snapshot = new DataSnapshot_DataSnapshot(node, ref, PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\n            // There may be pending transactions that we can now send.\n            _this.sendReadyTransactions_();\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\n            // Finally, trigger onComplete callbacks.\n            for (var i = 0; i < callbacks.length; i++) {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_util__[\"m\" /* exceptionGuard */])(callbacks[i]);\n            }\n        } else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (var i = 0; i < queue.length; i++) {\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) queue[i].status = TransactionStatus.NEEDS_ABORT;else queue[i].status = TransactionStatus.RUN;\n                }\n            } else {\n                Object(__WEBPACK_IMPORTED_MODULE_6__util_util__[\"B\" /* warn */])('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (var i = 0; i < queue.length; i++) {\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    queue[i].abortReason = status;\n                }\n            }\n            _this.rerunTransactions_(path);\n        }\n    }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\nRepo_Repo.prototype.rerunTransactions_ = function (changedPath) {\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n    var path = rootMostTransactionNode.path();\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n    this.rerunTransactionQueue_(queue, path);\n    return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\nRepo_Repo.prototype.rerunTransactionQueue_ = function (queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = [];\n    var events = [];\n    // Ignore all of the sets we're going to re-run.\n    var txnsToRerun = queue.filter(function (q) {\n        return q.status === TransactionStatus.RUN;\n    });\n    var setsToIgnore = txnsToRerun.map(function (q) {\n        return q.currentWriteId;\n    });\n    for (var i = 0; i < queue.length; i++) {\n        var transaction = queue[i];\n        var relativePath = Path.relativePath(path, transaction.path);\n        var abortTransaction = false,\n            abortReason = void 0;\n        Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        } else if (transaction.status === TransactionStatus.RUN) {\n            if (transaction.retryCount >= Repo_Repo.MAX_TRANSACTION_RETRIES_) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n            } else {\n                // This code reruns a transaction\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                var newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validation_validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    var newDataNode = nodeFromJSON_nodeFromJSON(newData);\n                    var hasExplicitPriority = (typeof newData === 'undefined' ? 'undefined' : Repo_transaction__typeof(newData)) === 'object' && newData != null && Object(__WEBPACK_IMPORTED_MODULE_9__utils_obj__[\"b\" /* contains */])(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    var oldWriteId = transaction.currentWriteId;\n                    var serverValues = this.generateServerValues();\n                    var newNodeResolved = ServerValues_resolveDeferredValueSnapshot(newDataNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = this.getNextWriteId_();\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n                } else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n                }\n            }\n        }\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = TransactionStatus.COMPLETED;\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n            // So defer the unwatcher until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    var ref = new Reference_Reference(this, queue[i].path);\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n                    var snapshot = new DataSnapshot_DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n                } else {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (var i = 0; i < callbacks.length; i++) {\n        Object(__WEBPACK_IMPORTED_MODULE_6__util_util__[\"m\" /* exceptionGuard */])(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\nRepo_Repo.prototype.getAncestorTransactionNode_ = function (path) {\n    var front;\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n    var transactionNode = this.transactionQueueTree_;\n    while ((front = path.getFront()) !== null && transactionNode.getValue() === null) {\n        transactionNode = transactionNode.subTree(front);\n        path = path.popFront();\n    }\n    return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\nRepo_Repo.prototype.buildTransactionQueue_ = function (transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    var transactionQueue = [];\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort(function (a, b) {\n        return a.order - b.order;\n    });\n    return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\nRepo_Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n    var _this = this;\n    var nodeQueue = node.getValue();\n    if (nodeQueue !== null) {\n        for (var i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    node.forEachChild(function (child) {\n        _this.aggregateTransactionQueuesForNode_(child, queue);\n    });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\nRepo_Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n    var _this = this;\n    var queue = node.getValue();\n    if (queue) {\n        var to = 0;\n        for (var from = 0; from < queue.length; from++) {\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        node.setValue(queue.length > 0 ? queue : null);\n    }\n    node.forEachChild(function (childNode) {\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\n    });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\nRepo_Repo.prototype.abortTransactions_ = function (path) {\n    var _this = this;\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\n    var transactionNode = this.transactionQueueTree_.subTree(path);\n    transactionNode.forEachAncestor(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    this.abortTransactionsOnNode_(transactionNode);\n    transactionNode.forEachDescendant(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\nRepo_Repo.prototype.abortTransactionsOnNode_ = function (node) {\n    var queue = node.getValue();\n    if (queue !== null) {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        var callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n        // can be immediately aborted and removed.\n        var events = [];\n        var lastSent = -1;\n        for (var i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n                // Already marked.  No action needed.\n            } else if (queue[i].status === TransactionStatus.SENT) {\n                Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n                queue[i].abortReason = 'set';\n            } else {\n                Object(Repo_transaction___WEBPACK_IMPORTED_MODULE_0__utils_assert__[\"a\" /* assert */])(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    var snapshot = null;\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            node.setValue(null);\n        } else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n        for (var i = 0; i < callbacks.length; i++) {\n            Object(__WEBPACK_IMPORTED_MODULE_6__util_util__[\"m\" /* exceptionGuard */])(callbacks[i]);\n        }\n    }\n};\n// CONCATENATED MODULE: ./src/database/core/RepoManager.ts\n/* harmony import */ var RepoManager___WEBPACK_IMPORTED_MODULE_0__utils_obj__ = __webpack_require__(2);\n/* harmony import */ var RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(1);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n/** @const {string} */\nvar DATABASE_URL_OPTION = 'databaseURL';\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\nvar RepoManager_RepoManager = function () {\n    function RepoManager() {\n        /**\r\n         * @private {!Object.<string, !Repo>}\r\n         */\n        this.repos_ = {};\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\n        this.useRestClient_ = false;\n    }\n    RepoManager.getInstance = function () {\n        if (!_staticInstance) {\n            _staticInstance = new RepoManager();\n        }\n        return _staticInstance;\n    };\n    // TODO(koss): Remove these functions unless used in tests?\n    RepoManager.prototype.interrupt = function () {\n        for (var repo in this.repos_) {\n            this.repos_[repo].interrupt();\n        }\n    };\n    RepoManager.prototype.resume = function () {\n        for (var repo in this.repos_) {\n            this.repos_[repo].resume();\n        }\n    };\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\n    RepoManager.prototype.databaseFromApp = function (app) {\n        var dbUrl = app.options[DATABASE_URL_OPTION];\n        if (dbUrl === undefined) {\n            Object(RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__[\"o\" /* fatal */])(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.intializeApp().');\n        }\n        var parsedUrl = parser_parseRepoInfo(dbUrl);\n        var repoInfo = parsedUrl.repoInfo;\n        validation_validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n        if (!parsedUrl.path.isEmpty()) {\n            Object(RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__[\"o\" /* fatal */])('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n        }\n        var repo = this.createRepo(repoInfo, app);\n        return repo.database;\n    };\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\n    RepoManager.prototype.deleteRepo = function (repo) {\n        // This should never happen...\n        if (Object(RepoManager___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"l\" /* safeGet */])(this.repos_, repo.app.name) !== repo) {\n            Object(RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__[\"o\" /* fatal */])('Database ' + repo.app.name + ' has already been deleted.');\n        }\n        repo.interrupt();\n        delete this.repos_[repo.app.name];\n    };\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\n        var repo = Object(RepoManager___WEBPACK_IMPORTED_MODULE_0__utils_obj__[\"l\" /* safeGet */])(this.repos_, app.name);\n        if (repo) {\n            Object(RepoManager___WEBPACK_IMPORTED_MODULE_2__util_util__[\"o\" /* fatal */])('FIREBASE INTERNAL ERROR: Database initialized multiple times.');\n        }\n        repo = new Repo_Repo(repoInfo, this.useRestClient_, app);\n        this.repos_[app.name] = repo;\n        return repo;\n    };\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\n        this.useRestClient_ = forceRestClient;\n    };\n    return RepoManager;\n}();\n\n// CONCATENATED MODULE: ./src/database/api/Database.ts\n/* harmony import */ var Database___WEBPACK_IMPORTED_MODULE_0__core_util_util__ = __webpack_require__(1);\n/* harmony import */ var Database___WEBPACK_IMPORTED_MODULE_3__utils_promise__ = __webpack_require__(5);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\n\n\n\n\n\n\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\nvar Database_Database = function () {\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\n    function Database(repo_) {\n        this.repo_ = repo_;\n        if (!(repo_ instanceof Repo_Repo)) {\n            Object(Database___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"o\" /* fatal */])(\"Don't call new Database() directly - please use firebase.database().\");\n        }\n        /** @type {Reference} */\n        this.root_ = new Reference_Reference(repo_, Path.Empty);\n        this.INTERNAL = new Database_DatabaseInternals(this);\n    }\n    Object.defineProperty(Database.prototype, \"app\", {\n        get: function get() {\n            return this.repo_.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\r\n     * Returns a reference to the root or the path specified in opt_pathString.\r\n     * @param {string=} pathString\r\n     * @return {!Reference} Firebase reference.\r\n     */\n    Database.prototype.ref = function (pathString) {\n        this.checkDeleted_('ref');\n        validateArgCount('database.ref', 0, 1, arguments.length);\n        return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n    };\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\n    Database.prototype.refFromURL = function (url) {\n        /** @const {string} */\n        var apiName = 'database.refFromURL';\n        this.checkDeleted_(apiName);\n        validateArgCount(apiName, 1, 1, arguments.length);\n        var parsedURL = parser_parseRepoInfo(url);\n        validation_validateUrl(apiName, 1, parsedURL);\n        var repoInfo = parsedURL.repoInfo;\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\n            Object(Database___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"o\" /* fatal */])(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n        }\n        return this.ref(parsedURL.path.toString());\n    };\n    /**\r\n     * @param {string} apiName\r\n     */\n    Database.prototype.checkDeleted_ = function (apiName) {\n        if (this.repo_ === null) {\n            Object(Database___WEBPACK_IMPORTED_MODULE_0__core_util_util__[\"o\" /* fatal */])('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    };\n    // Make individual repo go offline.\n    Database.prototype.goOffline = function () {\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\n        this.checkDeleted_('goOffline');\n        this.repo_.interrupt();\n    };\n    Database.prototype.goOnline = function () {\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\n        this.checkDeleted_('goOnline');\n        this.repo_.resume();\n    };\n    Database.ServerValue = {\n        TIMESTAMP: {\n            '.sv': 'timestamp'\n        }\n    };\n    return Database;\n}();\n\nvar Database_DatabaseInternals = function () {\n    /** @param {!Database} database */\n    function DatabaseInternals(database) {\n        this.database = database;\n    }\n    /** @return {Promise<void>} */\n    DatabaseInternals.prototype.delete = function () {\n        this.database.checkDeleted_('delete');\n        RepoManager_RepoManager.getInstance().deleteRepo(this.database.repo_);\n        this.database.repo_ = null;\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return Database___WEBPACK_IMPORTED_MODULE_3__utils_promise__[\"b\" /* PromiseImpl */].resolve();\n    };\n    return DatabaseInternals;\n}();\n\n// CONCATENATED MODULE: ./src/database/api/internal.ts\nvar internal_namespaceObject = {};\n__webpack_require__.d(internal_namespaceObject, \"forceLongPolling\", function() { return internal_forceLongPolling; });\n__webpack_require__.d(internal_namespaceObject, \"forceWebSockets\", function() { return internal_forceWebSockets; });\n__webpack_require__.d(internal_namespaceObject, \"isWebSocketsAvailable\", function() { return isWebSocketsAvailable; });\n__webpack_require__.d(internal_namespaceObject, \"setSecurityDebugCallback\", function() { return setSecurityDebugCallback; });\n__webpack_require__.d(internal_namespaceObject, \"stats\", function() { return internal_stats; });\n__webpack_require__.d(internal_namespaceObject, \"statsIncrementCounter\", function() { return statsIncrementCounter; });\n__webpack_require__.d(internal_namespaceObject, \"dataUpdateCount\", function() { return dataUpdateCount; });\n__webpack_require__.d(internal_namespaceObject, \"interceptServerData\", function() { return interceptServerData; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__realtime_WebSocketConnection__ = __webpack_require__(18);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\nvar internal_forceLongPolling = function forceLongPolling() {\n    __WEBPACK_IMPORTED_MODULE_0__realtime_WebSocketConnection__[\"a\" /* WebSocketConnection */].forceDisallow();\n    BrowserPollConnection_BrowserPollConnection.forceAllow();\n};\nvar internal_forceWebSockets = function forceWebSockets() {\n    BrowserPollConnection_BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\nvar isWebSocketsAvailable = function isWebSocketsAvailable() {\n    return __WEBPACK_IMPORTED_MODULE_0__realtime_WebSocketConnection__[\"a\" /* WebSocketConnection */]['isAvailable']();\n};\nvar setSecurityDebugCallback = function setSecurityDebugCallback(ref, callback) {\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\nvar internal_stats = function stats(ref, showDelta) {\n    ref.repo.stats(showDelta);\n};\nvar statsIncrementCounter = function statsIncrementCounter(ref, metric) {\n    ref.repo.statsIncrementCounter(metric);\n};\nvar dataUpdateCount = function dataUpdateCount(ref) {\n    return ref.repo.dataUpdateCount;\n};\nvar interceptServerData = function interceptServerData(ref, callback) {\n    return ref.repo.interceptServerData_(callback);\n};\n// CONCATENATED MODULE: ./src/database/api/test_access.ts\nvar test_access_namespaceObject = {};\n__webpack_require__.d(test_access_namespaceObject, \"DataConnection\", function() { return DataConnection; });\n__webpack_require__.d(test_access_namespaceObject, \"RealTimeConnection\", function() { return RealTimeConnection; });\n__webpack_require__.d(test_access_namespaceObject, \"hijackHash\", function() { return test_access_hijackHash; });\n__webpack_require__.d(test_access_namespaceObject, \"ConnectionTarget\", function() { return ConnectionTarget; });\n__webpack_require__.d(test_access_namespaceObject, \"queryIdentifier\", function() { return queryIdentifier; });\n__webpack_require__.d(test_access_namespaceObject, \"listens\", function() { return listens; });\n__webpack_require__.d(test_access_namespaceObject, \"forceRestClient\", function() { return test_access_forceRestClient; });\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\nvar DataConnection = PersistentConnection_PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\nPersistentConnection_PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\nPersistentConnection_PersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nvar RealTimeConnection = Connection_Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\nvar test_access_hijackHash = function hijackHash(newHash) {\n    var oldPut = PersistentConnection_PersistentConnection.prototype.put;\n    PersistentConnection_PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\n        if (opt_hash !== undefined) {\n            opt_hash = newHash();\n        }\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n    };\n    return function () {\n        PersistentConnection_PersistentConnection.prototype.put = oldPut;\n    };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\nvar queryIdentifier = function queryIdentifier(query) {\n    return query.queryIdentifier();\n};\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\nvar listens = function listens(firebaseRef) {\n    return firebaseRef.repo.persistentConnection_.listens_;\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\nvar test_access_forceRestClient = function forceRestClient(_forceRestClient) {\n    RepoManager_RepoManager.getInstance().forceRestClient(_forceRestClient);\n};\n// CONCATENATED MODULE: ./src/database.ts\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (immutable) */ __webpack_exports__[\"registerDatabase\"] = registerDatabase;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__app__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__database_core_util_util__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_environment__ = __webpack_require__(6);\n/**\r\n* Copyright 2017 Google Inc.\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\n\n\n\n\n\n\n\n\n\nfunction registerDatabase(instance) {\n    // Register the Database Service with the 'firebase' namespace.\n    var namespace = instance.INTERNAL.registerService('database', function (app) {\n        return RepoManager_RepoManager.getInstance().databaseFromApp(app);\n    },\n    // firebase.database namespace properties\n    {\n        Reference: Reference_Reference,\n        Query: Query_Query,\n        Database: Database_Database,\n        enableLogging: __WEBPACK_IMPORTED_MODULE_4__database_core_util_util__[\"j\" /* enableLogging */],\n        INTERNAL: internal_namespaceObject,\n        ServerValue: Database_Database.ServerValue,\n        TEST_ACCESS: test_access_namespaceObject\n    });\n    if (Object(__WEBPACK_IMPORTED_MODULE_8__utils_environment__[\"b\" /* isNodeSdk */])()) {\n        module.exports = namespace;\n    }\n}\nregisterDatabase(__WEBPACK_IMPORTED_MODULE_0__app__[\"default\"]);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(26)(module)))\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ })\n],[25]);\n          } catch(error) {\n            throw new Error(\n              'Cannot instantiate firebase-database.js - ' +\n              'be sure to load firebase-app.js first.'\n            )\n          }\n\n\n// WEBPACK FOOTER //\n// firebase-database.js","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n * @param {*} assertion The assertion to be tested for falsiness\n * @param {!string} message The message to display if the check fails\n */\nexport const assert = function(assertion, message) {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n * @param {string} message\n * @return {!Error}\n */\nexport const assertionError = function(message) {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/assert.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { globalScope } from './globalScope';\n\nconst stringToByteArray = function(str) {\n  var output = [],\n    p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    while (c > 255) {\n      output[p++] = c & 255;\n      c >>= 8;\n    }\n    output[p++] = c;\n  }\n  return output;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param {Array<number>} bytes Array of numbers representing characters.\n * @return {string} Stringification of the array.\n */\nconst byteArrayToString = function(bytes) {\n  var CHUNK_SIZE = 8192;\n\n  // Special-case the simple case for speed's sake.\n  if (bytes.length < CHUNK_SIZE) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  // The remaining logic splits conversion by chunks since\n  // Function#apply() has a maximum parameter count.\n  // See discussion: http://goo.gl/LrWmZ9\n\n  var str = '';\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    var chunk = bytes.slice(i, i + CHUNK_SIZE);\n    str += String.fromCharCode.apply(null, chunk);\n  }\n  return str;\n};\n\n// Static lookup maps, lazily populated by init_()\nexport const base64 = {\n  /**\n   * Maps bytes to characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   * @type {string}\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   * @type {string}\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   * @type {string}\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   * @type {boolean}\n   */\n  HAS_NATIVE_SUPPORT: typeof globalScope.atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param {boolean=} opt_webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeByteArray(input, opt_webSafe?) {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    var byteToCharMap = opt_webSafe\n      ? this.byteToCharMapWebSafe_\n      : this.byteToCharMap_;\n\n    var output = [];\n\n    for (var i = 0; i < input.length; i += 3) {\n      var byte1 = input[i];\n      var haveByte2 = i + 1 < input.length;\n      var byte2 = haveByte2 ? input[i + 1] : 0;\n      var haveByte3 = i + 2 < input.length;\n      var byte3 = haveByte3 ? input[i + 2] : 0;\n\n      var outByte1 = byte1 >> 2;\n      var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      var outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param {string} input A string to encode.\n   * @param {boolean=} opt_webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param {string} input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the\n   *     alternative alphabet.\n   * @return {string} string representing the decoded value.\n   */\n  decodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param {string} input Input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\n   * @return {!Array<number>} bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input, opt_webSafe) {\n    this.init_();\n\n    var charToByteMap = opt_webSafe\n      ? this.charToByteMapWebSafe_\n      : this.charToByteMap_;\n\n    var output = [];\n\n    for (var i = 0; i < input.length; ) {\n      var byte1 = charToByteMap[input.charAt(i++)];\n\n      var haveByte2 = i < input.length;\n      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      var haveByte3 = i < input.length;\n      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      var haveByte4 = i < input.length;\n      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      var outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 != 64) {\n        var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 != 64) {\n          var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/crypt.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Abstract cryptographic hash interface.\n *\n * See Sha1 and Md5 for sample implementations.\n *\n */\n\n/**\n * Create a cryptographic hash instance.\n *\n * @constructor\n * @struct\n */\nexport class Hash {\n  /**\n   * The block size for the hasher.\n   * @type {number}\n   */\n  blockSize: number = -1;\n\n  constructor() {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/hash.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Hash } from './hash';\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nexport class Sha1 extends Hash {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @type {!Array<number>}\n   * @private\n   */\n  private chain_: Array<number> = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @type {!Array<number>}\n   * @private\n   */\n  private buf_: Array<number> = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @type {!Array<number>}\n   * @private\n   */\n  private W_: Array<number> = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @type {!Array<number>}\n   * @private\n   */\n  private pad_: Array<number> = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  constructor() {\n    super();\n\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (var i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n   * @param {number=} opt_offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf, opt_offset?) {\n    if (!opt_offset) {\n      opt_offset = 0;\n    }\n\n    var W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (var i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(opt_offset) << 24) |\n          (buf.charCodeAt(opt_offset + 1) << 16) |\n          (buf.charCodeAt(opt_offset + 2) << 8) |\n          buf.charCodeAt(opt_offset + 3);\n        opt_offset += 4;\n      }\n    } else {\n      for (var i = 0; i < 16; i++) {\n        W[i] =\n          (buf[opt_offset] << 24) |\n          (buf[opt_offset + 1] << 16) |\n          (buf[opt_offset + 2] << 8) |\n          buf[opt_offset + 3];\n        opt_offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (var i = 16; i < 80; i++) {\n      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    var a = this.chain_[0];\n    var b = this.chain_[1];\n    var c = this.chain_[2];\n    var d = this.chain_[3];\n    var e = this.chain_[4];\n    var f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (var i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes, opt_length?) {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (opt_length === undefined) {\n      opt_length = bytes.length;\n    }\n\n    var lengthMinusBlock = opt_length - this.blockSize;\n    var n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    var buf = this.buf_;\n    var inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < opt_length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf == 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < opt_length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < opt_length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += opt_length;\n  }\n\n  /** @override */\n  digest() {\n    var digest = [];\n    var totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (var i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    var n = 0;\n    for (var i = 0; i < 5; i++) {\n      for (var j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Sha1.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Query } from '../../api/Query';\n\ndeclare const window: any;\ndeclare const Windows: any;\n\nimport { assert } from '../../../utils/assert';\nimport { forEach } from '../../../utils/obj';\nimport { base64 } from '../../../utils/crypt';\nimport { Sha1 } from '../../../utils/Sha1';\nimport { stringToByteArray } from '../../../utils/utf8';\nimport { stringify } from '../../../utils/json';\nimport { SessionStorage } from '../storage/storage';\nimport { isNodeSdk } from '../../../utils/environment';\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: (() => number) = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * URL-safe base64 encoding\n * @param {!string} str\n * @return {!string}\n */\nexport const base64Encode = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, /*useWebSafe=*/ true);\n};\n\nlet BufferImpl;\nexport function setBufferImpl(impl) {\n  BufferImpl = impl;\n}\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param {string} str To be decoded\n * @return {?string} Decoded result, if possible\n */\nexport const base64Decode = function(str: string): string | null {\n  try {\n    if (BufferImpl) {\n      return new BufferImpl(str, 'base64').toString('utf8');\n    } else {\n      return base64.decodeString(str, /*useWebSafe=*/ true);\n    }\n  } catch (e) {\n    log('base64Decode failed: ', e);\n  }\n  return null;\n};\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...var_args: any[]): string {\n  let message = '';\n  for (let i = 0; i < var_args.length; i++) {\n    if (\n      Array.isArray(var_args[i]) ||\n      (var_args[i] &&\n        typeof var_args[i] === 'object' &&\n        typeof var_args[i].length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || (logger_ === true || logger_ === false),\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    if (typeof console !== 'undefined') {\n      if (typeof console.log === 'function') {\n        logger = console.log.bind(console);\n      } else if (typeof console.log === 'object') {\n        // IE does this.\n        logger = function(message) {\n          console.log(message);\n        };\n      }\n    }\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexport const log = function(...var_args: string[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true)\n      enableLogging(true);\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...var_args: any[]) => void {\n  return function(...var_args: any[]) {\n    log(prefix, ...var_args);\n  };\n};\n\n/**\n * @param {...string} var_args\n */\nexport const error = function(...var_args: string[]) {\n  if (typeof console !== 'undefined') {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...var_args);\n    if (typeof console.error !== 'undefined') {\n      console.error(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n/**\n * @param {...string} var_args\n */\nexport const fatal = function(...var_args: string[]) {\n  const message = buildLogMessage_(...var_args);\n  throw new Error('FIREBASE FATAL ERROR: ' + message);\n};\n\n/**\n * @param {...*} var_args\n */\nexport const warn = function(...var_args: any[]) {\n  if (typeof console !== 'undefined') {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...var_args);\n    if (typeof console.warn !== 'undefined') {\n      console.warn(message);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: any): boolean {\n  return (\n    typeof data === 'number' &&\n    (data != data || // NaN\n      data == Number.POSITIVE_INFINITY ||\n      data == Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    let wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n    } else if ((document as any).attachEvent) {\n      // IE.\n      (document as any).attachEvent('onreadystatechange', function() {\n        if (document.readyState === 'complete') wrappedFn();\n      });\n      // fallback to onload.\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: any }\n): any {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: any): string {\n  if (typeof obj !== 'object' || obj === null) return stringify(obj);\n\n  const keys = [];\n  for (let k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param {!(Object|Array)} obj The object or array to iterate over\n * @param {function(?, ?)} fn The function to apply\n */\nexport const each = function(\n  obj: Object | Array<any>,\n  fn: (v?: any, k?: any) => void\n) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; ++i) {\n      fn(i, obj[i]);\n    }\n  } else {\n    /**\n     * in the conversion of code we removed the goog.object.forEach\n     * function which did a value,key callback. We standardized on\n     * a single impl that does a key, value callback. So we invert\n     * to not have to touch the `each` code points\n     */\n    forEach(obj, (key: any, val: any) => fn(val, key));\n  }\n};\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: any) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  let bias = (1 << (ebits - 1)) - 1,\n    s,\n    e,\n    f,\n    ln,\n    i,\n    bits,\n    str;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function() {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...var_args: any[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(function() {\n      callback(...var_args);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: Object,\n  name: string,\n  fnGet: () => any\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | Object {\n  const timeout: number | Object = setTimeout(fn, time);\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/util.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\n\nexport const contains = function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nexport const safeGet = function(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];\n  // else return undefined.\n};\n\n/**\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\n *\n * @param {?Object.<K,V>} obj Object to enumerate.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const forEach = function(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n};\n\n/**\n * Copies all the (own) properties from one object to another.\n * @param {!Object} objTo\n * @param {!Object} objFrom\n * @return {!Object} objTo\n */\nexport const extend = function(objTo, objFrom) {\n  forEach(objFrom, function(key, value) {\n    objTo[key] = value;\n  });\n  return objTo;\n};\n\n/**\n * Returns a clone of the specified object.\n * @param {!Object} obj\n * @return {!Object} cloned obj.\n */\nexport const clone = function(obj) {\n  return extend({}, obj);\n};\n\n/**\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\n * for functions.\n *\n * @param obj {*} A potential object.\n * @returns {boolean} True if it's an object.\n */\nexport const isNonNullObject = function(obj) {\n  return typeof obj === 'object' && obj !== null;\n};\n\nexport const isEmpty = function(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nexport const getCount = function(obj) {\n  var rv = 0;\n  for (var key in obj) {\n    rv++;\n  }\n  return rv;\n};\n\nexport const map = function(obj, f, opt_obj?) {\n  var res = {};\n  for (var key in obj) {\n    res[key] = f.call(opt_obj, obj[key], key, obj);\n  }\n  return res;\n};\n\nexport const findKey = function(obj, fn, opt_this?) {\n  for (var key in obj) {\n    if (fn.call(opt_this, obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n};\n\nexport const findValue = function(obj, fn, opt_this?) {\n  var key = findKey(obj, fn, opt_this);\n  return key && obj[key];\n};\n\nexport const getAnyKey = function(obj) {\n  for (var key in obj) {\n    return key;\n  }\n};\n\nexport const getValues = function(obj) {\n  var res = [];\n  var i = 0;\n  for (var key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n};\n\n/**\n * Tests whether every key/value pair in an object pass the test implemented\n * by the provided function\n *\n * @param {?Object.<K,V>} obj Object to test.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const every = function<V>(\n  obj: Object,\n  fn: (k: string, v?: V) => boolean\n): boolean {\n  for (let key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!fn(key, obj[key])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/obj.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport const jsonEval = function(str) {\n  return JSON.parse(str);\n};\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport const stringify = function(data) {\n  return JSON.stringify(data);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/json.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return {string} user agent string\n */\nexport const getUA = function() {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n};\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\n * Cordova `onDeviceReady`, which would normally wait for a callback.\n *\n * @return {boolean} isMobileCordova\n */\nexport const isMobileCordova = function() {\n  return (\n    typeof window !== 'undefined' &&\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n};\n\n/**\n * Detect React Native.\n *\n * @return {boolean} True if ReactNative environment is detected.\n */\nexport const isReactNative = function() {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n};\n\n/**\n * Detect Node.js.\n *\n * @return {boolean} True if Node.js environment is detected.\n */\nexport const isNodeSdk = function() {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/environment.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '4.3.0'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/constants.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { jsonEval, stringify } from '../../../utils/json';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/storage/DOMStorageWrapper.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { contains } from '../../../utils/obj';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/storage/MemoryStorage.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: any;\n\n/**\n* Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n* TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n* to reflect this type\n*\n* @param {string} domStorageName Name of the underlying storage object\n*   (e.g. 'localStorage' or 'sessionStorage').\n* @return {?} Turning off type information until a common interface is defined.\n*/\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/storage/storage.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/Constants.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function(str) {\n  var out = [],\n    p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      var high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function(str) {\n  var p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/utf8.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { deepCopy } from '../../../utils/deep_copy';\nimport { contains } from '../../../utils/obj';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) this.counters_[name] = 0;\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/stats/StatsCollection.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: any } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/stats/StatsManager.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RepoInfo } from '../core/RepoInfo';\n\ndeclare const MozWebSocket: any;\n\nimport firebase from '../../app';\nimport { assert } from '../../utils/assert';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { CONSTANTS as ENV_CONSTANTS } from '../../utils/constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { jsonEval, stringify } from '../../utils/json';\nimport { isNodeSdk } from '../../utils/environment';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: Object) => void;\n  mySock: any | null;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${firebase.SDK_VERSION}/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') == 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = (m: object) => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = (e: any) => {\n      this.log_('WebSocket error.  Closing connection.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: Boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length == this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: any }) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: Object) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/WebSocketConnection.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseURL(dataURL),\n    namespace = parsedUrl.subdomain;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (!namespace || namespace == 'undefined') {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\n */\nexport const parseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host and path.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    host = dataURL.substring(0, slashInd);\n    pathString = decodePath(dataURL.substring(slashInd));\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    }\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/libs/parser.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    var error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  var error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nexport const validateNamespace = function(\n  fnName,\n  argumentNumber,\n  namespace,\n  optional\n) {\n  if (optional && !namespace) return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n};\n\nexport const validateCallback = function(\n  fnName,\n  argumentNumber,\n  callback,\n  optional\n) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function')\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n};\n\nexport const validateContextObject = function(\n  fnName,\n  argumentNumber,\n  context,\n  optional\n) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null)\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/validation.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/comparators.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { forEach, contains } from '../../../utils/obj';\nimport { assert } from '../../../utils/assert';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json as object;\n    forEach(hinzeJsonObj, (key: string, child: any) => {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(hinzeJsonObj[key]);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    const jsonObj = json as object;\n    forEach(jsonObj, (key: string, childData: any) => {\n      if (contains(jsonObj, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/nodeFromJSON.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '../../../../utils/assert';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/indexes/KeyIndex.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '../../../utils/obj';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/snap.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | object,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: String, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE\n        .updateImmediateChild(childName, newChildNode)\n        .updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): any {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): Object {\n    if (exportFormat && !this.getPriority().isEmpty())\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    else return this.getValue();\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): object | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/LeafNode.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/indexes/PriorityIndex.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { buildChildSet } from './childSet';\nimport { contains, clone, map, safeGet } from '../../../utils/obj';\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\n/**\n *\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\n * @param {Object.<string, Index>} indexSet\n * @constructor\n */\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   * @type {!IndexMap}\n   * @const\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  /**\n   *\n   * @param {!string} indexKey\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap === fallbackObject) {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    } else {\n      return sortedMap;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = clone(this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = clone(this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   * @param {!NamedNode} namedNode\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name != namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   * @param {!NamedNode} namedNode\n   * @param {!SortedMap.<string, !Node>} existingChildren\n   * @return {!IndexMap}\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(this.indexes_, function(\n      indexedChildren: SortedMap<NamedNode, Node>\n    ) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(\n            new NamedNode(namedNode.name, existingSnap)\n          );\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/IndexMap.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) return this;\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap, newPriority;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) return null;\n\n    const obj: { [k: string]: Object } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function(key: string, childNode: Node) {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: Object[] = [];\n      for (let key in obj) array[(key as any) as number] = obj[key];\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n\n      this.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        const childHash = childNode.hash();\n        if (childHash !== '') toHash += ':' + key + ':' + childHash;\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(index: Index, action: (key: string, node: Node) => void): any {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function(wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function(key) {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/ChildrenNode.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { nameCompare } from './util';\nimport { stringLength } from '../../../utils/utf8';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length)\n      return this.pieces_[this.pieces_.length - 1];\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '')\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++)\n      pieces.push(this.pieces_[i]);\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++)\n      pieces.push(this.pieces_[i]);\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/Path.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { forEach } from '../../utils/obj';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    forEach(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/RepoInfo.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path, ValidationPath } from './Path';\nimport { forEach, contains, safeGet } from '../../../utils/obj';\nimport { isInvalidJSONNumber } from './util';\nimport { errorPrefix as errorPrefixFxn } from '../../../utils/validation';\nimport { stringLength } from '../../../utils/utf8';\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: any): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: any): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority && typeof priority === 'object' && contains(priority, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: any,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false,\n      hasActualChild = false;\n    forEach(data, function(key: string, value: any) {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  forEach(data, function(key: string, value: any) {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: any,\n  optional: boolean\n) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) return;\n\n  if (!isValidPathString(pathString))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    !isValidKey(parsedUrl.repoInfo.namespace) ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: any,\n  optional: boolean\n) {\n  if (optional && cred === undefined) return;\n  if (!(typeof cred === 'string'))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: any,\n  optional: boolean\n) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean')\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: any,\n  optional: boolean\n) {\n  if (optional && string === undefined) return;\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  optional: boolean\n) {\n  if (optional && obj === undefined) return;\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  key: string,\n  optional: boolean,\n  opt_type?: string\n) {\n  const objectContainsKey =\n    obj && typeof obj === 'object' && contains(obj, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (opt_type) {\n    const val = safeGet(obj, key);\n    if (\n      (opt_type === 'number' && !(typeof val === 'number')) ||\n      (opt_type === 'string' && !(typeof val === 'string')) ||\n      (opt_type === 'boolean' && !(typeof val === 'boolean')) ||\n      (opt_type === 'function' && !(typeof val === 'function')) ||\n      (opt_type === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            opt_type +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            opt_type +\n            '\"'\n        );\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/validation.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '../../utils/promise';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/onDisconnect.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '../../utils/validation';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/TransactionResult.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/NextPushId.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: String,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): any;\n\n  /**\n   * @param {boolean=} exportFormat True for export format (also wire protocol format).\n   * @return {*} Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): Object;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/Node.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: any, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/indexes/Index.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: (LLRBNode<K, V> | LLRBEmptyNode<K, V>)[] = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_)\n      result = this.resultGenerator_(node.key, node.value);\n    else result = { key: node.key, value: node.value } as any;\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as any;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    this.right =\n      right != null ? right : SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n = this as any;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    let blackDepth;\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) node = node.right;\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/SortedMap.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { LLRBNode } from '../util/SortedMap';\nimport { SortedMap } from '../util/SortedMap';\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as any) as K;\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as any) as K;\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as any) as K;\n      attachPennant(\n        new LLRBNode(key, (namedNode.node as any) as V, color, null, childTree)\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/childSet.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/indexes/ValueIndex.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\nimport {\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '../../utils/validation';\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\nimport { Deferred, attachDummyErrorHandler } from '../../utils/promise';\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string): any;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => any) | Object,\n    context?: Object\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: Object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => any) | null,\n    context: Object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(eventType?: string, callback?: SnapshotCallback, context?: Object) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param cancelOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    cancelOrContext?: ((a: Error) => void) | Object,\n    context?: Object\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      cancelOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred();\n    attachDummyErrorHandler(deferred.promise);\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) ret.cancel.bind(ret.context)(err);\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): Object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | Object,\n    context?: Object\n  ): { cancel: ((a: Error) => void) | null; context: Object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: Object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/Query.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/operation/Operation.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../../utils/assert';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/snap/indexes/PathIndex.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): any {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): any {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): any {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) return false;\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) return false;\n    else return !this.node_.isEmpty();\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/DataSnapshot.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { stringify } from '../../../utils/json';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType:\n      | 'value'\n      | ' child_added'\n      | ' child_changed'\n      | ' child_moved'\n      | ' child_removed',\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/Event.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event } from './Event';\nimport { contains, getCount, getAnyKey, every } from '../../../utils/obj';\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: Object | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_:\n      | ({ [k: string]: (d: DataSnapshot, s?: string | null) => void })\n      | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: Object\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child /** @type {!string} */(change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as any,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index as any),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherCount = getCount(other.callbacks_);\n        const thisCount = getCount(this.callbacks_);\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          //  If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey /** @type {!string} */ = getAnyKey(other.callbacks_);\n            const thisKey /** @type {!string} */ = getAnyKey(this.callbacks_);\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return every(\n              this.callbacks_,\n              (eventType, cb) => other.callbacks_[eventType] === cb\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/EventRegistration.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { isEmpty, getCount, forEach, contains } from '../../../utils/obj';\n\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nexport class CountedSet<K, V> {\n  set: { [k: string]: V } = {};\n\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  add(item: K, val: V) {\n    this.set[item as any] = val !== null ? val : true as any;\n  }\n\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  contains(key: K) {\n    return contains(this.set, key);\n  }\n\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  get(item: K): V | void {\n    return this.contains(item) ? this.set[item as any] : undefined;\n  }\n\n  /**\n   * @param {!K} item\n   */\n  remove(item: K) {\n    delete this.set[item as any];\n  }\n\n  /**\n   * Deletes everything in the set\n   */\n  clear() {\n    this.set = {};\n  }\n\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.set);\n  }\n\n  /**\n   * @return {number} The number of items in the set\n   */\n  count(): number {\n    return getCount(this.set);\n  }\n\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  each(fn: (k: K, v: V) => void) {\n    forEach(this.set, (k: K, v: V) => fn(k, v));\n  }\n\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  keys(): K[] {\n    const keys: K[] = [];\n    forEach(this.set, (k: K) => {\n      keys.push(k);\n    });\n    return keys;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/CountedSet.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { CountedSet } from './util/CountedSet';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n *\n * @constructor\n */\nexport class SparseSnapshotTree {\n  /**\n   * @private\n   * @type {Node}\n   */\n  private value_: Node | null = null;\n\n  /**\n   * @private\n   * @type {CountedSet}\n   */\n  private children_: CountedSet<string, SparseSnapshotTree> | null = null;\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @return {?Node} The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value_ != null) {\n      return this.value_.getChild(path);\n    } else if (!path.isEmpty() && this.children_ != null) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children_.contains(childKey)) {\n        const childTree = this.children_.get(childKey) as SparseSnapshotTree;\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @param {!Node} data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value_ = data;\n      this.children_ = null;\n    } else if (this.value_ !== null) {\n      this.value_ = this.value_.updateChild(path, data);\n    } else {\n      if (this.children_ == null) {\n        this.children_ = new CountedSet<string, SparseSnapshotTree>();\n      }\n\n      const childKey = path.getFront();\n      if (!this.children_.contains(childKey)) {\n        this.children_.add(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children_.get(childKey) as SparseSnapshotTree;\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param {!Path} path Path to look up snapshot for.\n   * @return {boolean} True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value_ = null;\n      this.children_ = null;\n      return true;\n    } else {\n      if (this.value_ !== null) {\n        if (this.value_.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value_;\n          this.value_ = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, function(key, tree) {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children_ !== null) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children_.contains(childKey)) {\n          const safeToRemove = (this.children_.get(\n            childKey\n          ) as SparseSnapshotTree).forget(path);\n          if (safeToRemove) {\n            this.children_.remove(childKey);\n          }\n        }\n\n        if (this.children_.isEmpty()) {\n          this.children_ = null;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param {!Path} prefixPath Path to look up node for.\n   * @param {!Function} func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => any) {\n    if (this.value_ !== null) {\n      func(prefixPath, this.value_);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param {!Function} func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    if (this.children_ !== null) {\n      this.children_.each((key, tree) => {\n        func(key, tree);\n      });\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/SparseSnapshotTree.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(values: {\n  [k: string]: any;\n} | null): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/ServerValues.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare } from './util';\nimport { forEach } from '../../../utils/obj';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    forEach(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(function(\n      childKey: string,\n      childTree: ImmutableTree<T>\n    ) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal(function(childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/ImmutableTree.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '../../utils/assert';\nimport { isEmpty, forEach, findValue, safeGet } from '../../utils/obj';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   *\n   * @type {!Object.<!string, !View>}\n   * @private\n   */\n  private views_: { [k: string]: View } = {};\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.views_);\n  }\n\n  /**\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} optCompleteServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = safeGet(this.views_, queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      forEach(this.views_, function(key: string, view: View) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      });\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = safeGet(this.views_, queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode /** @type {!Node} */(\n          eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode /** @type {!Node} */(\n          serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views_[queryId] = view;\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      const self = this;\n      forEach(this.views_, function(viewQueryId: string, view: View) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete self.views_[viewQueryId];\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      });\n    } else {\n      // remove the callback from the specific view.\n      const view = safeGet(this.views_, queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          delete this.views_[queryId];\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed: removed, events: cancelEvents };\n  }\n\n  /**\n   * @return {!Array.<!View>}\n   */\n  getQueryViews(): View[] {\n    const values = Object.keys(this.views_).map(key => this.views_[key]);\n    return values.filter(function(view) {\n      return !view.getQuery().getQueryParams().loadsAllData();\n    });\n  }\n\n  /**\n   *\n   * @param {!Path} path The path to the desired complete snapshot\n   * @return {?Node} A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    forEach(this.views_, (key: string, view: View) => {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    });\n    return serverCache;\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {?View}\n   */\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return safeGet(this.views_, queryId);\n    }\n  }\n\n  /**\n   * @param {!Query} query\n   * @return {boolean}\n   */\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  /**\n   * @return {?View}\n   */\n  getCompleteView(): View | null {\n    const completeView = findValue(this.views_, (view: View) =>\n      view.getQuery().getQueryParams().loadsAllData()\n    );\n    return completeView || null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/SyncPoint.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/operation/AckUserWrite.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/operation/ListenComplete.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/operation/Overwrite.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '../../../utils/assert';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/operation/Merge.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/CacheNode.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/ViewCache.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/Change.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../../utils/assert';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/filter/IndexedFilter.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { getValues, safeGet } from '../../../utils/obj';\nimport { Change } from './Change';\nimport { assert, assertionError } from '../../../utils/assert';\n\n/**\n * @constructor\n */\nexport class ChildChangeAccumulator {\n  private changeMap_: { [k: string]: Change } = {};\n\n  /**\n   * @param {!Change} change\n   */\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey /** @type {!string} */ = change.childName;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = safeGet(this.changeMap_, childKey) as Change;\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        delete this.changeMap_[childKey];\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childRemovedChange(\n          childKey,\n          oldChange.oldSnap\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap_[childKey] = Change.childAddedChange(\n          childKey,\n          change.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.oldSnap\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  }\n\n  /**\n   * @return {!Array.<!Change>}\n   */\n  getChanges(): Change[] {\n    return getValues(this.changeMap_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/ChildChangeAccumulator.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/CompleteChildSource.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '../../../utils/assert';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals /** @type {!Node} */(oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey == '.priority') {\n          assert(\n            changePath.getLength() == 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach(function(relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function(name, node) {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach(function(mergePath, value) {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/ViewProcessor.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '../../../utils/assert';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/EventGenerator.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '../../../utils/assert';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/View.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { forEach } from '../../utils/obj';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '../../utils/assert';\nimport { ChildrenNode } from './snap/ChildrenNode';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n *\n * @constructor\n * @param {!ImmutableTree.<!Node>} writeTree\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n  /**\n   * @type {!CompoundWrite}\n   */\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  /**\n   * @param {!Path} path\n   * @param {!Node} node\n   * @return {!CompoundWrite}\n   */\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} updates\n   * @return {!CompoundWrite}\n   */\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    forEach(updates, function(childKey: string, node: Node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param {!Path} path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param {!Path} path The path to check for\n   * @return {boolean} Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param {!Path} path The path to get a complete write\n   * @return {?Node} The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return {!Array.<NamedNode>} A list of all complete children.\n   */\n  getCompleteChildren(): Array<NamedNode> {\n    const children: NamedNode[] = [];\n    let node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childNode\n        ) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function(childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {!CompoundWrite}\n   */\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return {boolean} Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param {!Node} node The node to apply this CompoundWrite to\n   * @return {!Node} The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @param {!ImmutableTree.<!Node>} writeTree\n   * @param {!Node} node\n   * @return {!Node}\n   * @private\n   */\n  private static applySubtreeWrite_ = function(\n    relativePath: Path,\n    writeTree: ImmutableTree<Node>,\n    node: Node\n  ): Node {\n    if (writeTree.value != null) {\n      // Since there a write is always a leaf, we're done here\n      return node.updateChild(relativePath, writeTree.value);\n    } else {\n      let priorityWrite = null;\n      writeTree.children.inorderTraversal(function(childKey, childTree) {\n        if (childKey === '.priority') {\n          // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n          // to apply priorities to empty nodes that are later filled\n          assert(\n            childTree.value !== null,\n            'Priority writes must always be leaf nodes'\n          );\n          priorityWrite = childTree.value;\n        } else {\n          node = CompoundWrite.applySubtreeWrite_(\n            relativePath.child(childKey),\n            childTree,\n            node\n          );\n        }\n      });\n      // If there was a priority write, we only apply it if the node is not empty\n      if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n        node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n      }\n      return node;\n    }\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/CompoundWrite.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { findKey, forEach, safeGet } from '../../utils/obj';\nimport { assert, assertionError } from '../../utils/assert';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(function(s) {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        forEach(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childSnap\n        ) {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function(\n        childName,\n        childNode\n      ) {\n        const node = merge\n          .childCompoundWrite(new Path(childName))\n          .apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      });\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @param {!WriteRecord} writeRecord\n   * @param {!Path} path\n   * @return {boolean}\n   * @private\n   */\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      // findKey can return undefined, so use !! to coerce to boolean\n      return !!findKey(writeRecord.children, function(\n        childSnap: Node,\n        childName: string\n      ) {\n        return writeRecord.path.child(childName).contains(path);\n      });\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   * @private\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   *\n   * @param {!WriteRecord} write\n   * @return {boolean}\n   * @private\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   *\n   * @param {!Array.<!WriteRecord>} writes\n   * @param {!function(!WriteRecord):boolean} filter\n   * @param {!Path} treeRoot\n   * @return {!CompoundWrite}\n   * @private\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(completeServerChildren: ChildrenNode | null): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/WriteTree.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { forEach, safeGet } from '../../utils/obj';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   * @type {!ImmutableTree.<!SyncPoint>}\n   * @private\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   * @type {!WriteTree}\n   * @private\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private tagToQueryMap_: { [k: string]: string } = {};\n  private queryToTagMap_: { [k: string]: number } = {};\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @param {number} writeId\n   * @param {boolean=} visible\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param {!number} writeId\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        forEach(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @param {!Path} path\n   * @param {!Node} newData\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @param {!Path} path\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @param {!Path} path\n   * @param {!number} tag\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !(queryKey in this.queryToTagMap_),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag;\n      // Coerce to string to avoid sparse arrays.\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap_[\n              SyncTree.makeQueryKey_(queryToRemove)\n            ];\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   * @param {!Path} path The path to the data we want\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   *\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\n   * @return {!Array.<!View>}\n   * @private\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<\n      View[]\n    >((relativePath, maybeChildSyncPoint, childMap) => {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        const completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        let views: View[] = [];\n        if (maybeChildSyncPoint) {\n          views = maybeChildSyncPoint.getQueryViews();\n        }\n        forEach(childMap, function(key: string, childViews: View[]) {\n          views = views.concat(childViews);\n        });\n        return views;\n      }\n    });\n  }\n\n  /**\n   * @param {!Array.<!Query>} queries\n   * @private\n   */\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   * @param {!Query} query\n   * @return {!Query} The normalized query\n   * @private\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return /** @type {!Query} */ query.getRef();\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @param {!Query} query\n   * @param {!View} view\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n   * @private\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          forEach(childMap, function(key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  /**\n   *\n   * @param {!View} view\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\n   * @private\n   */\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   * @private\n   * @param {!Query} query\n   * @return {string}\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   * @private\n   * @param {!string} queryKey\n   * @return {{queryId: !string, path: !Path}}\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   * @param {!number} tag\n   * @return {?string}\n   * @private\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap_['_' + tag];\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   * @param {!Query} query\n   * @return {?number}\n   * @private\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return safeGet(this.queryToTagMap_, queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   * @type {number}\n   * @private\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   * @return {number}\n   * @private\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   *\n   * @param {!Path} queryPath\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   *\n   * @param {!Operation} operation\n   * @return {!Array.<!Event>}\n   * @private\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   *\n   * @private\n   * @param {!Operation} operation\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n   * @param {?Node} serverCache\n   * @param {!WriteTreeRef} writesCache\n   * @return {!Array.<!Event>}\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/SyncTree.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/SnapshotHolder.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { log, warn } from './util/util';\nimport { FirebaseApp, FirebaseAuthTokenData } from '../../app/firebase_app';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  constructor(private app_: FirebaseApp) {}\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/AuthTokenProvider.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { clone, forEach } from '../../../utils/obj';\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta: typeof newStats = clone(newStats);\n    if (this.last_) {\n      forEach(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/stats/StatsListener.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { contains, forEach } from '../../../utils/obj';\nimport { setTimeoutNonBlocking } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    forEach(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/stats/StatsReporter.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/EventQueue.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/EventEmitter.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '../../../utils/assert';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/VisibilityMonitor.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { EventEmitter } from './EventEmitter';\nimport { isMobileCordova } from '../../../utils/environment';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/OnlineMonitor.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { base64Decode } from '../database/core/util/util';\nimport { jsonEval } from './json';\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {{header: *, claims: *, data: *, signature: string}}\n */\nexport const decode = function(token) {\n  var header = {},\n    claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    var parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '');\n    claims = jsonEval(base64Decode(parts[1]) || '');\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header: header,\n    claims: claims,\n    data: data,\n    signature: signature\n  };\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidTimestamp = function(token) {\n  var claims = decode(token).claims,\n    now = Math.floor(new Date().getTime() / 1000),\n    validSince,\n    validUntil;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'];\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'];\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'];\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    now && validSince && validUntil && now >= validSince && now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {?number}\n */\nexport const issuedAtTime = function(token) {\n  var claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'];\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\n * signature.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidFormat = function(token) {\n  var decoded = decode(token),\n    claims = decoded.claims;\n\n  return (\n    !!decoded.signature &&\n    !!claims &&\n    typeof claims === 'object' &&\n    claims.hasOwnProperty('iat')\n  );\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isAdmin = function(token) {\n  var claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/jwt.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/polling/PacketReceiver.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport {\n  base64Encode,\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { CountedSet } from '../core/util/CountedSet';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { stringify } from '../../utils/json';\nimport { isNodeSdk } from '../../utils/environment';\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) return;\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) return; // we closed the connection.\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command == FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1;\n            this.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN, data);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier)\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        !isNodeSdk() &&\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return (\n      BrowserPollConnection.forceAllow_ ||\n      (!BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp() &&\n        !isNodeSdk())\n    );\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: Object) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: any) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  /**\n   * @type {CountedSet.<number, number>}\n   */\n  outstandingRequests = new CountedSet<number, number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: { seg: number; ts: number; d: any }[] = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: any[]) => void;\n  onMessageCB: (...args: any[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: any[]) => void,\n    onMessageCB: (...args: any[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      (window as any)[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      (window as any)[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      (iframe as any).doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      (iframe as any).doc = iframe.contentWindow.document; // Internet Explorer\n    } else if ((iframe as any).document) {\n      (iframe as any).doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (isNodeSdk() && this.myID) {\n      const urlParams: { [k: string]: string } = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      const theURL = this.urlFn(urlParams);\n      (FirebaseIFrameScriptHolder as any).nodeRestRequest(theURL);\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: any) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial, 1);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.remove(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) return;\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/BrowserPollConnection.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable)\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      each(\n        TransportManager.ALL_TRANSPORTS,\n        (i: number, transport: TransportConstructor) => {\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/TransportManager.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: any[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: any[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: Object) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeout_ms = conn['healthyTimeout'] || 0;\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: object) => {\n      if (this.state_ != RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: any }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: object) {\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: any }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: any) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: any }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ == RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/realtime/Connection.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/ServerActions.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport firebase from '../../app';\nimport { forEach, contains, isEmpty, getCount, safeGet } from '../../utils/obj';\nimport { stringify } from '../../utils/json';\nimport { assert } from '../../utils/assert';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { isAdmin, isValidFormat } from '../../utils/jwt';\nimport { Connection } from '../realtime/Connection';\nimport { CONSTANTS } from '../../utils/constants';\nimport {\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '../../utils/environment';\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: any): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: any;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: Object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  /** @private {Object} */\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private listens_: { [path: string]: { [queryId: string]: ListenSpec } } = {};\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: Object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  /** @private {number|null} */\n  private establishConnectionTimer_: number | null = null;\n\n  /** @private {boolean} */\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: any) => void } = {};\n  private requestNumber_ = 0;\n\n  /** @private {?{\n   *   sendRequest(Object),\n   *   close()\n   * }} */\n  private realtime_: {\n    sendRequest(a: Object): void;\n    close(): void;\n  } | null = null;\n\n  /** @private {string|null} */\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  /**\n   * @private\n   */\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   * @type {number}\n   * @private\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param onConnectStatus_\n   * @param onServerInfoUpdate_\n   * @param authTokenProvider_\n   * @param authOverride_\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: any) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: Object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  /**\n   * @param {!string} action\n   * @param {*} body\n   * @param {function(*)=} onResponse\n   * @protected\n   */\n  protected sendRequest(\n    action: string,\n    body: any,\n    onResponse?: (a: any) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    this.listens_[pathString] = this.listens_[pathString] || {};\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens_[pathString][queryId],\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens_[pathString][queryId] = listenSpec;\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  /**\n   * @param {!{onComplete(),\n   *           hashFn():!string,\n   *           query: !Query,\n   *           tag: ?number}} listenSpec\n   * @private\n   */\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: any }) => {\n      const payload: any = message[/*data*/ 'd'];\n      const status: string = message[/*status*/ 's'];\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens_[pathString] && this.listens_[pathString][queryId];\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  /**\n   * @param {*} payload\n   * @param {!Query} query\n   * @private\n   */\n  private static warnOnListenWarnings_(payload: any, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          'Using an unspecified index. Consider adding ' +\n            indexSpec +\n            ' at ' +\n            indexPath +\n            ' to your security rules for better performance'\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  /**\n   * @param {!string} credential\n   * @private\n   */\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: any } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, (res: { [k: string]: any }) => {\n        const status: string = res[/*status*/ 's'];\n        const data: string = res[/*data*/ 'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: Object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: any }) => {\n      if (onComplete) {\n        setTimeout(function() {\n          onComplete(response[/*status*/ 's'], response[/* data */ 'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: any } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) request[/*hash*/ 'h'] = hash;\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: any }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete)\n        onComplete(message[/*status*/ 's'], message[/* data */ 'd']);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: any }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {*} message\n   * @private\n   */\n  private onDataMessage_(message: { [k: string]: any }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: any }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t']\n      );\n    else if (action === 'm')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t']\n      );\n    else if (action === 'c')\n      this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);\n    else if (action === 'ac')\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'],\n        body[/* explanation */ 'd']\n      );\n    else if (action === 'sd') this.onSecurityDebugPacket_(body);\n    else\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n    }, Math.floor(timeout)) as any;\n  }\n\n  /**\n   * @param {boolean} visible\n   * @private\n   */\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: Object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(function(result) {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ function(reason) {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, function(error) {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  /**\n   * @param {string} reason\n   */\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  /**\n   * @param {string} reason\n   */\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  }\n\n  /**\n   * @param {!string} pathString\n   * @param {Array.<*>=} query\n   * @private\n   */\n  private onListenRevoked_(pathString: string, query?: any[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  }\n\n  /**\n   * @param {!string} pathString\n   * @param {!string} queryId\n   * @return {{queries:Array.<Query>, onComplete:function(string)}}\n   * @private\n   */\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens_[normalizedPathString] !== undefined) {\n      listen = this.listens_[normalizedPathString][queryId];\n      delete this.listens_[normalizedPathString][queryId];\n      if (getCount(this.listens_[normalizedPathString]) === 0) {\n        delete this.listens_[normalizedPathString];\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: any }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body && typeof console !== 'undefined') {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    forEach(this.listens_, (pathString: string, queries: Object) => {\n      forEach(queries, (key: string, listenSpec: ListenSpec) => {\n        this.sendListen_(listenSpec);\n      });\n    });\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   * @private\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats[\n      'sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')\n    ] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/PersistentConnection.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { forEach } from './obj';\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n *\n * @param {!Object} querystringParams\n * @return {string}\n */\nexport const querystring = function(querystringParams) {\n  var params = [];\n  forEach(querystringParams, function(key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function(arrayVal) {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\nexport const querystringDecode = function(querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(function(token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/util.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { logWrapper, warn } from './util/util';\nimport { jsonEval } from '../../utils/json';\nimport { safeGet } from '../../utils/obj';\nimport { querystring } from '../../utils/util';\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: any }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: any[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: Object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParamaters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParamaters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error == 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: any } = {},\n    callback: ((a: number | null, b?: any) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/ReadonlyRestClient.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify } from '../../utils/json';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\nimport { map, forEach, isEmpty } from '../../utils/obj';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '../../app/firebase_app';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactions_init_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: any) => void)\n    | null = null;\n  private __database: Database;\n\n  // A list of data pieces and paths to be set when this client disconnects.\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  /**\n   * TODO: This should be @private but it's used by test_access.js and internal.js\n   * @type {?PersistentConnection}\n   */\n  persistentConnection_: PersistentConnection | null = null;\n\n  /**\n   * @param {!RepoInfo} repoInfo_\n   * @param {boolean} forceRestClient\n   * @param {!FirebaseApp} app\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp\n  ) {\n    /** @type {!AuthTokenProvider} */\n    const authTokenProvider = new AuthTokenProvider(app);\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactions_init_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return {string}  The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return {!string} The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   * @return {!Object}\n   */\n  generateServerValues(): Object {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   *\n   * @private\n   * @param {string} pathString\n   * @param {*} data\n   * @param {boolean} isMerge\n   * @param {?number} tag\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: any,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(data as { [k: string]: any }, (raw: any) =>\n          nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(data as { [k: string]: any }, (raw: any) =>\n        nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  /**\n   * TODO: This should be @private but it's used by test_access.js and internal.js\n   * @param {?function(!string, *):*} callback\n   * @private\n   */\n  interceptServerData_(callback: ((a: string, b: any) => any) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  /**\n   * @param {!boolean} connectStatus\n   * @private\n   */\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  /**\n   * @param {!Object} updates\n   * @private\n   */\n  private onServerInfoUpdate_(updates: Object) {\n    each(updates, (value: any, key: string) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  /**\n   *\n   * @param {!string} pathString\n   * @param {*} value\n   * @private\n   */\n  private updateInfo_(pathString: string, value: any) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  /**\n   * @return {!number}\n   * @private\n   */\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} newVal\n   * @param {number|string|null} newPriority\n   * @param {?function(?Error, *=)} onComplete\n   */\n  setWithPriority(\n    path: Path,\n    newVal: any,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {!Object} childrenToMerge\n   * @param {?function(?Error, *=)} onComplete\n   */\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    forEach(childrenToMerge, (changedKey: string, changedValue: any) => {\n      empty = false;\n      const newNodeUnresolved = nodeFromJSON(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      forEach(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   * @private\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = resolveDeferredValueTree(\n      this.onDisconnect_,\n      serverValues\n    );\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} value\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectSet(\n    path: Path,\n    value: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} value\n   * @param {*} priority\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: any,\n    priority: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Path} path\n   * @param {*} childrenToMerge\n   * @param {?function(?Error, *=)} onComplete\n   */\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          forEach(childrenToMerge, (childName: string, childNode: any) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  /**\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  /**\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration\n   */\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') return;\n\n    let stats: { [k: string]: any };\n    if (showDelta) {\n      if (!this.statsListener_)\n        this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    forEach(stats, (stat: string, value: any) => {\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) stat += ' ';\n      console.log(stat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  /**\n   * @param {...*} var_args\n   * @private\n   */\n  private log_(...var_args: any[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...var_args);\n  }\n\n  /**\n   * @param {?function(?Error, *=)} callback\n   * @param {!string} status\n   * @param {?string=} errorReason\n   */\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(function() {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) message += ': ' + errorReason;\n\n          const error = new Error(message);\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/Repo.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/filter/RangedFilter.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '../../../../utils/assert';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          let next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          let inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() == this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : oldEventCache.getLastChild(this.index_) as NamedNode;\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/filter/LimitedFilter.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '../../../utils/json';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/view/QueryParams.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport {\n  Deferred,\n  attachDummyErrorHandler,\n  PromiseImpl\n} from '../../utils/promise';\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  public then: (a?: any) => Promise<any>;\n  public catch: (a?: Error) => Promise<any>;\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) return null;\n    else return this.path.getBack();\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null)\n        validateRootPathString('Reference.child', 1, pathString, false);\n      else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref = this as any;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(newVal: any, onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: Object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: any,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: any) => any,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    if (applyLocally === undefined) applyLocally = true;\n\n    const deferred = new Deferred();\n    if (typeof onComplete === 'function') {\n      attachDummyErrorHandler(deferred.promise);\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: any, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = PromiseImpl.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      attachDummyErrorHandler(promise);\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/Reference.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { contains, safeGet } from '../../utils/obj';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ntype Transaction = {\n  path: Path;\n  update: (a: any) => any;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n};\n\n/**\n * Setup the transaction data structures\n * @private\n */\n(Repo.prototype as any).transactions_init_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: any) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: any) => any,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Array<Transaction>\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(function(txn) {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /**@type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            else queue[i].status = TransactionStatus.RUN;\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Array<Transaction>,\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(function(q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(function(q) {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  while (\n    (front = path.getFront()) !== null &&\n    transactionNode.getValue() === null\n  ) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Array<Transaction> {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function(a, b) {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Array<Transaction>\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/Repo_transaction.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from './Path';\nimport { forEach, contains, safeGet } from '../../../utils/obj';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as any,\n      next;\n    while ((next = path.getFront()) !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    forEach(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) action(this);\n\n    this.forEachChild(function(child) {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) action(this);\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(function(child) {\n      if (child.getValue() !== null) action(child);\n      else child.forEachImmediateDescendantWithValue(action);\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/util/Tree.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FirebaseApp } from '../../app/firebase_app';\nimport { safeGet } from '../../utils/obj';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, !Repo>}\n   */\n  private repos_: {\n    [name: string]: Repo;\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const repo in this.repos_) {\n      this.repos_[repo].interrupt();\n    }\n  }\n\n  resume() {\n    for (const repo in this.repos_) {\n      this.repos_[repo].resume();\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp): Database {\n    const dbUrl: string = app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.intializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    // This should never happen...\n    if (safeGet(this.repos_, repo.app.name) !== repo) {\n      fatal('Database ' + repo.app.name + ' has already been deleted.');\n    }\n    repo.interrupt();\n    delete this.repos_[repo.app.name];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let repo = safeGet(this.repos_, app.name);\n    if (repo) {\n      fatal('FIREBASE INTERNAL ERROR: Database initialized multiple times.');\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    this.repos_[app.name] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/core/RepoManager.ts","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { PromiseImpl } from '../../utils/promise';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '../../utils/validation';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp, FirebaseService } from '../../app/firebase_app';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  ref(pathString?: string): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return PromiseImpl.resolve();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/Database.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: Object) => void\n) {\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: any) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/internal.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: any) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n(PersistentConnection.prototype as any).echo = function(\n  data: any,\n  onEcho: (a: any) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    opt_onComplete,\n    opt_hash\n  ) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * @param {!Query} firebaseRef\n * @return {!Object}\n */\nexport const listens = function(firebaseRef: Query) {\n  return (firebaseRef.repo.persistentConnection_ as any).listens_;\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/database/api/test_access.ts","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport firebase from './app';\nimport { FirebaseApp, FirebaseNamespace } from './app/firebase_app';\nimport { Database } from './database/api/Database';\nimport { Query } from './database/api/Query';\nimport { Reference } from './database/api/Reference';\nimport { enableLogging } from './database/core/util/util';\nimport { RepoManager } from './database/core/RepoManager';\nimport * as INTERNAL from './database/api/internal';\nimport * as TEST_ACCESS from './database/api/test_access';\nimport { isNodeSdk } from './utils/environment';\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = instance.INTERNAL.registerService(\n    'database',\n    app => RepoManager.getInstance().databaseFromApp(app),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      enableLogging,\n      INTERNAL,\n      ServerValue: Database.ServerValue,\n      TEST_ACCESS\n    }\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\n/**\n * Extensions to the FirebaseApp and FirebaseNamespaces interfaces\n */\ndeclare module './app/firebase_app' {\n  interface FirebaseApp {\n    database?(): Database;\n  }\n}\n\ndeclare module './app/firebase_app' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): Database;\n      Database;\n      enableLogging;\n      INTERNAL;\n      Query;\n      Reference;\n      ServerValue;\n    };\n  }\n}\n\nregisterDatabase(firebase);\n\n\n\n// WEBPACK FOOTER //\n// ./src/database.ts","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = 26\n// module chunks = 0"],"sourceRoot":""}